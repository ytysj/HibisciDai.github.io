<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/2018/05/08/2018-5-8-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/05/08/2018-5-8-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2018/05/08/2018-5-8-Spring学习笔记/Spring学习笔记封面.jpg" alt="Spring学习笔记封面"></p><p>Spring，轻量级JavaEE解决方案，是众多优秀设计模式的整合，学习笔记</p><a id="more"></a><p>[TOC]</p><h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>轻量级JavaEE解决方案，是众多优秀设计模式的整合</p><h2 id="设计模式（公式）"><a href="#设计模式（公式）" class="headerlink" title="设计模式（公式）"></a>设计模式（公式）</h2><p>解决一些特定问题的经典代码</p><h3 id="Spring框架中主要的设计模式"><a href="#Spring框架中主要的设计模式" class="headerlink" title="Spring框架中主要的设计模式"></a>Spring框架中主要的设计模式</h3><p>工厂<br>代理<br>模板</p><h2 id="工厂模式简介"><a href="#工厂模式简介" class="headerlink" title="工厂模式简介"></a>工厂模式简介</h2><ul><li>作用：生产对象</li><li>耦合：代码之间具有强关联性</li><li>好处：解耦合</li><li>工厂设计思路：建立一个工厂类，有工厂类负责对象的创建</li></ul><h1 id="Spring开发步骤（通过工厂设计模式创建对象）"><a href="#Spring开发步骤（通过工厂设计模式创建对象）" class="headerlink" title="Spring开发步骤（通过工厂设计模式创建对象）"></a>Spring开发步骤（通过工厂设计模式创建对象）</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>引入jar包</p><h2 id="引入Spring配置文件"><a href="#引入Spring配置文件" class="headerlink" title="引入Spring配置文件"></a>引入Spring配置文件</h2><p>放置位置随意，命名随意，默认 <code>ApplicationContext.xml</code> </p><h2 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h2><p>ApplicationContext(工厂)</p><blockquote><p>重量级资源，内存多，功能强，一个应用只创建一个，线程安全</p></blockquote><h3 id="接口的实现类"><a href="#接口的实现类" class="headerlink" title="接口的实现类"></a>接口的实现类</h3><ul><li><p>ClassPathXmlApplicationContext（非Web环境）</p></li><li><p>WebXmlApplicationContext（Web环境）</p></li></ul><h1 id="Srping工厂的开发步骤"><a href="#Srping工厂的开发步骤" class="headerlink" title="Srping工厂的开发步骤"></a>Srping工厂的开发步骤</h1><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过Spring的工厂类创建对象"><a href="#通过Spring的工厂类创建对象" class="headerlink" title="通过Spring的工厂类创建对象"></a>通过Spring的工厂类创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过Spring工厂创建UserServiceImpl对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建工厂</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//利用工厂创建对象</span></span><br><span class="line">    UserService us = (UserService)ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line">    </span><br><span class="line">    us.register();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring工厂创建对象的原理"><a href="#Spring工厂创建对象的原理" class="headerlink" title="Spring工厂创建对象的原理"></a>Spring工厂创建对象的原理</h1><ol><li>读取配置文件</li><li>获得全限定名</li><li>通过反射获取对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"全限定名"</span>);</span><br><span class="line">clazz.newInstance();<span class="comment">//创建对象</span></span><br></pre></td></tr></table></figure><h1 id="注入（Injection）"><a href="#注入（Injection）" class="headerlink" title="注入（Injection）"></a>注入（Injection）</h1><p>通过Spring的配置文件为对象的成员变量赋值</p><h2 id="Set注入"><a href="#Set注入" class="headerlink" title="Set注入"></a>Set注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>通过Spring工厂创建对象</li><li>调用兑现给的set方法通过配置文件映射进行设值</li></ol><blockquote><p>配置文件中 <code>&lt; property name=&quot;id&quot; &gt;</code> 属性要和类的成员变量名对应，并一定要在类中书写setter和getter方法</p></blockquote><h3 id="JDK类型成员变量"><a href="#JDK类型成员变量" class="headerlink" title="JDK类型成员变量"></a>JDK类型成员变量</h3><p>现有 <code>User</code> 类<br>类结构如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] tels;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; s = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, String&gt; m = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line"><span class="keyword">private</span> Properties p = <span class="keyword">new</span> Properties(); <span class="comment">// 特殊的Map 键值都是String类型</span></span><br><span class="line"><span class="comment">//setter与getter方法</span></span><br><span class="line"><span class="comment">//toString方法</span></span><br><span class="line"><span class="comment">//无参有参构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/User类结构.jpg" alt="User类结构"></p><h4 id="8种基本类型及String类型"><a href="#8种基本类型及String类型" class="headerlink" title="8种基本类型及String类型"></a>8种基本类型及String类型</h4><p>在配置文件中声明如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数组类型的成员变量"><a href="#数组类型的成员变量" class="headerlink" title="数组类型的成员变量"></a>数组类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tels"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List类型的成员变量"><a href="#List类型的成员变量" class="headerlink" title="List类型的成员变量"></a>List类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"l"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaohei<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaohua<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaobai<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaowb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Set类型的成员变量"><a href="#Set类型的成员变量" class="headerlink" title="Set类型的成员变量"></a>Set类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Set成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"s"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Map类型的成员变量"><a href="#Map类型的成员变量" class="headerlink" title="Map类型的成员变量"></a>Map类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"m"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Properties类型的成员变量"><a href="#Properties类型的成员变量" class="headerlink" title="Properties类型的成员变量"></a>Properties类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Propertis类型的成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自建（自定义）类型注入成员变量"><a href="#自建（自定义）类型注入成员变量" class="headerlink" title="自建（自定义）类型注入成员变量"></a>自建（自定义）类型注入成员变量</h4><p>对于三层架构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dao</span><br><span class="line">daoImpl</span><br><span class="line">service</span><br><span class="line">serviceImpl</span><br></pre></td></tr></table></figure><p><code>service</code> 层引用 <code>dao</code> 层作为成员变量</p><h5 id="书写创建对象的类"><a href="#书写创建对象的类" class="headerlink" title="书写创建对象的类"></a>书写创建对象的类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//setter和getter方法</span></span><br><span class="line"><span class="comment">//实现接口方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在Spring配置中配置对应的-lt-bean-gt-标签"><a href="#在Spring配置中配置对应的-lt-bean-gt-标签" class="headerlink" title="在Spring配置中配置对应的 &lt; bean &gt; 标签"></a>在Spring配置中配置对应的 &lt; bean &gt; 标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置UserDAOIMpl的Bean标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.dao.UserDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置该类的信息 UserServiceImpl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 成员变量定义引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在目标实体类中定义成员变量，并且在配置文件中进行引入</p></blockquote><h5 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动注入，在spring配置文件中查询该成员变量指向的实际类型（通过类型） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过成员变量的名字，匹配spring配置文件中的bean标签的id值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="构造方法注入（了解）"><a href="#构造方法注入（了解）" class="headerlink" title="构造方法注入（了解）"></a>构造方法注入（了解）</h2><p>spring通过构造方法完成对于成员变量的赋值</p><p>前提：提供有参构造</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p>以类 <code>Account</code> 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set和get方法</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提供有参构造"><a href="#提供有参构造" class="headerlink" title="提供有参构造"></a>提供有参构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Integer id, Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring的配置文件配置"><a href="#spring的配置文件配置" class="headerlink" title="spring的配置文件配置"></a>spring的配置文件配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.Account"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量进行构造方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>有参构造中的成员变量的个数与顺序和构造注入时保持一致</p></blockquote><h3 id="构造方法可以重载"><a href="#构造方法可以重载" class="headerlink" title="构造方法可以重载"></a>构造方法可以重载</h3><ul><li><p>如果构造方法中，参数的个数不同时，通过  <code>&lt; contructor-arg &gt;</code> 标签的数量进行区分</p></li><li><p>如果构造方法的个数相同时，通过 <code>&lt; Contructor-arg type=&quot;&quot; &gt;</code>  通过参数类型区分</p></li></ul><h1 id="IOC与DI概念"><a href="#IOC与DI概念" class="headerlink" title="IOC与DI概念"></a>IOC与DI概念</h1><h2 id="IOC-Inversion-of-Control-反转控制"><a href="#IOC-Inversion-of-Control-反转控制" class="headerlink" title="IOC (Inversion  of Control) 反转控制"></a>IOC (Inversion  of Control) 反转控制</h2><ul><li><p>控制<br>对于成员变量的控制权</p></li><li><p>反转<br>把对于成员变量赋值的控制权从代码中转移到配置文件中完成</p></li></ul><p>例如 <code>UserServiceImpl</code></p><ul><li>使用前声明方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用后声明方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud;</span><br><span class="line"><span class="comment">//set和get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中进行set注入，把成员变量的赋值控制权从代码中转移到配置文件中</p><h2 id="DI-dependency-injection-依赖注入"><a href="#DI-dependency-injection-依赖注入" class="headerlink" title="DI (dependency  injection) 依赖注入"></a>DI (dependency  injection) 依赖注入</h2><p>当一个类型需要使用另一个类型时，就意味着他依赖另一个类型，那么就可以把另一个类型作为成员变量通过Spring的配置文件进行赋值。</p><p>解耦合</p><p>上<code>构造方法注入</code>例中已说明</p><h1 id="FactoryBean（接口）"><a href="#FactoryBean（接口）" class="headerlink" title="FactoryBean（接口）"></a>FactoryBean（接口）</h1><p>有些简单对象可以通过 <code>new</code> 的方式直接创建<br>复杂对象不能通过new对象创建，例如 <code>SqlSessionFactory</code></p><p>作用：在Spring的工厂中创建复杂对象</p><h2 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="该复杂类实现-FactoryBean-接口"><a href="#该复杂类实现-FactoryBean-接口" class="headerlink" title="该复杂类实现 FactoryBean 接口"></a>该复杂类实现 FactoryBean 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line"><span class="comment">// 作用：用于书写创建复杂对象的代码，并把创建的复杂对象作为方法的返回值返回</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建连接对象</span></span><br><span class="line"><span class="comment">// 加载驱动</span></span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.OracleDriver"</span>);</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回创建的复杂对象的类对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getObjectType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Connection.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制复杂对象的创建次数，根据对象的特点进行返回</span></span><br><span class="line"><span class="comment">// true:Spring工厂只会创建一次该复杂对象</span></span><br><span class="line"><span class="comment">// false:每一次调用Spring工厂 Spring都会创建新的复杂对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring配置文件中配置"><a href="#Spring配置文件中配置" class="headerlink" title="Spring配置文件中配置"></a>Spring配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置创建复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.factory.ConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工厂</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">// 创建Connection对象 注意：直接返回 所要创建的复杂对象</span></span><br><span class="line">Connection conn = (Connection) ac.getBean(<span class="string">"conn"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过bean标签的id值，直接创建对象时，拿到的是复杂对象<br>如果想要拿到原始对象，则需要在Spring创建对象时加上 <code>&amp;</code> 号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory cf = (ConnectionFactory) ac.getBean(<span class="string">"&amp;conn"</span>);</span><br><span class="line">System.out.println(cf);</span><br></pre></td></tr></table></figure><h3 id="控制简单对象的创建次数"><a href="#控制简单对象的创建次数" class="headerlink" title="控制简单对象的创建次数"></a>控制简单对象的创建次数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">scope</span>=<span class="string">"singleton|prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>singleton</code> 默认，简单对象只会被创建一次。<br><code>prototype</code> 简单对象每次使用时都会创建新的对象。</p><h1 id="Spring工厂的高级特性"><a href="#Spring工厂的高级特性" class="headerlink" title="Spring工厂的高级特性"></a>Spring工厂的高级特性</h1><h2 id="工厂创建对象的生命周期"><a href="#工厂创建对象的生命周期" class="headerlink" title="工厂创建对象的生命周期"></a>工厂创建对象的生命周期</h2><p>工厂被创建，对象被创建<br>工厂被关闭，对象被销毁</p><h2 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h2><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><p>对象中任意定义一个初始化方法·。Spring会在这个对象创建之后，自动调用初始化方法的功能。</p><h3 id="destroy-method"><a href="#destroy-method" class="headerlink" title="destroy-method"></a>destroy-method</h3><p>对象中任意定义一个销毁方法。Spring会在这个对销毁之前调用销毁方法。</p><p>在<code>Account</code>类中声明方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.Account"</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量进行构造方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置信息参数化"><a href="#配置信息参数化" class="headerlink" title="配置信息参数化"></a>配置信息参数化</h2><p>作用：把Spring配置文件中，需要修改的jdbc相关参数，提取到一个小的专一化的配置文件中</p><p>好处：利于后续的维护</p><h3 id="开发步骤-2"><a href="#开发步骤-2" class="headerlink" title="开发步骤"></a>开发步骤</h3><h4 id="准备小配置文件"><a href="#准备小配置文件" class="headerlink" title="准备小配置文件"></a>准备小配置文件</h4><p>创建文件 <code>jdbc.properties</code> 文件要以 <code>.properties</code> 结尾</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverclassname=oracle.jdbc.OracleDriver</span><br><span class="line">url=jdbc:oracle:thin:@localhost:1521:xe</span><br><span class="line">name=hr</span><br><span class="line">password=hr</span><br></pre></td></tr></table></figure><h4 id="与spring配置文件整合"><a href="#与spring配置文件整合" class="headerlink" title="与spring配置文件整合"></a>与spring配置文件整合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用Context标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过Context标签读取对应的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"/jdbc.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其中，引入context标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context-3.2.xsd</span><br></pre></td></tr></table></figure><h4 id="通过占位符替换Spring配置文件中的内容"><a href="#通过占位符替换Spring配置文件中的内容" class="headerlink" title="通过占位符替换Spring配置文件中的内容"></a>通过占位符替换Spring配置文件中的内容</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置创建复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.factory.ConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Set注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverclassname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;driverclassname&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;url&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP-Aspect-Oriented-Program-面向切面编程"><a href="#AOP-Aspect-Oriented-Program-面向切面编程" class="headerlink" title="AOP(Aspect Oriented Program) | 面向切面编程"></a>AOP(Aspect Oriented Program) | 面向切面编程</h1><h2 id="静态代理设计模式（Proxy）"><a href="#静态代理设计模式（Proxy）" class="headerlink" title="静态代理设计模式（Proxy）"></a>静态代理设计模式（Proxy）</h2><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/静态代理设计模式.png" alt="静态代理设计模式"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>原始对象（目标对象）</li></ul><p>只做核心功能</p><ul><li>原始方法</li></ul><p>原始对象中的方法，只做核心功能</p><ul><li>额外功能</li></ul><p>事务  日志  性能</p><ul><li>代理对象</li></ul><p>原始对象+额外功能+与原始对象实现相同的接口</p><ul><li>好处</li></ul><p>利于维护</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>学习源码<a href="https://github.com/HibisciDai/TestSpring" target="_blank" rel="noopener">HibisciDai/TestSpring</a></p>]]></content>
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-12-享元模式</title>
      <link href="/2018/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-12-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-12-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/25/设计模式-12-享元模式/设计模式12.png" alt="设计模式12"></p><p>设计模式-12-享元模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-12-享元模式"><a href="#设计模式-12-享元模式" class="headerlink" title="设计模式-12-享元模式"></a>设计模式-12-享元模式</h1><h1 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式(Flyweight Pattern)"></a>享元模式(Flyweight Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>运用共享技术有效地支持大量细粒度的对象。</p><blockquote><p>The Intent of this pattern is to use sharing to a large number of objects that have part of their internal state in common whaere the other part of state can vary.</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构方式。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>系统中有大量对象。 </li><li>这些对象消耗大量内存。</li><li>这些对象的状态大部分可以外部化。</li><li>这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。</li><li>系统不依赖于这些对象身份，这些对象是不可分辨的。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>用 HashMap 存储这些对象。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 </li><li>数据库的数据池。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>大大减少对象的创建，降低系统的内存，使效率提高。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>系统有大量相似对象。</li><li>需要缓冲池的场景。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>注意划分外部状态和内部状态，否则可能会引起线程安全问题。</li><li>这些类必须有一个工厂对象加以控制。</li><li>常和compostie（组合）模式结合</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>构建一个森林，里边有大量的河流、草、树木及其他大粒度对象。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/25/设计模式-12-享元模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern12.flyweight.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">River</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一条"</span> + size + <span class="string">"米长的河"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gress</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一课"</span> + size + <span class="string">"米高的草"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一课"</span> + size + <span class="string">"米高的树"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line">Hashtable&lt;String, Forest&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Forest&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">poolAdd(<span class="string">"river"</span>, <span class="keyword">new</span> River());</span><br><span class="line">poolAdd(<span class="string">"tree"</span>, <span class="keyword">new</span> Tree());</span><br><span class="line">poolAdd(<span class="string">"gress"</span>, <span class="keyword">new</span> Gress());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poolAdd</span><span class="params">(String key, Forest forest)</span> </span>&#123;</span><br><span class="line">pool.put(key, forest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Forest <span class="title">getFlyWeight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!pool.contains(key)) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有这个对象，请先添加！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (Forest) pool.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>军队士兵的例子</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/25/设计模式-12-享元模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern12.flyweight.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Color</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Color</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> height;</span><br><span class="line">Color skinColor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solider</span> <span class="keyword">extends</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"士兵，高："</span> + height + <span class="string">",肤色"</span> + skinColor.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninja</span> <span class="keyword">extends</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"忍者，高："</span> + height + <span class="string">",肤色"</span> + skinColor.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Hashtable&lt;String, Enemy&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Enemy&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">pool.put(<span class="string">"solider"</span>, <span class="keyword">new</span> Solider());</span><br><span class="line">pool.put(<span class="string">"ninja"</span>, <span class="keyword">new</span> Ninja());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">poolAdd(<span class="string">"solider"</span>, <span class="keyword">new</span> Solider());</span><br><span class="line">poolAdd(<span class="string">"ninja"</span>, <span class="keyword">new</span> Ninja());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poolAdd</span><span class="params">(String key, Enemy e)</span> </span>&#123;</span><br><span class="line">pool.put(key, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Enemy <span class="title">getFlyWeight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!pool.contains(key)) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有这个对象，请先添加！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (Enemy) pool.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><p>详见 菜鸟教程</p><p><img src="/2018/04/25/设计模式-12-享元模式/案例3.jpg" alt="案例3"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>享元类应为接口而不是抽象类，否则无法获取。前两个案例有问题。</p><p>Hashtable 声明方式应该注意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashtable&lt;String, Forest&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Forest&gt;();<span class="comment">//正确</span></span><br><span class="line">Hashtable pool = <span class="keyword">new</span> Hashtable();<span class="comment">//不报错，不规范</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-11-外观模式</title>
      <link href="/2018/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-11-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-11-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/23/设计模式-11-外观模式/设计模式11.png" alt="设计模式11"></p><p>设计模式-11-外观模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-11-外观模式"><a href="#设计模式-11-外观模式" class="headerlink" title="设计模式-11-外观模式"></a>设计模式-11-外观模式</h1><h1 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式(Facade Pattern)"></a>外观模式(Facade Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式，向现有系统提供添加了一个接口，来隐藏系统的复杂性。<br>这种模式涉及了一个单一的类，提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。</li><li>定义系统的入口。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>客户端不与系统耦合，外观类与系统耦合。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。</li><li>JAVA 的三层开发模式。</li><li>电脑的例子更形象：<br>电脑整机是CUP、内存、硬盘的外观。有了外观以后，启动电脑和关闭电脑都简化了。<br>启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘<br>关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>减少系统相互依赖。</li><li>提高灵活性。</li><li>提高了安全性。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>为复杂的模块或子系统提供外界访问的模块。</li><li>子系统相对独立。</li><li>预防低水平人员带来的风险。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>抽象工厂模式，可代替其模式隐藏细节。</li><li>单例模式中，Facade对象常为Singleton模式</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>模拟一个取钱过程</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/23/设计模式-11-外观模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern11.facade.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NingLi</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fetchAndCarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"搬"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoBai</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">install</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"安装"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doraemon</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"结算"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">protect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"保护"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Other</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">NingLi nl = <span class="keyword">new</span> NingLi();</span><br><span class="line">XiaoBai xb = <span class="keyword">new</span> XiaoBai();</span><br><span class="line">Doraemon dn = <span class="keyword">new</span> Doraemon();</span><br><span class="line">SuperMan sm = <span class="keyword">new</span> SuperMan();</span><br><span class="line">Other o = <span class="keyword">new</span> Other();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">nl.fetchAndCarry();</span><br><span class="line">sm.protect();</span><br><span class="line">dn.account();</span><br><span class="line">o.other();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">installSoftWare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">xb.install();</span><br><span class="line">dn.account();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">f.DrawMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">搬</span><br><span class="line">保护</span><br><span class="line">结算</span><br><span class="line">其他</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>投影仪放电影有很多操作，现在需要提供一个方便看电影的类。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/23/设计模式-11-外观模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern11.facade.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Projector</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Projector-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Projector-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-放入"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-拿出"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-播放"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DVD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-播放"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Light-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Light-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Projector p;</span><br><span class="line"><span class="keyword">private</span> CD c;</span><br><span class="line"><span class="keyword">private</span> DVD d;</span><br><span class="line"><span class="keyword">private</span> Light l;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p = <span class="keyword">new</span> Projector();</span><br><span class="line">c = <span class="keyword">new</span> CD();</span><br><span class="line">d = <span class="keyword">new</span> DVD();</span><br><span class="line">l = <span class="keyword">new</span> Light();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p.up();</span><br><span class="line">l.off();</span><br><span class="line">d.on();</span><br><span class="line">c.on();</span><br><span class="line">c.play();</span><br><span class="line">d.play();</span><br><span class="line">d.off();</span><br><span class="line">c.off();</span><br><span class="line">l.on();</span><br><span class="line">p.down();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Movie m = <span class="keyword">new</span> Movie();</span><br><span class="line">m.watch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Projector-开</span><br><span class="line">Light-关</span><br><span class="line">DVD-开</span><br><span class="line">CD-放入</span><br><span class="line">CD-播放</span><br><span class="line">DVD-播放</span><br><span class="line">DVD-关</span><br><span class="line">CD-拿出</span><br><span class="line">Light-开</span><br><span class="line">Projector-关</span><br></pre></td></tr></table></figure><h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><p>详见 菜鸟教程</p><p><img src="/2018/04/23/设计模式-11-外观模式/案例3.jpg" alt="案例3"></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mongodb学习笔记</title>
      <link href="/2018/04/21/2018-4-21-Mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/21/2018-4-21-Mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB学习笔记封面.jpg" alt="MongoDB学习笔记封面"></p><p>MongoDB，NoSql非关系型数据库，大数据基础课程，学习笔记</p><a id="more"></a><p>[TOC]</p><h1 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h1><p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。<br>传统数据由关系数据库管理系统（RDBMS）来处理。</p><h2 id="关系型数据库遵循ACID原则"><a href="#关系型数据库遵循ACID原则" class="headerlink" title="关系型数据库遵循ACID原则"></a>关系型数据库遵循ACID原则</h2><ul><li>A (Atomicity) 原子性</li></ul><p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。<br>比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p><ul><li>C (Consistency) 一致性</li></ul><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</p><p>例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p><ul><li>I (Isolation) 独立性</li></ul><p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p><p>比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p><ul><li>D (Durability) 持久性</li></ul><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><p>分布式系统（distributed system）由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。<br>分布式系统是建立在网络之上的软件系统。</p><h3 id="分布式计算的优点"><a href="#分布式计算的优点" class="headerlink" title="分布式计算的优点"></a>分布式计算的优点</h3><ul><li>可靠性（容错） </li></ul><p>分布式计算系统中的一个重要的优点是可靠性。一台服务器的系统崩溃并不影响到其余的服务器。</p><ul><li>可扩展性</li></ul><p>在分布式计算系统可以根据需要增加更多的机器。</p><ul><li>资源共享</li></ul><p>共享数据是必不可少的应用，如银行，预订系统。</p><ul><li>灵活性</li></ul><p>由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。</p><ul><li>更快的速度</li></ul><p>分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。</p><ul><li>开放系统</li></ul><p>由于它是开放的系统，本地或者远程都可以访问到该服务。</p><ul><li>更高的性能</li></ul><p>相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。</p><h3 id="分布式计算的缺点"><a href="#分布式计算的缺点" class="headerlink" title="分布式计算的缺点"></a>分布式计算的缺点</h3><ul><li>故障排除</li></ul><p>故障排除和诊断问题。</p><ul><li>软件</li></ul><p>更少的软件支持是分布式计算系统的主要缺点。</p><ul><li>网络</li></ul><p>网络基础设施的问题，包括：传输问题，高负载，信息丢失等。</p><ul><li>安全性</li></ul><p>开放系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。</p><h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h2><p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p><p>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><h2 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h2><h3 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h3><ul><li>高度组织化结构化数据 </li><li>结构化查询语言（SQL） (SQL) </li><li>数据和关系都存储在单独的表中。 </li><li>数据操纵语言，数据定义语言 </li><li>严格的一致性</li><li>基础事务</li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li>键 - 值对存储，列存储，文档存储，图形数据库</li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理 </li><li>高性能，高可用性和可伸缩性</li></ul><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>在计算机科学中, CAP定理（CAP theorem）, 又被称作 布鲁尔定理（Brewer’s theorem）, 它指出对于一个分布式计算系统来说，不可能同时满足以下三点:</p><ul><li>一致性(Consistency) (所有节点在同一时间具有相同的数据)</li><li>可用性(Availability) (保证每个请求不管成功或者失败都有响应)</li><li>分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</li></ul><p>根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：</p><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/cap-theoram-image.png" alt="cap-theoram"></p><ul><li>CA<br>单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li><li>CP<br>满足一致性，分区容忍性的系统，通常性能不是特别高。</li><li>AP<br>满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li></ul><h2 id="NoSQL的优点-缺点"><a href="#NoSQL的优点-缺点" class="headerlink" title="NoSQL的优点/缺点"></a>NoSQL的优点/缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>高可扩展性</li><li>分布式计算</li><li>低成本</li><li>架构的灵活性，半结构化数据</li><li>没有复杂的关系</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>没有标准化</li><li>有限的查询功能（到目前为止）</li><li>最终一致是不直观的程序</li></ul><h2 id="流行的NoSql"><a href="#流行的NoSql" class="headerlink" title="流行的NoSql"></a>流行的NoSql</h2><p>SSDB</p><h1 id="大数据前言"><a href="#大数据前言" class="headerlink" title="大数据前言"></a>大数据前言</h1><h2 id="大数据概念"><a href="#大数据概念" class="headerlink" title="大数据概念"></a>大数据概念</h2><p>“大数据”(big  data)是一个体量特别大,数据类别特别大的数据集。</p><h2 id="大数据特点"><a href="#大数据特点" class="headerlink" title="大数据特点"></a>大数据特点</h2><ul><li>容量（Volume）：  数据的大小决定所考虑的数据的价值和潜在的信息</li><li>种类（Variety）： 数据类型的多样性</li><li>速度（Velocity）：指获得数据的速度</li><li>真实性（Veracity）：数据的质量 </li><li>价值（Value）：合理运用大数据，以低成本创造高价值</li></ul><h2 id="大数据应用场景"><a href="#大数据应用场景" class="headerlink" title="大数据应用场景"></a>大数据应用场景</h2><ul><li>医疗大数据  看病更高效</li><li>零售大数据  最懂消费者</li><li>电商大数据      精准营销法宝</li><li>农牧大数据      量化生产</li><li>交通大数据      畅通出行</li><li>教育大数据      因材施教</li><li>环保大数据      对抗PM2.5</li><li>食品大数据      舌尖上的安全</li></ul><h1 id="集群（群集）Cluster"><a href="#集群（群集）Cluster" class="headerlink" title="集群（群集）Cluster"></a>集群（群集）Cluster</h1><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/集群总述.png" alt="集群总述"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>多台计算机（服务器），一起对外提供服务</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>更加可靠（Hight Avaliable 高可用）</li><li>解决单机硬件的物理上限</li><li>超级运算（超算）军工 科研</li></ol><h2 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类</h2><h3 id="主备集群-Master-Standby"><a href="#主备集群-Master-Standby" class="headerlink" title="主备集群(Master-Standby)"></a>主备集群(Master-Standby)</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/主备集群-Master-Standby.png" alt="主备集群"></p><h3 id="主从集群-Master-slave"><a href="#主从集群-Master-slave" class="headerlink" title="主从集群(Master-slave)"></a>主从集群(Master-slave)</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/主从集群-Master-slave.png" alt="主从集群"></p><h3 id="负载均衡集群"><a href="#负载均衡集群" class="headerlink" title="负载均衡集群"></a>负载均衡集群</h3><h3 id="高性能计算集群"><a href="#高性能计算集群" class="headerlink" title="高性能计算集群"></a>高性能计算集群</h3><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB的主页</a></p><p><strong>MongoDB是一个高性能，开源，无模式的文档型NoSQL数据。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="主要功能特性"><a href="#主要功能特性" class="headerlink" title="主要功能特性"></a>主要功能特性</h3><ol><li>文件存储格式为BSON（一种JSON的扩展）</li><li>模式自由</li><li>支持动态查询</li><li>支持完全索引</li><li>支持复制和故障恢复</li><li>使用高效的二进制数据存储，包括大型对象（如视频等）</li><li>自动处理碎片，以支持云计算层次的扩展性 </li><li>支持JAVA,RUBY，PYTHON，C++，PHP等多种语言</li><li>内部支持JavaScript</li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>查询速度快。</li><li>高并发。可以达到2万个并发</li><li>高容量。支持10TB以上的数据量</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>网站数据</li><li>缓存</li><li>大尺寸、低价值的数据</li><li>高伸缩性的场景</li><li>用于对象及JSON数据的存储</li></ol><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ol><li>在32位系统上，不支持大于2.5G的数据</li><li>单个文件大小限制为16M</li><li>高度事务性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。</li><li>传统的商业智能应用：针对特定问题的BI数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。   </li></ol><h3 id="MongoDB与关系型数据库对比"><a href="#MongoDB与关系型数据库对比" class="headerlink" title="MongoDB与关系型数据库对比"></a>MongoDB与关系型数据库对比</h3><table><thead><tr><th style="text-align:center">对比项</th><th style="text-align:center">MongoDB</th><th style="text-align:center">MySQL、Oracle</th></tr></thead><tbody><tr><td style="text-align:center">数据库</td><td style="text-align:center">数据库(dataBase)</td><td style="text-align:center">数据库(dataBase、schema)</td></tr><tr><td style="text-align:center">表</td><td style="text-align:center">集合(collection)</td><td style="text-align:center">二维表(table)</td></tr><tr><td style="text-align:center">表中的一行数据</td><td style="text-align:center">文档(document)</td><td style="text-align:center">一条记录(record)</td></tr><tr><td style="text-align:center">表字段</td><td style="text-align:center">键(key)</td><td style="text-align:center">列(column)</td></tr><tr><td style="text-align:center">主外键</td><td style="text-align:center">无</td><td style="text-align:center">PK、FK</td></tr><tr><td style="text-align:center">灵活度扩展性</td><td style="text-align:center">极高</td><td style="text-align:center">差</td></tr></tbody></table><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB与关系型数据库对比.png" alt="MongoDB与关系型数据库对比"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>一个mongodb中可以建立多个数据库。</p><p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</p><p>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><p><em>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</em></p><ul><li>不能是空字符串（””)。</li><li>不得含有’ ‘（空格)、.、$、/、\和\0 (空字符)。</li><li>应全部小写。</li><li>最多64字节。</li></ul><p><em>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</em></p><ul><li>admin<br>从权限的角度来看，这是<code>root</code>数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li>local<br>这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li>config<br>当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档是一组键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><table><thead><tr><th style="text-align:center">RDBMS</th><th style="text-align:center">MongoDB</th></tr></thead><tbody><tr><td style="text-align:center">数据库</td><td style="text-align:center">数据库</td></tr><tr><td style="text-align:center">表格</td><td style="text-align:center">集合</td></tr><tr><td style="text-align:center">行</td><td style="text-align:center">文档</td></tr><tr><td style="text-align:center">列</td><td style="text-align:center">字段</td></tr><tr><td style="text-align:center">表联合</td><td style="text-align:center">嵌入文档</td></tr><tr><td style="text-align:center">主键</td><td style="text-align:center">主键 (MongoDB 提供了 key 为 _id )</td></tr></tbody></table><table><thead><tr><th style="text-align:center">数据库服务和客户端</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">Mysqld/Oracle</td><td style="text-align:center">mongod</td></tr><tr><td style="text-align:center">mysql/sqlplus</td><td style="text-align:center">mongo</td></tr></tbody></table><ul><li>需要注意的是</li></ul><ol><li>文档中的键/值对是有序的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li>MongoDB区分类型和大小写。</li><li>MongoDB的文档不能有重复的键。</li><li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li></ol><ul><li>文档键命名规范</li></ul><ol><li>键不能含有\0 (空字符)。这个字符用来表示键的结尾。</li><li>.和$有特别的意义，只有在特定环境下才能使用。</li><li>以下划线<code>_</code>开头的键是保留的(不是严格要求的)。</li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><h3 id="合法的集合名"><a href="#合法的集合名" class="headerlink" title="合法的集合名"></a>合法的集合名</h3><ol><li>集合名不能是空字符串<code>&quot;&quot;</code>。</li><li>集合名不能含有\0字符（空字符)，这个字符表示集合名的结尾。</li><li>集合名不能以”system.”开头，这是为系统集合保留的前缀。</li><li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现<code>$</code>。</li></ol><h3 id="capped-collections"><a href="#capped-collections" class="headerlink" title="capped collections"></a>capped collections</h3><p>Capped collections 就是固定大小的collection。</p><p>它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 “RRD” 概念类似。</p><p>Capped collections是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能 和标准的collection不同，你必须要显式的创建一个capped collection， 指定一个collection的大小，单位是字节。collection的数据存储空间值提前分配的。</p><p>要注意的是指定的存储大小包含了数据库的头信息。</p><ol><li>在capped collection中，你能添加新的对象。</li><li>更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li><li>不允许进行删除。使用<code>rop()</code>删除collection所有的行。</li><li>删除之后，你必须显式的重新创建这个collection。</li><li>it机器中，capped collection最大存储为1e9( 1X109)个字节。</li></ol><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><table><thead><tr><th style="text-align:center">集合命名空间</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">dbname.system.namespaces</td><td style="text-align:center">列出所有名字空间。</td></tr><tr><td style="text-align:center">dbname.system.indexes</td><td style="text-align:center">列出所有索引。</td></tr><tr><td style="text-align:center">dbname.system.profile</td><td style="text-align:center">包含数据库概要(profile)信息。</td></tr><tr><td style="text-align:center">dbname.system.users</td><td style="text-align:center">列出所有可访问数据库的用户。</td></tr><tr><td style="text-align:center">dbname.local.sources</td><td style="text-align:center">包含复制对端（slave）的服务器信息和状态。</td></tr></tbody></table><p>在<code>{ { system.indexes } }</code>插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。</p><p><code>{ { system.users } }</code>是可修改的。</p><p><code>{ { system.profile } }</code>是可删除的。</p><h2 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h2><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">String</td><td style="text-align:center">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td style="text-align:center">Integer</td><td style="text-align:center">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td style="text-align:center">Boolean</td><td style="text-align:center">布尔值。用于存储布尔值（真/假）。</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">双精度浮点值。用于存储浮点值。</td></tr><tr><td style="text-align:center">Min/Max keys</td><td style="text-align:center">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td style="text-align:center">Array</td><td style="text-align:center">用于将数组或列表或多个值存储为一个键。</td></tr><tr><td style="text-align:center">Timestamp</td><td style="text-align:center">时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td style="text-align:center">Object</td><td style="text-align:center">用于内嵌文档。</td></tr><tr><td style="text-align:center">Null</td><td style="text-align:center">用于创建空值。</td></tr><tr><td style="text-align:center">Symbol</td><td style="text-align:center">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td style="text-align:center">Date</td><td style="text-align:center">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td style="text-align:center">Object ID</td><td style="text-align:center">对象 ID。用于创建文档的 ID。</td></tr><tr><td style="text-align:center">Binary Data</td><td style="text-align:center">二进制数据。用于存储二进制数据。</td></tr><tr><td style="text-align:center">Code</td><td style="text-align:center">代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td style="text-align:center">Regular expression</td><td style="text-align:center">正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h3 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h3><p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p><ol><li>前 4 个字节表示创建 unix时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</li><li>接下来的 3 个字节是机器标识码</li><li>紧接的两个字节由进程 id 组成 PID</li><li>最后三个字节是随机数</li></ol><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/ObjectId.jpeg" alt="ObjectId"></p><p>MongoDB 中存储的文档必须有一个<code>_id</code>键。这个键的值可以是任何类型的，默认是个 ObjectId 对象。</p><p>由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; var newObject = ObjectId()</span><br><span class="line">&gt; newObject.getTimestamp()</span><br><span class="line"></span><br><span class="line">ISODate(&quot;2017-11-25T07:21:10Z&quot;)</span><br></pre></td></tr></table></figure><p>ObjectId 转为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; newObject.str</span><br><span class="line"></span><br><span class="line">5a1919e63df83ce79df8b38f</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>BSON 字符串都是 UTF-8 编码。</p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>BSON 有一个特殊的时间戳类型用于 MongoDB 内部使用，与普通的 日期 类型不相关。 时间戳值是一个 64 位的值。其中：</p><ul><li>前32位是一个 time_t 值（与Unix新纪元相差的秒数）</li><li>后32位是在某秒中操作的一个递增的序数<br>在单个 mongod 实例中，时间戳值通常是唯一的。</li></ul><p>在复制集中， oplog 有一个 ts 字段。这个字段中的值使用BSON时间戳表示了操作时间。</p><blockquote><p>BSON 时间戳类型主要用于 MongoDB 内部使用。在大多数情况下的应用开发中，你可以使用 BSON 日期类型。</p></blockquote><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>表示当前距离 Unix新纪元（1970年1月1日）的毫秒数。日期类型是有符号的, 负数表示 1970 年之前的日期。</p><h2 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h2><ol><li>从官方获得MongoDB的压缩包</li><li>将其解压到 d:\，再重命名为mongo，路径为d:\mongo</li><li>创建MongoDB的数据文件夹</li></ol><h3 id="windows-下安装MongoDB"><a href="#windows-下安装MongoDB" class="headerlink" title="windows 下安装MongoDB"></a>windows 下安装MongoDB</h3><p><em>zip版，mis版本不再介绍</em></p><p>搭建文件目录路径如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─mongodb</span><br><span class="line">│  └─bin</span><br><span class="line">├─mongodbdata</span><br><span class="line">├─mongodetc</span><br><span class="line">└─mongodlog</span><br></pre></td></tr></table></figure><p><code>mongodb</code> 为主文件目录，其中 <code>bin</code> 为主要目录<br><code>mongodbdata</code> 为数据库目录<br><code>mongodetc</code> 为配置文件目录<br><code>mongodlog</code> 为日志目录</p><ul><li>设置数据库位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --dbpath G:\mongodb\mongodbdata</span><br></pre></td></tr></table></figure><ul><li>设置目录文件</li></ul><p>对应一个文件，而不是目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --logpath g:\mongodb\mongodlog\mongodlog</span><br></pre></td></tr></table></figure><p>另外可以书写配置文件编写bat批处理一键启动服务</p><ul><li>编写配置文件</li></ul><p><code>mongod.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: g:\mongodb\mongodlog\mongodlog</span><br><span class="line">storage:</span><br><span class="line">    dbPath: g:\mongodb\mongodbdata</span><br></pre></td></tr></table></figure><ul><li>以配置文件安装服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --config "g:\mongodb\mongodetc\ongod.cfg" --install</span><br></pre></td></tr></table></figure><ul><li>以配置文件启动服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g:\mongodb\mongodb\bin\mongod.exe --config g:\mongodb\mongodetc\mongod.cfg</span><br></pre></td></tr></table></figure><h3 id="启动MongoDB服务端"><a href="#启动MongoDB服务端" class="headerlink" title="启动MongoDB服务端:"></a>启动MongoDB服务端:</h3><p>d:\mongo\bin\<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=d:\db --logpath=c:\mongo\logs       \mongodb.log --port=27017</span><br></pre></td></tr></table></figure></p><h3 id="MongoDB命令参数说明"><a href="#MongoDB命令参数说明" class="headerlink" title="MongoDB命令参数说明"></a>MongoDB命令参数说明</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">dbpath</td><td style="text-align:center">数据文件存放路径，每个数据库会在其中创建一个子目录，用于防止同一个实例多次运行的mongod.lock  也保存在此目录中</td></tr><tr><td style="text-align:center">logpath</td><td style="text-align:center">日志文件</td></tr><tr><td style="text-align:center">logappend</td><td style="text-align:center">日志采用追加模式（默认是覆写模式）</td></tr><tr><td style="text-align:center">bind_ip</td><td style="text-align:center">对外服务的绑定ip，一般设置为空，及绑定在本机所有可用ip 上</td></tr><tr><td style="text-align:center">port</td><td style="text-align:center">对外服务端口。Web  管理端口在这个port  的基础上+1000</td></tr><tr><td style="text-align:center">fork</td><td style="text-align:center">以后台Daemon  形式运行服务</td></tr><tr><td style="text-align:center">journal</td><td style="text-align:center">开启日志功能，通过保存操作日志来降低单机故障的恢复时间</td></tr><tr><td style="text-align:center">syncdelay</td><td style="text-align:center">系统同步刷新磁盘的时间，单位为秒，默认是60 秒</td></tr><tr><td style="text-align:center">directoryperdb</td><td style="text-align:center">每个db 存放在单独的目录中，建议设置该参数</td></tr><tr><td style="text-align:center">maxConns</td><td style="text-align:center">最大连接数</td></tr><tr><td style="text-align:center">repairpath</td><td style="text-align:center">执行repair  时的临时目录。在如果没有开启journal，异常down  机后重启，必须执行repair操作</td></tr></tbody></table><h2 id="MongoDB-连接"><a href="#MongoDB-连接" class="headerlink" title="MongoDB - 连接"></a>MongoDB - 连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span><br></pre></td></tr></table></figure><ul><li>mongodb://<br>这是固定的格式，必须要指定。</li><li>username:password@<br>可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库</li><li>host1<br>必须的指定至少一个<code>host</code>, <code>host1</code> 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</li><li>portX<br>可选的指定端口，如果不填，默认为<code>27017</code></li><li>/database<br>如果指定<code>username:password@</code>，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。</li><li>?options<br>是连接选项。如果不使用<code>/database</code>，则前面需要加上<code>/</code>。所有连接选项都是键值对<code>name=value</code>，键值对之间通过<code>&amp;</code>或<code>;</code>（分号）隔开</li></ul><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">replicaSet=name</td><td style="text-align:left">验证replica set的名称。 Impliesconnect=replicaSet.</td></tr><tr><td style="text-align:center">slaveOk=true\</td><td style="text-align:left">false 或 true:在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。false: 在 connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。</td></tr><tr><td style="text-align:center">safe=true\</td><td style="text-align:left">false 或 true: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。</td></tr><tr><td style="text-align:center">w=n</td><td style="text-align:left">驱动添加 { w : n } 到getLastError命令. 应用于safe=true。</td></tr><tr><td style="text-align:center">wtimeoutMS=ms</td><td style="text-align:left">驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe=true.</td></tr><tr><td style="text-align:center">fsync=true\</td><td style="text-align:left">false 或 true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe=true.false: 驱动不会添加到getLastError命令中。</td></tr><tr><td style="text-align:center">journal=true\</td><td style="text-align:left">false 或 如果设置为 true, 同步到 journal (在提交到数据库前写入到实体中). 应用于 safe=true</td></tr><tr><td style="text-align:center">connectTimeoutMS=ms</td><td style="text-align:left">可以打开连接的时间。</td></tr><tr><td style="text-align:center">socketTimeoutMS=ms</td><td style="text-align:left">发送和接受sockets的时间。</td></tr></tbody></table><ul><li>使用默认端口来连接 MongoDB 的服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://localhost</span><br></pre></td></tr></table></figure><ul><li>通过 shell 连接 MongoDB 服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="MongoDB数据库基本命令"><a href="#MongoDB数据库基本命令" class="headerlink" title="MongoDB数据库基本命令:"></a>MongoDB数据库基本命令:</h2><ol><li>Help查看命令提示</li></ol><p><code>db.help()</code></p><ol><li>显示当前数据库的名字</li></ol><p><code>db</code></p><ol><li>切换/创建数据库</li></ol><p><code>use 数据库名</code><br>当创建一个集合的时候会自动创建当前数据库</p><ol><li>显示所有的数据库</li></ol><p><code>show dbs</code></p><ol><li>删除当前数据库</li></ol><p><code>db.dropDatabase()</code></p><ol><li>显示当前db状态</li></ol><p><code>db.stats()</code></p><ol><li>当前db版本</li></ol><p><code>db.version()</code></p><ol><li>查看当前db的链接机器地址</li></ol><p><code>db.getMongo()</code></p><h3 id="MongoDB操作集合（Collection-相关操作"><a href="#MongoDB操作集合（Collection-相关操作" class="headerlink" title="MongoDB操作集合（Collection)相关操作"></a>MongoDB操作集合（Collection)相关操作</h3><ol><li>创建集合</li></ol><p>显示创建:</p><p><code>db.createCollection(“users”);</code></p><p>隐式创建(直接向集合插入数据):</p><p><code>db.users.insert({name:”suns”,age:10})</code></p><ol><li>显示当前数据库中的所有集合</li></ol><p><code>show collections</code><br><code>show tables</code></p><ol><li>删除集合</li></ol><p><code>db.users.drop()</code></p><h3 id="MongoDB操作文档-Document-相关操作"><a href="#MongoDB操作文档-Document-相关操作" class="headerlink" title="MongoDB操作文档(Document)相关操作"></a>MongoDB操作文档(Document)相关操作</h3><ol><li>创建文档</li></ol><p>文档格式遵从<em>json</em>格式</p><p><code>db.users.insert({name:”suns”,age:10})</code><br>自动生成一个全球唯一的主键，文档主键<code>_id</code>：时间戳、机器、PID、计数器</p><ol><li>删除文档</li></ol><p><code>db.users.remove({})</code></p><p><code>db.users.remove({name:”suns”})</code></p><ol><li>修改文档</li></ol><p><code>db.users.update(query,update,upsert,multi)</code></p><p><code>query</code><br>修改的条件，若为<code>{}</code> 则全选</p><p><code>update</code><br>更新的命令</p><p><code>upsert</code><br>如果未发现符合要求的数据内容，是否进行插入操作，1或者true 进行插入，0或者false不进行插入</p><p><code>multi</code>   是否进行多行更新，1或者true 进行多行更新，0或者false不进行多行更新</p><ol><li>修改文档具体案例</li></ol><p><code>db.users.update({name:”suns”},{$set:{password:”888”}},0, 1)</code> </p><p><code>$set</code>等同于sql语句中的set</p><p><code>$inc</code>为对应key中的数据内容进行算数运算（增加）</p><p><code>db.users.update({},{$inc:{age:1},0,1})</code></p><h3 id="MongoDB查询相关操作"><a href="#MongoDB查询相关操作" class="headerlink" title="MongoDB查询相关操作"></a>MongoDB查询相关操作</h3><h4 id="基本查询操作"><a href="#基本查询操作" class="headerlink" title="基本查询操作"></a>基本查询操作</h4><p>查询集合中所有内容:<code>db.users.find();</code></p><p>查询集合中第一个内容:<code>db.users.findOne();</code></p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li><code>=</code> 条件 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `!=` 条件 `$ne`</span><br><span class="line"></span><br><span class="line">```db.users.find(&#123;name:&#123;“$ne”:”suns”&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>&gt;</code> 条件 <code>$gt</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `&lt;` 条件 `$lt`</span><br><span class="line"></span><br><span class="line">```db.users.find(&#123;age:&#123;“$lt”:10&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>&gt;=</code> 条件 <code>$gte</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `&lt;=` 条件 `$lte`</span><br><span class="line"></span><br><span class="line">```db.users.find(&#123;age:&#123;“$lte”:10&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ul><li>与运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;name:”suns”,age:10&#125;)</span><br></pre></td></tr></table></figure><ul><li>或运算</li></ul><p><code>$or</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;$or:[&#123;name:”suns1”&#125;,&#123;age:32&#125;]&#125;)</span><br></pre></td></tr></table></figure><ul><li>或非运算</li></ul><p><code>$nor</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;$nor:[&#123;name:”suns1”&#125;,&#123;age:32&#125;]&#125;)</span><br></pre></td></tr></table></figure><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><ul><li><code>$in</code> </li></ul><p>类似于关系型数据库中的in操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;age:&#123;$in:[23,24,25]&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>$all</code> </li></ul><p>主要用来查询数组中的包含关系，查询条件中只要有一个不包含就不返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[1,2,3]&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[2,3,4]&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[2,5,7]&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[3,9,10]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;post:&#123;$all:[2,3]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>一行二行出现23</p><h4 id="统计、排序、分页"><a href="#统计、排序、分页" class="headerlink" title="统计、排序、分页"></a>统计、排序、分页</h4><ul><li>统计</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.users.count();//统计数据</span><br><span class="line">db.users.find().count();</span><br><span class="line">db.users.find(&#123;age:&#123;$lt:5&#125;&#125;).count();//条件统计</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().sort(&#123;age:1&#125;); //升序</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;); //降序</span><br></pre></td></tr></table></figure><ul><li>分页</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().skip(2).limit(3); #从第三条开始，三个为一页</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;).skip(2).limit(3); #在上一个基础上以年龄为降序排列</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在上述基础进行统计</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;).skip(2).limit(3).count(0); </span><br><span class="line"><span class="meta">#</span>忽略分页效果</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;).skip(2).limit(3).count(1);</span><br><span class="line"><span class="meta">#</span>记录分页效果</span><br></pre></td></tr></table></figure><h4 id="特殊查询"><a href="#特殊查询" class="headerlink" title="特殊查询"></a>特殊查询</h4><ul><li>投影查询</li></ul><p>排除某个列，类似于<code>select 列名</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></p><p><code>$exists</code> 判断一个key是否存在 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;name:&#123;$exists:1&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="MongoDB的索引"><a href="#MongoDB的索引" class="headerlink" title="MongoDB的索引"></a>MongoDB的索引</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>索引就是用来加速查询的。数据库索引与书籍的索引类似：有了索引就不需要翻遍整本书，数据库则可以直接在索引中查找，使得查找速度能提高几个数量级。在索引中找到条目以后，就可以直接跳转到目标文档的位置。</p><p>类似字典中拼音部首。</p><h3 id="普通索引相关命令"><a href="#普通索引相关命令" class="headerlink" title="普通索引相关命令"></a>普通索引相关命令</h3><ul><li>为某个键创建索引</li></ul><p>默认为id创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.ensureIndex(&#123;键值:1&#125;)</span><br></pre></td></tr></table></figure><ul><li>查看关于索引的相关信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.stats()</span><br></pre></td></tr></table></figure><ul><li>查看查询使用索引的情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find(&#123;键值:value&#125;).explain()</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.ropIndex(&#123;键值:1&#125;)</span><br></pre></td></tr></table></figure><p>删除集合，也会将集合中的索引全部删除</p><h3 id="唯一索引相关命令"><a href="#唯一索引相关命令" class="headerlink" title="唯一索引相关命令"></a>唯一索引相关命令</h3><ul><li>创建唯一索引 </li></ul><p>保证每个键的唯一性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 查看关于索引的相关信息</span><br><span class="line"></span><br><span class="line">```db.集合名称.stats()</span><br></pre></td></tr></table></figure><ul><li>查看查询使用索引的情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 删除索引</span><br><span class="line"></span><br><span class="line">```db.集合名称.dropIndex(&#123;键值:1&#125;)</span><br></pre></td></tr></table></figure><p>删除集合，也会将集合中的索引全部删除</p><h2 id="MongoDB的复制"><a href="#MongoDB的复制" class="headerlink" title="MongoDB的复制"></a>MongoDB的复制</h2><h3 id="MongoDB的Master-Slave主从复制（已抛弃）"><a href="#MongoDB的Master-Slave主从复制（已抛弃）" class="headerlink" title="MongoDB的Master-Slave主从复制（已抛弃）"></a>MongoDB的Master-Slave主从复制（已抛弃）</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的Master-Slave主从复制1.png" alt="MongoDB的Master-Slave主从复制1"></p><h4 id="为什么需要复制"><a href="#为什么需要复制" class="headerlink" title="为什么需要复制"></a>为什么需要复制</h4><ol><li>单节点故障（主备）</li><li>读写分离（主从）</li></ol><h4 id="MongoDB的复制架构"><a href="#MongoDB的复制架构" class="headerlink" title="MongoDB的复制架构"></a>MongoDB的复制架构</h4><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的Master-Slave主从复制2.png" alt="MongoDB的Master-Slave主从复制2"></p><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li>准备3个数据文件目录</li></ol><p>mongodata1(主）mongodata2(从）mongodata3(从）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─mongodb</span><br><span class="line">│  └─bin</span><br><span class="line">├─mongodbdata</span><br><span class="line">│  ├─diagnostic.data</span><br><span class="line">│  └─journal</span><br><span class="line">├─mongodbdata1 #</span><br><span class="line">├─mongodbdata2 #</span><br><span class="line">├─mongodbdata3 #</span><br><span class="line">├─mongodetc</span><br><span class="line">└─mongodlog</span><br></pre></td></tr></table></figure><ol><li>​</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath="G:/mongodb/mongodbdata" --master --port 11111</span><br><span class="line"></span><br><span class="line">mongod --dbpath="G:/mongodb/mongodbdata2" --slave --port 22222 --source 127.0.0.1:11111</span><br><span class="line"></span><br><span class="line">mongod --dbpath="G:/mongodb/mongodbdata3"  --slave –-port 33333 --source 127.0.0.1:11111</span><br></pre></td></tr></table></figure><h3 id="MongoDB的Replication-Set副本集（已抛弃）"><a href="#MongoDB的Replication-Set副本集（已抛弃）" class="headerlink" title="MongoDB的Replication Set副本集（已抛弃）"></a>MongoDB的Replication Set副本集（已抛弃）</h3><h4 id="MongoDB主从复制的问题"><a href="#MongoDB主从复制的问题" class="headerlink" title="MongoDB主从复制的问题"></a>MongoDB主从复制的问题</h4><p>主节点宕机，从节点不能对外提供服务，只能作为数据的备份</p><h4 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li>准备3个数据文件目录 </li></ol><p>mongodata1(主）mongodata2(从）mongodata3(从）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─mongodb</span><br><span class="line">│  └─bin</span><br><span class="line">├─mongodbdata</span><br><span class="line">│  ├─diagnostic.data</span><br><span class="line">│  └─journal</span><br><span class="line">├─mongodbdata1 #</span><br><span class="line">├─mongodbdata2 #</span><br><span class="line">├─mongodbdata3 #</span><br><span class="line">├─mongodetc</span><br><span class="line">└─mongodlog</span><br></pre></td></tr></table></figure><ol><li>​</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -port 11111 --dbpath="d:\mongodata1" --replSet baizhi</span><br><span class="line">mongod -port 22222 --dbpath="d:\mongodata2" --replSet baizhi</span><br><span class="line">mongod -port 33333 --dbpath="d:\mongodata3" --replSet baizhi</span><br></pre></td></tr></table></figure><ol><li>​</li></ol><p>第一个服务器启动后作主节点执行下列代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config_baizhi=&#123;"_id":"baizhi","members":[&#123;_id:0,host:"localhost:11111"&#125;,&#123;_id:1,host:"localhost:22222"&#125;, &#123;_id:2,host:"localhost:33333"&#125;]&#125;;</span><br><span class="line">rs.initiate(config_baizhi);</span><br></pre></td></tr></table></figure><blockquote><p>从节点需要执行 <code>rs.slaveOK()</code> 实现可读<br>查看节点状态 <code>rs.status()</code></p></blockquote><h2 id="MongoDB的分片"><a href="#MongoDB的分片" class="headerlink" title="MongoDB的分片"></a>MongoDB的分片</h2><h3 id="为什么需要分片"><a href="#为什么需要分片" class="headerlink" title="为什么需要分片"></a>为什么需要分片</h3><p>一千万个文档中查找一条数据</p><p>将一千万个数据分成十个节点（服务器）每个100万条</p><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的分片-为什么需要分片.png" alt="MongoDB的分片-为什么需要分片"></p><ul><li>好处</li></ul><p>提高查询效率，提高并发量</p><h3 id="片键（分片的依据）"><a href="#片键（分片的依据）" class="headerlink" title="片键（分片的依据）"></a>片键（分片的依据）</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的分片-片键.png" alt="MongoDB的分片-片键"></p><h3 id="分片架构"><a href="#分片架构" class="headerlink" title="分片架构"></a>分片架构</h3><p>先从ConfigDB读取片键后去查询</p><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的分片-分片架构.png" alt="MongoDB的分片-分片架构"></p><h3 id="开发步骤-2"><a href="#开发步骤-2" class="headerlink" title="开发步骤"></a>开发步骤</h3><ul><li>准备三个数据库，configdb（配置库）、shard1（数据库1）、shard2（数据库2）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath="d:/configdb" --port 11111</span><br><span class="line">mongod --dbpath="d:/shard1" –port 22222</span><br><span class="line">mongod --dbpath="d:/shard2" –port 33333</span><br></pre></td></tr></table></figure><ul><li>启动mongos服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongos --port 44444 --configdb localhost:11111</span><br></pre></td></tr></table></figure><ul><li>登录到mongos</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo localhost:44444/admin</span><br></pre></td></tr></table></figure><ul><li>指定存储数据的节点</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;addshard:"localhost:22222",allowLocal:true&#125;)db.runCommand(&#123;addshard:"localhost:33333",allowLocal:true&#125;)</span><br></pre></td></tr></table></figure><ul><li>指定分片的数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;"enablesharding":"baizhi"&#125;)</span><br></pre></td></tr></table></figure><ul><li>指定分片的集合与片键</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;"shardcollection":"baizhi.users","key":&#123;"name":1&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li>数据插入测试</li></ul><blockquote><p>mongodb支持javascript语法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i=0;i&lt;100000;i++) &#123;</span><br><span class="line">    db.users.insert(&#123;name:&quot;hibiscidai&quot;+i&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入不同数据库节点进行统计数据查询，片键决定分区存储大小，根据实际需求。</p><h2 id="MongoDB的JavaDriver"><a href="#MongoDB的JavaDriver" class="headerlink" title="MongoDB的JavaDriver"></a>MongoDB的JavaDriver</h2><h2 id="MongoDB数据结构在java中的映射存储"><a href="#MongoDB数据结构在java中的映射存储" class="headerlink" title="MongoDB数据结构在java中的映射存储"></a>MongoDB数据结构在java中的映射存储</h2><h3 id="DBObject对象"><a href="#DBObject对象" class="headerlink" title="DBObject对象"></a>DBObject对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;name:<span class="string">"suns"</span>,pwd:<span class="string">"123"</span>&#125;</span><br><span class="line">↓</span><br><span class="line">Map.put(<span class="string">"name"</span>,<span class="string">"suns"</span>)</span><br><span class="line">↓</span><br><span class="line">DBObject</span><br><span class="line">↓</span><br><span class="line">BasicDBObject.put(<span class="string">"name"</span>,<span class="string">"suns"</span>)</span><br></pre></td></tr></table></figure><h3 id="BasicDBList对象-集合"><a href="#BasicDBList对象-集合" class="headerlink" title="BasicDBList对象(集合)"></a>BasicDBList对象(集合)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"suns"</span>,<span class="string">"date1"</span>,<span class="string">"date2"</span>]</span><br><span class="line">↓</span><br><span class="line">ArrayList</span><br><span class="line">↓</span><br><span class="line">BasicDBlist.add(<span class="string">"suns);</span></span><br></pre></td></tr></table></figure><h2 id="开发步骤-3"><a href="#开发步骤-3" class="headerlink" title="开发步骤"></a>开发步骤</h2><ul><li>导入jar包</li><li>创建连接对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MongoClient mongo = <span class="keyword">new</span> MongoClient(ip,port);</span><br></pre></td></tr></table></figure><ul><li>获取数据对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB db = mongo.getDB(“dbname”);</span><br></pre></td></tr></table></figure><ul><li>获得Collection对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBCollection dbCollection = db.getCollection(“collectionName”);</span><br></pre></td></tr></table></figure><ul><li>调用DBCollection对象的相关方法，完成CURD</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbCollection.insert()→db.users.insert()</span><br><span class="line">dbCollection.find()→db.users.find()</span><br><span class="line">dbCollection.findOne()→db.users.findOne()</span><br><span class="line">dbCollection.update()→db.users.update()</span><br><span class="line">dbCollection.remove()→db.users.remove()</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="插入一条文档（单条数据）"><a href="#插入一条文档（单条数据）" class="headerlink" title="插入一条文档（单条数据）"></a>插入一条文档（单条数据）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.users.insert(&#123;name:"suns",pwd:"123""&#125;);</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testinsert1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//连接到MOingoDB数据库</span></span><br><span class="line">        mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"127.0.0.1"</span>,<span class="number">27017</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取操作的目标数据库</span></span><br><span class="line">        DB db = mogoClient.getDB(<span class="string">"hibiscidai"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取插入的集合目标</span></span><br><span class="line">        DBcollection collection = db.getCollection(<span class="string">"users"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line">        DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">        basicDBObject.put(<span class="string">"name"</span>,<span class="string">"hibiscidai"</span>);</span><br><span class="line">        basicDBObject.put(<span class="string">"age"</span>,<span class="string">"20"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行操作</span></span><br><span class="line">        collection.insert(basicDBObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">        mongoClient.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入一条带集合的文档（带集合的单条数据）"><a href="#插入一条带集合的文档（带集合的单条数据）" class="headerlink" title="插入一条带集合的文档（带集合的单条数据）"></a>插入一条带集合的文档（带集合的单条数据）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.users.insert(&#123;name:"suna",post:"1,6,8,10"&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testinsert2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//连接到MOingoDB数据库</span></span><br><span class="line">        mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"127.0.01"</span>,<span class="number">27017</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取操作的数据库</span></span><br><span class="line">        DB db = mogoClient.getDB(<span class="string">"hibiscidai"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取插入的集合目标</span></span><br><span class="line">        DBcollection collection = db.getCollection(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line">        DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">        basicDBObject.put(<span class="string">"name"</span>,<span class="string">"suns"</span>)</span><br><span class="line">        BasicDBList basicDBList = <span class="keyword">new</span> BasicDBList();</span><br><span class="line">        basicDBList.add(<span class="number">1</span>);</span><br><span class="line">        basicDBList.add(<span class="number">6</span>);</span><br><span class="line">        basicDBList.add(<span class="number">8</span>);</span><br><span class="line">        basicDBList.add(<span class="number">10</span>);</span><br><span class="line">        basicDBObject.put(<span class="string">"post"</span>,basicDBList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行操作</span></span><br><span class="line">        collection.insert(basicDBObject);</span><br><span class="line">&#125;  <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">        mongoClient.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="针对重复冗余操作代码进行封装工具类"><a href="#针对重复冗余操作代码进行封装工具类" class="headerlink" title="针对重复冗余操作代码进行封装工具类"></a>针对重复冗余操作代码进行封装工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">// 一次连接设置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> MongoClient mongonClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBCollection <span class="title">getCollection</span><span class="params">(String ip, Integer port, String dbName, String collectionName)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">DBCollection dBCollection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mongonClient = <span class="keyword">new</span> MongoClient(ip, port.intValue());</span><br><span class="line"><span class="comment">// 获取数据库</span></span><br><span class="line">DB getDb = mongonClient.getDB(dbName);</span><br><span class="line"><span class="comment">// 获取插入的目标集合</span></span><br><span class="line">dBCollection = getDb.getCollection(collectionName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dBCollection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mongonClient.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一次插入多个文档（多行数据插入）"><a href="#一次插入多个文档（多行数据插入）" class="headerlink" title="一次插入多个文档（多行数据插入）"></a>一次插入多个文档（多行数据插入）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testinsert3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"hibiscidai"</span>, <span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建数据</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"hibiscidai1"</span>);</span><br><span class="line">DBObject basicDBObject1 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject1.put(<span class="string">"name"</span>, <span class="string">"hibiscidai2"</span>);</span><br><span class="line">DBObject basicDBObject2 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject2.put(<span class="string">"name"</span>, <span class="string">"hibiscidai3"</span>);</span><br><span class="line"><span class="comment">// 创建list集合接收DBObject</span></span><br><span class="line">List&lt;DBObject&gt; l = <span class="keyword">new</span> ArrayList&lt;DBObject&gt;();</span><br><span class="line">l.add(basicDBObject);</span><br><span class="line">l.add(basicDBObject1);</span><br><span class="line">l.add(basicDBObject2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.insert(l);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有条件删除"><a href="#有条件删除" class="headerlink" title="有条件删除"></a>有条件删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.remove(&#123;name:"zkf1"&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testdelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取对应集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject对象</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();<span class="comment">// &#123;&#125;</span></span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"zkf1"</span>);</span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.remove(basicDBObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除所有"><a href="#删除所有" class="headerlink" title="删除所有"></a>删除所有</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.remove(&#123;&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testdelte2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject对象</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();<span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.remove(basicDBObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.update(&#123;name:"zkf1"&#125;,&#123;$set:&#123;age:78&#125;&#125;,0,1)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testupdate1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"zkf1"</span>);<span class="comment">// &#123;name:"zkf1"&#125;</span></span><br><span class="line">DBObject basicDBObject2 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject2.put(<span class="string">"age"</span>, <span class="number">78</span>);<span class="comment">// &#123;age:78&#125;</span></span><br><span class="line">DBObject basicDBObject3 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject3.put(<span class="string">"$set"</span>, basicDBObject2);<span class="comment">// &#123;$set:&#123;age:78&#125;&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.update(basicDBObject, basicDBObject3, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">DBCursor dbCursor = collection.find();</span><br><span class="line"><span class="comment">// 每一个DBOBject对象对应一个文档</span></span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有条件的查询1"><a href="#有条件的查询1" class="headerlink" title="有条件的查询1"></a>有条件的查询1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find(&#123;name:"zkf3"&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfind1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject对象</span></span><br><span class="line">BasicDBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"zkf3"</span>);<span class="comment">// &#123;name:"zkf3"&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">DBCursor dbCursor = collection.find(basicDBObject);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有条件查询2"><a href="#有条件查询2" class="headerlink" title="有条件查询2"></a>有条件查询2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find(&#123;age:&#123;"$gte":38&#125;&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfind2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"$gte"</span>, <span class="number">38</span>);<span class="comment">// &#123;"$gte":38&#125;</span></span><br><span class="line">DBObject basicDBObject2 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject2.put(<span class="string">"age"</span>, basicDBObject);<span class="comment">// &#123;age:&#123;"$gte":38&#125;&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">DBCursor dbCursor = collection.find(basicDBObject2);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find().skip(0).limit(3)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfen</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">DBCursor dbCursor = collection.find().skip(<span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find().sort(&#123;age:-1&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"age"</span>, <span class="number">1</span>);<span class="comment">// &#123;age:-1&#125;</span></span><br><span class="line"><span class="comment">// 执行操作命令</span></span><br><span class="line">DBCursor dbCursor = collection.find().sort(basicDBObject);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.count()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testcount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 执行操作命令</span></span><br><span class="line"><span class="keyword">long</span> l = collection.count();</span><br><span class="line">System.out.println(l);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 架构框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mongodb </tag>
            
            <tag> 集群 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-10-装饰器模式</title>
      <link href="/2018/04/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-10-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-10-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/18/设计模式-10-装饰器模式/设计模式10.png" alt="设计模式10"></p><p>设计模式-10-装饰器模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-10-装饰器模式"><a href="#设计模式-10-装饰器模式" class="headerlink" title="设计模式-10-装饰器模式"></a>设计模式-10-装饰器模式</h1><h1 id="装饰器模式-Decorator-Pattern"><a href="#装饰器模式-Decorator-Pattern" class="headerlink" title="装饰器模式(Decorator Pattern)"></a>装饰器模式(Decorator Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>动态地给一个对象添加一些额外的职责。<br>就增加功能来说装饰器模式相比生成子类更为灵活。</p><blockquote><p>The Intent of this pattern is to add itional responsibilities dynamically to an object.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>在不想增加很多子类的情况下扩展类。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><ul><li>Component 类充当抽象角色，不应该具体实现。 </li><li>修饰类引用和继承 Component 类，具体扩展类重写父类方法。</li></ul><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将具体功能职责划分，同时继承装饰者模式。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>多层装饰比较复杂。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>扩展一个类的功能。</li><li>动态增加功能，动态撤销。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>可代替继承。</p><blockquote><p>动态撤销，扩展一个类的功能。</p></blockquote><blockquote><p>可以将装饰器视为一个退化的，仅有一个组件的组合。</p></blockquote><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>对于蛋糕，创建蛋糕与口味后进行装饰。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/18/设计模式-10-装饰器模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern10.decorator.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheeseCake</span> <span class="keyword">extends</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Here is CheeseCake"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitCake</span> <span class="keyword">extends</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Here is FruitCake"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorater</span> <span class="keyword">extends</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line">Cake c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorater</span><span class="params">(Cake c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">c.show();</span><br><span class="line">funExtend();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithFlower</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WithFlower</span><span class="params">(Cake c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"WithFlower"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithFlat</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WithFlat</span><span class="params">(Cake c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"WithFlat"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Cake c = <span class="keyword">new</span> CheeseCake();</span><br><span class="line">Decorater d = <span class="keyword">new</span> WithFlat(c);</span><br><span class="line">d.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Here is CheeseCake</span><br><span class="line">WithFlat</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>画刷画笔</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/18/设计模式-10-装饰器模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern10.decorator.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Painting</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VanGogh</span> <span class="keyword">extends</span> <span class="title">Painting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Here is VanGogh"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorater</span> <span class="keyword">extends</span> <span class="title">Painting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Painting p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorater</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.p = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p.show();</span><br><span class="line">funExtend();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Border</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Border</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"With Border"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Masking</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Masking</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"With Masking"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMask</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WaterMask</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"With WaterMask"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Painting p = <span class="keyword">new</span> VanGogh();</span><br><span class="line">Decorater d = <span class="keyword">new</span> Border(p);</span><br><span class="line">d.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Here is VanGogh</span><br><span class="line">With Border</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-09-组合模式</title>
      <link href="/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-09-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-09-%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/16/设计模式-09-组合模式/设计模式09.png" alt="设计模式09"></p><p>设计模式-09-组合模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-09-组合模式"><a href="#设计模式-09-组合模式" class="headerlink" title="设计模式-09-组合模式"></a>设计模式-09-组合模式</h1><h1 id="组合模式-Composite-Pattern"><a href="#组合模式-Composite-Pattern" class="headerlink" title="组合模式(Composite Pattern)"></a>组合模式(Composite Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>将对象组合成树形结构以表示“部分-整体”的层次结构。<br>组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><blockquote><p>The Intent of this pattern is to compose objects into tree structures to represent partwhole hierachies.Composite lets clients treat individual objects and compositions of objects uniformly.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>表示对象的部分-整体层次结构（树形结构）。</li><li>用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>树枝和叶子实现统一接口，树枝内部组合该接口。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数。</li><li>在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>高层模块调用简单。</li><li>节点自由增加。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>部分、整体场景，如树形菜单，文件、文件夹的管理。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>定义时为具体类。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>文件和文件夹。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/16/设计模式-09-组合模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern09.composite.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> String fname;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractFile</span><span class="params">(String fname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.fname = fname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile abstractFile)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile abstractFile)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"文件其他操作..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">File</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">File</span><span class="params">(String fname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(fname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile abstractFile)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"File"</span> + <span class="string">"添加"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile abstractFile)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"File"</span> + <span class="string">"移除"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"File"</span> + fname);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Folders</span> <span class="keyword">extends</span> <span class="title">AbstractFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ArrayList&lt;AbstractFile&gt; afs = <span class="keyword">new</span> ArrayList&lt;AbstractFile&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Folders</span><span class="params">(String fname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(fname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(AbstractFile abstractFile)</span> </span>&#123;</span><br><span class="line">afs.add(abstractFile);</span><br><span class="line">System.out.println(<span class="string">"Folders"</span> + <span class="string">"添加"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(AbstractFile abstractFile)</span> </span>&#123;</span><br><span class="line">afs.remove(abstractFile);</span><br><span class="line">System.out.println(<span class="string">"Folders"</span> + <span class="string">"添加"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Folders"</span> + fname);</span><br><span class="line"><span class="keyword">for</span> (AbstractFile af : afs) &#123;</span><br><span class="line">af.printName();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>对于功能不太复杂的，可以简化类图，即合并为一个类。</p><p>我们有一个类 Employee，该类被当作组合模型类。CompositePatternDemo，我们的演示类使用 Employee 类来添加部门层次结构，并打印所有员工。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/16/设计模式-09-组合模式/案例2.jpg" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern09.composite.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String dept;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> salary;</span><br><span class="line"><span class="keyword">private</span> List&lt;Employee&gt; subordinates;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Employee</span><span class="params">(String name, String dept, <span class="keyword">int</span> sal)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.dept = dept;</span><br><span class="line"><span class="keyword">this</span>.salary = sal;</span><br><span class="line">subordinates = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">subordinates.add(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Employee e)</span> </span>&#123;</span><br><span class="line">subordinates.remove(e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getSubordinates</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> subordinates;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="string">"Employee :[ Name : "</span> + name + <span class="string">", dept : "</span> + dept + <span class="string">", salary :"</span> + salary + <span class="string">" ]"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Employee CEO = <span class="keyword">new</span> Employee(<span class="string">"John"</span>, <span class="string">"CEO"</span>, <span class="number">30000</span>);</span><br><span class="line"></span><br><span class="line">Employee headSales = <span class="keyword">new</span> Employee(<span class="string">"Robert"</span>, <span class="string">"Head Sales"</span>, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">Employee headMarketing = <span class="keyword">new</span> Employee(<span class="string">"Michel"</span>, <span class="string">"Head Marketing"</span>, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line">Employee clerk1 = <span class="keyword">new</span> Employee(<span class="string">"Laura"</span>, <span class="string">"Marketing"</span>, <span class="number">10000</span>);</span><br><span class="line">Employee clerk2 = <span class="keyword">new</span> Employee(<span class="string">"Bob"</span>, <span class="string">"Marketing"</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">Employee salesExecutive1 = <span class="keyword">new</span> Employee(<span class="string">"Richard"</span>, <span class="string">"Sales"</span>, <span class="number">10000</span>);</span><br><span class="line">Employee salesExecutive2 = <span class="keyword">new</span> Employee(<span class="string">"Rob"</span>, <span class="string">"Sales"</span>, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">CEO.add(headSales);</span><br><span class="line">CEO.add(headMarketing);</span><br><span class="line"></span><br><span class="line">headSales.add(salesExecutive1);</span><br><span class="line">headSales.add(salesExecutive2);</span><br><span class="line"></span><br><span class="line">headMarketing.add(clerk1);</span><br><span class="line">headMarketing.add(clerk2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印该组织的所有员工</span></span><br><span class="line">System.out.println(CEO);</span><br><span class="line"><span class="keyword">for</span> (Employee headEmployee : CEO.getSubordinates()) &#123;</span><br><span class="line">System.out.println(headEmployee);</span><br><span class="line"><span class="keyword">for</span> (Employee employee : headEmployee.getSubordinates()) &#123;</span><br><span class="line">System.out.println(employee);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Employee :[ Name : John, dept : CEO, salary :30000 ]</span><br><span class="line">Employee :[ Name : Robert, dept : Head Sales, salary :20000 ]</span><br><span class="line">Employee :[ Name : Richard, dept : Sales, salary :10000 ]</span><br><span class="line">Employee :[ Name : Rob, dept : Sales, salary :10000 ]</span><br><span class="line">Employee :[ Name : Michel, dept : Head Marketing, salary :20000 ]</span><br><span class="line">Employee :[ Name : Laura, dept : Marketing, salary :10000 ]</span><br><span class="line">Employee :[ Name : Bob, dept : Marketing, salary :10000 ]</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-08-桥接模式</title>
      <link href="/2018/04/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-08-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-08-%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/09/设计模式-08-桥接模式/设计模式08.png" alt="设计模式08"></p><p>设计模式-08-桥接模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-08-桥接模式"><a href="#设计模式-08-桥接模式" class="headerlink" title="设计模式-08-桥接模式"></a>设计模式-08-桥接模式</h1><h1 id="桥接模式-Bridge-Pattern"><a href="#桥接模式-Bridge-Pattern" class="headerlink" title="桥接模式(Bridge Pattern)"></a>桥接模式(Bridge Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>把抽象化与实现化解耦，提供两者之间的桥接结构，使二者可以独立变化。</p><blockquote><p>The bridge pattern is a design parrern used in software engineering which is meant to “decouple on abstraction from its implement so that the two can vary independently”</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>继承类爆炸。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>实现系统可能有多个角度分类，每一种角度都可能变化。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>抽象类依赖实现类。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可能被结构化改变而不影响结果。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>抽象和实现的分离。</li><li>优秀的扩展能力。</li><li>实现细节对客户透明。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 </li><li>对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 </li><li>一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>两个独立变化的维度最适合桥接模式。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>铅笔和画。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/09/设计模式-08-桥接模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern08.bridge.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blue</span> <span class="keyword">extends</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"蓝色"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">extends</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"红色"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">PaintBrush</span> </span>&#123;</span><br><span class="line">Color c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PaintBrush</span><span class="params">(Color c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThickBrush</span> <span class="keyword">extends</span> <span class="title">PaintBrush</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThickBrush</span><span class="params">(Color c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">c.getColor();</span><br><span class="line">System.out.println(<span class="string">"浓刷"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThinBrush</span> <span class="keyword">extends</span> <span class="title">PaintBrush</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThinBrush</span><span class="params">(Color c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">c.getColor();</span><br><span class="line">System.out.println(<span class="string">"细刷"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">PaintBrush pb = <span class="keyword">new</span> ThickBrush(<span class="keyword">new</span> Blue());</span><br><span class="line">pb.draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">蓝色</span><br><span class="line">浓刷</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p>原类图：</p><p><img src="/2018/04/09/设计模式-08-桥接模式/案例2-1.png" alt="案例2-1"></p><p>修改后：</p><p><img src="/2018/04/09/设计模式-08-桥接模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern08.bridge.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getImage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GIFImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"GIFImages"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"JPGImage"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PNGImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"PNGImage"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMPImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BMPImage"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OperationSystemImage</span> </span>&#123;</span><br><span class="line">Image i;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OperationSystemImage</span><span class="params">(Image i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.i = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxOSImage</span> <span class="keyword">extends</span> <span class="title">OperationSystemImage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinuxOSImage</span><span class="params">(Image i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"LinuxOSImage"</span>);</span><br><span class="line">i.getImage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WinOSImage</span> <span class="keyword">extends</span> <span class="title">OperationSystemImage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WinOSImage</span><span class="params">(Image i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"WinOSImage"</span>);</span><br><span class="line">i.getImage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniOSImgae</span> <span class="keyword">extends</span> <span class="title">OperationSystemImage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UniOSImgae</span><span class="params">(Image i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"UniOSImgae"</span>);</span><br><span class="line">i.getImage();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">OperationSystemImage i1 = <span class="keyword">new</span> LinuxOSImage(<span class="keyword">new</span> GIFImage());</span><br><span class="line">i1.show();</span><br><span class="line">OperationSystemImage i2 = <span class="keyword">new</span> WinOSImage(<span class="keyword">new</span> PNGImage());</span><br><span class="line">i2.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LinuxOSImage</span><br><span class="line">GIFImages</span><br><span class="line">WinOSImage</span><br><span class="line">PNGImage</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-07-适配器模式</title>
      <link href="/2018/04/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-07-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/04/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-07-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/04/设计模式-07-适配器模式/设计模式07.png" alt="设计模式07"></p><p>设计模式-07-适配器模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-07-适配器模式"><a href="#设计模式-07-适配器模式" class="headerlink" title="设计模式-07-适配器模式"></a>设计模式-07-适配器模式</h1><h1 id="适配器模式-Adapter-Pattern"><a href="#适配器模式-Adapter-Pattern" class="headerlink" title="适配器模式(Adapter Pattern)"></a>适配器模式(Adapter Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>将一个类的接口转换成客户希望的另外一个接口。<br>适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>系统需要使用现有的类，而此类的接口不符合系统的需要。</li><li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。</li><li>通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>适配器继承或依赖已有的对象，实现想要的目标接口。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>继承或依赖。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V。</li><li>JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的 JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式。</li><li>在 LINUX 上运行 WINDOWS 程序。 </li><li>JAVA 中的 jdbc。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>可以让任何两个没有关联的类一起运行。</li><li>提高了类的复用。</li><li>增加了类的透明度。</li><li>灵活性好。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。</li><li>由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。</p><h3 id="适用性"><a href="#适用性" class="headerlink" title="适用性"></a>适用性</h3><ul><li>一个已经存在的类，单接口不符合要求。</li><li>创建一个可复用的类，可与其他不相关的类或不可预见的类协同工作。</li><li>使用一些已经存在的子类，但不可能对每一个都进行子类画以匹配他们，接口对象适配器可以适配它的父类接口。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>原来的MyPicture类中通过GetRGB()获得图像的RGB值，代码更新。<br>在NewPicture类中使用getR()、getG()、getB()方法获得图像的RGB值。</p><h2 id="案例1-实现1"><a href="#案例1-实现1" class="headerlink" title="案例1-实现1"></a>案例1-实现1</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/04/设计模式-07-适配器模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern07.adapter.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPicture</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRGB</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPicture</span> <span class="keyword">implements</span> <span class="title">IPicture</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRGB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MyPicture-"</span> + <span class="string">"getRGB"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PictureAdapter</span> <span class="keyword">implements</span> <span class="title">IPicture</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRGB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">NewPicture np = <span class="keyword">new</span> NewPicture();</span><br><span class="line">np.getR();</span><br><span class="line">np.getG();</span><br><span class="line">np.getB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewPicture</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getR</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"NewPicture-"</span> + <span class="string">"R"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getG</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"NewPicture-"</span> + <span class="string">"G"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"NewPicture-"</span> + <span class="string">"B"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IPicture p = <span class="keyword">new</span> PictureAdapter();</span><br><span class="line">p.getRGB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NewPicture-R</span><br><span class="line">NewPicture-G</span><br><span class="line">NewPicture-B</span><br></pre></td></tr></table></figure><h2 id="案例1-实现2"><a href="#案例1-实现2" class="headerlink" title="案例1-实现2"></a>案例1-实现2</h2><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/04/设计模式-07-适配器模式/案例1-2.png" alt="案例1-2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern07.adapter.demo2</code></p><p>仅更改Adapter类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PictureAdapter</span> <span class="keyword">extends</span> <span class="title">NewPicture</span> <span class="keyword">implements</span> <span class="title">IPicture</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getRGB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">NewPicture np = <span class="keyword">new</span> NewPicture();</span><br><span class="line">np.getR();</span><br><span class="line">np.getG();</span><br><span class="line">np.getB();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>text-picture</title>
      <link href="/2018/04/02/text-picture/"/>
      <url>/2018/04/02/text-picture/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/02/text-picture/博客图片问题封面.jpg" alt="博客图片问题封面"></p><p>博客框架图片管理难题，使用插件 <code>CodeFalling/hexo-asset-image</code></p><a id="more"></a><h2 id="博客图片管理问题"><a href="#博客图片管理问题" class="headerlink" title="博客图片管理问题"></a>博客图片管理问题</h2><p>博客图片路径问题一直是个问题，针对于个人博客平台，图片管理尤为重要。<br>大型博客平台有自己的服务器提供图片上传服务，另一种解决方案为上传图床服务器，知名的有<em>七牛</em>。</p><p>针对于hexo官方api文档中，关于图片的声明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width][height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure><p>其中图片路径问题依旧繁琐。</p><h2 id="解决方案-hexo-image插件"><a href="#解决方案-hexo-image插件" class="headerlink" title="解决方案-hexo-image插件"></a>解决方案-hexo-image插件</h2><p>插件传送门: <a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">CodeFalling/hexo-asset-image</a></p><ul><li>项目创建者API</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MacGesture2-Publish</span><br><span class="line">├── apppicker.jpg</span><br><span class="line">├── logo.jpg</span><br><span class="line">└── rules.jpg</span><br><span class="line">MacGesture2-Publish.md</span><br></pre></td></tr></table></figure><ul><li>Just use <code>![logo](logo.jpg)</code> to insert <code>logo.jpg</code>.</li></ul><p>即每篇文章生成同名的文件夹，图片放入其中，md中直接使用上述格式进行调用，插件在生成的html中自动进行图片路径转换。</p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ul><li><p>修改配置文件<code>_config.yml</code>中<code>post_asset_folder</code>属性为<code>true</code><br>使用hexo创建一篇博客时会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹</p></li><li><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li><li><p>运行<code>hexo n &quot;xxxx&quot;</code>创建博文，会发现在<code>source\_posts</code>路径下生成了<code>xxxx</code>文件夹</p></li><li><p>md中书写引入图片即可</p></li></ul><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><code>.\source\_posts</code>文件路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text-picture</span><br><span class="line">├── text-picture.jpg</span><br><span class="line">text-picture.md</span><br></pre></td></tr></table></figure></p><p>声明图片代码片</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![text-picture](text-picture/text-picture.jpg)</span><br></pre></td></tr></table></figure><p>显示如下<br><img src="/2018/04/02/text-picture/text-picture.jpg" alt="text-picture"></p><h2 id="针对于本框架博客置顶图片"><a href="#针对于本框架博客置顶图片" class="headerlink" title="针对于本框架博客置顶图片"></a>针对于本框架博客置顶图片</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top_img: ./text-picture1.jpg</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> hexo </tag>
            
            <tag> 博客搭建过程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-06-原型模式</title>
      <link href="/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-06-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/04/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-06-%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/02/设计模式-06-原型模式/设计模式06.png" alt="设计模式06"></p><p>设计模式-06-原型模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-06-原型模式"><a href="#设计模式-06-原型模式" class="headerlink" title="设计模式-06-原型模式"></a>设计模式-06-原型模式</h1><h1 id="原型模式-Prototype-Pattern"><a href="#原型模式-Prototype-Pattern" class="headerlink" title="原型模式(Prototype Pattern)"></a>原型模式(Prototype Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在运行期建立和删除原型。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>当一个系统应该独立于它的产品创建，构成和表示时。</li><li>当要实例化的类是在运行时刻指定时，例如，通过动态装载。</li><li>为了避免创建一个与产品类层次平行的工厂类层次时。</li><li>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>实现克隆操作，在 JAVA 继承 Cloneable，重写 clone()。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>利用已有的一个原型对象，快速地生成和原型对象一样的实例。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>细胞分裂。</li><li>JAVA 中的 Object clone() 方法。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>性能提高。</li><li>逃避构造函数的约束。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。 </li><li>必须实现 Cloneable 接口。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。<br><code>浅拷贝</code> 实现 Cloneable，重写;<br><code>深拷贝</code> 是通过实现 Serializable 读取二进制流。</p><h3 id="在运行期间建立和删除原型"><a href="#在运行期间建立和删除原型" class="headerlink" title="在运行期间建立和删除原型"></a>在运行期间建立和删除原型</h3><ul><li>当一个系统应独立于他的产品创建、构成和表示时。</li><li>实例化的类是在运行时刻指定的。</li><li>避免创建一个与产品类层次平行的工厂类层次时。</li><li>当一个类的实例只能有几个不同状态组合中的一种时。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>考试卷纸。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/02/设计模式-06-原型模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattrtn05.bulider.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExamPaper</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExamPaper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExamPaper</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showExam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"ExamPaper-"</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ExamPaper <span class="title">myClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ExamPaper ep = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ep = (ExamPaper) <span class="keyword">this</span>.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ep;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">ExamPaper ep = <span class="keyword">new</span> ExamPaper();</span><br><span class="line">ep.name = <span class="string">"小明"</span>;</span><br><span class="line">ep.showExam();</span><br><span class="line"></span><br><span class="line">ExamPaper ep1 = ep.myClone();</span><br><span class="line">ep1.name = <span class="string">"小红"</span>;</span><br><span class="line">ep1.showExam();</span><br><span class="line"></span><br><span class="line">ExamPaper ep2 = ep.myClone();</span><br><span class="line">ep2.name = <span class="string">"小黑"</span>;</span><br><span class="line">ep2.showExam();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ExamPaper-小明</span><br><span class="line">ExamPaper-小红</span><br><span class="line">ExamPaper-小黑</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><ul><li>大家合作完成了一个繁琐的项目，由小明写好项目报告；每位同学都需要上交项目报告，其他同学可直接复制；把报告的姓名和学号改为自己的学号姓名。</li><li>姓名：name</li><li>学号：number</li><li>项目报告</li></ul><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p>无类图</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern06.prototype.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Report</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String number;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Report</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Report</span><span class="params">(String name, String number)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.number = number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Report-"</span> + name);</span><br><span class="line">System.out.println(<span class="string">"Report-"</span> + number);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Report <span class="title">myClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Report r = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">r = (Report) <span class="keyword">this</span>.clone();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Report e = <span class="keyword">new</span> Report(<span class="string">"hibiscidai"</span>, <span class="string">"306"</span>);</span><br><span class="line">e.show();</span><br><span class="line"></span><br><span class="line">Report e1 = e.myClone();</span><br><span class="line">e1.name = <span class="string">"小白"</span>;</span><br><span class="line">e1.number = <span class="string">"666"</span>;</span><br><span class="line">e1.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Report-hibiscidai</span><br><span class="line">Report-306</span><br><span class="line">Report-小白</span><br><span class="line">Report-666</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p>被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。即对象的浅拷贝会对“主”对象进行拷贝，但不会复制主对象里面的对象。”里面的对象“会在原来的对象和它的副本之间共享。</p><p>简而言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>深拷贝是一个整个独立的对象拷贝，深拷贝会拷贝所有的属性,并拷贝属性指向的动态分配的内存。当对象和它所引用的对象一起拷贝时即发生深拷贝。深拷贝相比于浅拷贝速度较慢并且花销较大。</p><p>简而言之，深拷贝把要复制的对象所引用的对象都复制了一遍。</p><p>深拷贝与浅拷贝的区别 ：<a href="https://blog.csdn.net/baiye_xing/article/details/71788741" target="_blank" rel="noopener">【Java深入】深拷贝与浅拷贝详解</a></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jquery框架学习笔记</title>
      <link href="/2018/04/01/2018-04-01-Jquery%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/04/01/2018-04-01-Jquery%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/Jquery框架学习笔记封面.jpg" alt="Jquery框架学习笔记封面"></p><p>Jquery，javascript框架，前端基础，学习笔记</p><a id="more"></a><p>[TOC]</p><h1 id="Jquery框架"><a href="#Jquery框架" class="headerlink" title="Jquery框架"></a>Jquery框架</h1><h1 id="Jquery引言"><a href="#Jquery引言" class="headerlink" title="Jquery引言"></a>Jquery引言</h1><h2 id="Jquery是什么"><a href="#Jquery是什么" class="headerlink" title="Jquery是什么"></a>Jquery是什么</h2><p>Jquery是一个javascript的框架</p><h2 id="Jquery的优势"><a href="#Jquery的优势" class="headerlink" title="Jquery的优势"></a>Jquery的优势</h2><ul><li>简化javascript编程 </li><li>Jquery能够屏蔽浏览器的差异</li><li>Jquery简化了Ajax的开发 <code>$.ajax();</code></li><li>Jquery提供了丰富的UI组件与功能插件</li></ul><h2 id="其他JS框架"><a href="#其他JS框架" class="headerlink" title="其他JS框架"></a>其他JS框架</h2><p>EasyUI、Dojo、ext.js、react.js、angular.js</p><h1 id="第一个Jquery程序的开发"><a href="#第一个Jquery程序的开发" class="headerlink" title="第一个Jquery程序的开发"></a>第一个Jquery程序的开发</h1><h2 id="搭建Jquery的开发环境"><a href="#搭建Jquery的开发环境" class="headerlink" title="搭建Jquery的开发环境"></a>搭建Jquery的开发环境</h2><p>声明引入jquery库<br><em>不带min.js</em> 没有经过压缩，源代码不混淆的js文件，适用于学习，能够看到源代码。<br><em>带min.js</em> 经过压缩，源代码混淆的js文件，适用于生产环境，看不到源代码。<br>功能完全一致</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> scr=<span class="string">"$&#123;pageContext.request.contextPath&#125;/js/jquery-1.8.0.min.js"</span>&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//javascript方式</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var div = document.getElementById("box");</span></span><br><span class="line"><span class="comment">alert(div.innerHTML);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//jquery方式</span></span><br><span class="line">alert($(<span class="string">"#box"</span>).text());</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line">hibiscidai</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure><h2 id="Jquery语法的特点"><a href="#Jquery语法的特点" class="headerlink" title="Jquery语法的特点"></a>Jquery语法的特点</h2><ul><li>简介明了</li><li>支持链式调用</li></ul><h2 id="特殊函数"><a href="#特殊函数" class="headerlink" title="特殊函数"></a>特殊函数</h2><ul><li><code>text()</code> 获得内幕标签的文本信息</li><li><code>css()</code> 修改具体的标签样式</li></ul><h1 id="DOM对象与Jquery对象"><a href="#DOM对象与Jquery对象" class="headerlink" title="DOM对象与Jquery对象"></a>DOM对象与Jquery对象</h1><p>针对于js获取对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementByID(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure><p>针对于jquery获取对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = $(<span class="string">"#div"</span>);</span><br></pre></td></tr></table></figure><ul><li>基于上述的两种方式，都可以获取div标签对象</li><li>上面通过js方式获得的div标签对象，称之为DOM对象</li><li>下面通过jquery方式获得的div标签对象，称之为jquery对象</li><li>只有jquery对象才可以调用jquery方法</li><li>jquery对象中封装了DOM对象</li></ul><h1 id="Juqery对象的获取"><a href="#Juqery对象的获取" class="headerlink" title="Juqery对象的获取"></a>Juqery对象的获取</h1><h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><p><code>$(&quot;#id&quot;)</code> 获得的是一个jquery对象</p><p>例见 <em>搭建Jquery的开发环境</em> </p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>针对于<em>class=“xxx”</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">".box"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">hibaiscidai</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">dj741</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">dai</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><p>选择HTML标签对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function text() &#123;</span><br><span class="line">$(&quot;div,h1&quot;).css(&quot;display&quot;,&quot;none&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">hibaiscidai</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">dj741</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;box&quot;&gt;</span><br><span class="line">dai</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h1&gt;I &amp;hearts; YOU&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h4 id="全选择器"><a href="#全选择器" class="headerlink" title="全选择器"></a>全选择器</h4><p>把HTML页面所有的标签全部选择</p><h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>形如<code>select select</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#outer li"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"outer"</span>&gt;</span><br><span class="line">&lt;li&gt;hibisicidai1&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai2&lt;/</span>li&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;hibisicidai3&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai4&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p>此时同时选择<code>&lt;ul id=&quot;outer&quot;&gt;</code>标签内所有的对象</p><h4 id="儿子选择器"><a href="#儿子选择器" class="headerlink" title="儿子选择器"></a>儿子选择器</h4><p>形如<code>select1&gt;select2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#outer&gt;li"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"outer"</span>&gt;</span><br><span class="line">&lt;li&gt;hibisicidai1&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai2&lt;/</span>li&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;hibisicidai3&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai4&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p>此时选择了前两个<code>li</code>标签（hibisicidai1、hibisicidai2）</p><h4 id="第一个兄弟选择器"><a href="#第一个兄弟选择器" class="headerlink" title="第一个兄弟选择器"></a>第一个兄弟选择器</h4><p>形如<code>select1+select2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"t+li"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"outer"</span>&gt;</span><br><span class="line">&lt;li&gt;hibisicidai1&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai2&lt;/</span>li&gt;</span><br><span class="line">&lt;li id=<span class="string">"t"</span>&gt;hibisicidai3&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai4&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br></pre></td></tr></table></figure><p>此时选择了<code>li id=&quot;t&quot;</code>与其后一个<code>li</code>标签（hibisicidai3、hibisicidai4）</p><h4 id="后续所有兄弟"><a href="#后续所有兄弟" class="headerlink" title="后续所有兄弟"></a>后续所有兄弟</h4><p>形如<code>select~select2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"t~li"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"outer"</span>&gt;</span><br><span class="line">&lt;li&gt;hibisicidai1&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai2&lt;/</span>li&gt;</span><br><span class="line">&lt;li id=<span class="string">"t"</span>&gt;hibisicidai3&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai4&lt;/</span>li&gt;</span><br><span class="line">&lt;li&gt;hibisicidai5&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><p>此时选择了<code>li id=&quot;t&quot;</code>及其后所有<code>li</code>标签（hibisicidai3、hibisicidai4、hibisicidai5）</p><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><p>目的：对一组jquery对象进行再次筛选，表示获得状态</p><h4 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"XXXX"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"outer"</span>&gt;</span><br><span class="line">&lt;li&gt;hibisicidai1&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai2&lt;/</span>li&gt;</span><br><span class="line">&lt;li id=<span class="string">"t"</span>&gt;hibisicidai3&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;li&gt;hibisicidai4&lt;/</span>li&gt;</span><br><span class="line">&lt;li&gt;hibisicidai5&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br></pre></td></tr></table></figure><h5 id="first-第一个"><a href="#first-第一个" class="headerlink" title=":first | 第一个"></a>:first | 第一个</h5><p><em>XXXX</em> –&gt; <code>li:first</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:first"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai1</p><h5 id="last-最后一个"><a href="#last-最后一个" class="headerlink" title=":last | 最后一个"></a>:last | 最后一个</h5><p><em>XXXX</em> –&gt; <code>li:last</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:last"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai5</p><h5 id="not-select-不选择"><a href="#not-select-不选择" class="headerlink" title=":not(select) | 不选择"></a>:not(select) | 不选择</h5><p><em>XXXX</em> –&gt; <code>li:not(#t)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:not(#t)"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai1、hibisicidai2、hibisicidai4、hibisicidai5（除hibisicidai3）</p><h5 id="even-获得所有的偶数内容-下标从0开始"><a href="#even-获得所有的偶数内容-下标从0开始" class="headerlink" title=":even | 获得所有的偶数内容(下标从0开始)"></a>:even | 获得所有的偶数内容(下标从0开始)</h5><p><em>XXXX</em> –&gt; <code>li:even</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:even"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai1、hibisicidai3、hibisicidai5（对应下标0、2、4）</p><h5 id="odd-获得所有奇数内容"><a href="#odd-获得所有奇数内容" class="headerlink" title=":odd | 获得所有奇数内容"></a>:odd | 获得所有奇数内容</h5><p><em>XXXX</em> –&gt; <code>li:odd</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:odd"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai2、hibisicidai4（对应下标1、3）</p><h5 id="eq-index-获取对应下标的内容"><a href="#eq-index-获取对应下标的内容" class="headerlink" title=":eq(index) | 获取对应下标的内容"></a>:eq(index) | 获取对应下标的内容</h5><p><em>XXXX</em> –&gt; <code>li:eq(1)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:eq(1)"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai2（对应下标1）</p><h5 id="gt-index-获得大于某一个下标的内容"><a href="#gt-index-获得大于某一个下标的内容" class="headerlink" title=":gt(index) | 获得大于某一个下标的内容"></a>:gt(index) | 获得大于某一个下标的内容</h5><p><em>XXXX</em> –&gt; <code>li:gt(1)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:gt(1)"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai3、hibisicidai4、hibisicidai5（对应下标2、3、4）</p><h5 id="lt-index-获得小于某一个下标的内容"><a href="#lt-index-获得小于某一个下标的内容" class="headerlink" title=":lt(index) | 获得小于某一个下标的内容"></a>:lt(index) | 获得小于某一个下标的内容</h5><p><em>XXXX</em> –&gt; <code>li:lt(2)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"li:lt(2)"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br></pre></td></tr></table></figure><p>获取到：hibisicidai1、hibisicidai2（对应下标0、1）</p><h4 id="内容过滤器"><a href="#内容过滤器" class="headerlink" title="内容过滤器"></a>内容过滤器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"XXXX"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line">hibiscidai1</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;p&gt;<span class="number">123456</span>&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">hibsicidai2</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h5 id="contains-text"><a href="#contains-text" class="headerlink" title=":contains(text)"></a>:contains(text)</h5><p>获得某些包含特殊文本的内容的标签</p><p><em>XXXX</em> –&gt; <code>div:contains(hibiscidai1)</code></p><p>获取到第一个div</p><h5 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h5><p>获得内部没有内容的标签</p><p><em>XXXX</em> –&gt; <code>div:empty</code></p><p>获取到第二个div</p><h5 id="has-选择器"><a href="#has-选择器" class="headerlink" title=":has(选择器)"></a>:has(选择器)</h5><p>筛选包含某个选择器的标签</p><p><em>XXXX</em> –&gt; <code>div:has(p)</code></p><p>获取到第三个div</p><h5 id="parent"><a href="#parent" class="headerlink" title=":parent"></a>:parent</h5><p>选择器选取所有是其他元素的父元素且包含文本节点的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;<span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">&lt;ul&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><em>XXXX</em> –&gt; <code>ul:parent</code></p><p>选取所有带有子元素且包含文本的 <code>&lt;ul&gt;</code> 元素：</p><h4 id="可见选择器"><a href="#可见选择器" class="headerlink" title="可见选择器"></a>可见选择器</h4><h5 id="visible"><a href="#visible" class="headerlink" title=":visible"></a>:visible</h5><p>选中样式为显示的标签对象</p><p><em>XXXX</em> –&gt; <code>ul:visible</code></p><h5 id="hidden"><a href="#hidden" class="headerlink" title=":hidden"></a>:hidden</h5><p>选中样式为隐式的标签对象</p><p><em>XXXX</em> –&gt; <code>ul:hidden</code></p><h4 id="属性过滤器"><a href="#属性过滤器" class="headerlink" title="属性过滤器"></a>属性过滤器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"XXXX"</span>).css(<span class="string">"display"</span>,<span class="string">"none"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line">hibisicidai1</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="pox"&gt;</span></span><br><span class="line"><span class="regexp">hibiscidai2</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"cox"</span>&gt;</span><br><span class="line">hibiscidai3</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">hibiscidai4</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><ul><li>作用</li></ul><p>选择的是含有某些属性的标签对象</p><p>-<code>[attribute]</code></p><p><em>XXXX</em> –&gt; <code>div[id]</code><br>选择所有有<code>id</code>属性的<code>div</code>标签对象(获取到1/2/3)</p><ul><li><code>[attribute=value]</code></li></ul><p><em>XXXX</em> –&gt; <code>div[id=pox]</code><br>(获取到2)</p><ul><li><code>[attribute!=value]</code></li></ul><p><em>XXXX</em> –&gt; <code>div[id!=pox]</code><br>(获取到1/3/4)</p><h4 id="表单属性过滤器"><a href="#表单属性过滤器" class="headerlink" title="表单属性过滤器"></a>表单属性过滤器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ($(<span class="string">"input[type=checkbox]:checked"</span>).length==<span class="number">0</span>) &#123;</span><br><span class="line">alert(<span class="string">"请选择要删除的科目"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert($(<span class="string">"#city option:selected"</span>).text());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"java"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">python <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"python"</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">php <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"php"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"删除"</span> <span class="attr">onclick</span>=<span class="string">"test1()"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">onchange</span>=<span class="string">"text2()"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span>&gt;</span>郑州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="checked"><a href="#checked" class="headerlink" title=":checked"></a>:checked</h5><p>获得所有被选中的checkbox</p><h5 id="selected"><a href="#selected" class="headerlink" title=":selected"></a>:selected</h5><p>获得当前被选中的option</p><h4 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h4><ul><li>:text</li><li>:password</li><li>:radio</li><li>:checkbox</li><li>:submit</li><li>:button</li><li>:hidden</li><li>:file</li><li>:reset</li></ul><h1 id="DOM对象和Jquery对象的转换"><a href="#DOM对象和Jquery对象的转换" class="headerlink" title="DOM对象和Jquery对象的转换"></a>DOM对象和Jquery对象的转换</h1><h2 id="DOM对象—-gt-jquery对象"><a href="#DOM对象—-gt-jquery对象" class="headerlink" title="DOM对象—&gt;jquery对象"></a>DOM对象—&gt;jquery对象</h2><ul><li>语法:$(DOM对象)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//javascript标签对象获取方式</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="comment">//DOM对象转换为Jquery对象</span></span><br><span class="line">alert($(div).text());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jquery—-gt-DOM对象"><a href="#jquery—-gt-DOM对象" class="headerlink" title="jquery—&gt;DOM对象"></a>jquery—&gt;DOM对象</h2><ul><li>语法:Jquery.get(index)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).get(<span class="number">1</span>).innerHTML=<span class="string">"hibscidai"</span>;</span><br></pre></td></tr></table></figure><h1 id="一组Jquery对象-遍历"><a href="#一组Jquery对象-遍历" class="headerlink" title="一组Jquery对象(遍历)"></a>一组Jquery对象(遍历)</h1><h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"div"</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line"><span class="comment">//this 当前元素的DOM对象</span></span><br><span class="line"><span class="comment">//idex 代表当前元素的下标</span></span><br><span class="line">alert($(<span class="keyword">this</span>).text());</span><br><span class="line">alert(index);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"box"</span>&gt;</span><br><span class="line">hibisicidai1</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="pox"&gt;</span></span><br><span class="line"><span class="regexp">hibiscidai2</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div id=<span class="string">"aox"</span>&gt;</span><br><span class="line">hibiscidai3</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="cox"&gt;</span></span><br><span class="line"><span class="regexp">hibiscidai4</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"click"</span> onclick=<span class="string">"test1()"</span> /&gt;</span><br></pre></td></tr></table></figure><h2 id="长度"><a href="#长度" class="headerlink" title="长度"></a>长度</h2><p><code>$(&quot;div&quot;).length</code><br><code>$(&quot;div&quot;).size()</code></p><h2 id="获取某一个Jquery对象eq-idx"><a href="#获取某一个Jquery对象eq-idx" class="headerlink" title="获取某一个Jquery对象eq(idx)"></a>获取某一个Jquery对象eq(idx)</h2><p><code>$(&quot;div&quot;).eq(1).text()</code></p><h1 id="Jquery中核心的方法"><a href="#Jquery中核心的方法" class="headerlink" title="Jquery中核心的方法"></a>Jquery中核心的方法</h1><h2 id="修改HTML标签属性的方法"><a href="#修改HTML标签属性的方法" class="headerlink" title="修改HTML标签属性的方法"></a>修改HTML标签属性的方法</h2><h3 id="修改属性"><a href="#修改属性" class="headerlink" title="修改属性"></a>修改属性</h3><ul><li>语法<br>jquery对象.prop(“属性的名字”,”属性的值”);<h3 id="获得属性的值"><a href="#获得属性的值" class="headerlink" title="获得属性的值"></a>获得属性的值</h3></li><li>语法<br>jquery对象.prop(“属性的名字”)；<h3 id="设置多个属性的值"><a href="#设置多个属性的值" class="headerlink" title="设置多个属性的值"></a>设置多个属性的值</h3></li><li>语法<br>jquery对象.prop(“属性的名字”，属性的值).prop(“属性的名字”，”属性的值”)</li></ul><p>Jquery.prop{<br>    “属性名”：”属性值”，<br>    “属性名”：”属性值”，<br> }</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//修改div标签的属性</span></span><br><span class="line">$(<span class="string">"#box"</span>).prop(<span class="string">"title"</span>,<span class="string">"xiaobai"</span>);</span><br><span class="line"><span class="comment">//获取属性的值</span></span><br><span class="line">alert($(<span class="string">"#box"</span>).prop(<span class="string">"title"</span>));</span><br><span class="line"><span class="comment">//修改多个属性的值(链式调用)</span></span><br><span class="line">$(<span class="string">"#box"</span>).prop(<span class="string">"title"</span>,<span class="string">"xiaobai"</span>).prop(<span class="string">"id"</span>,<span class="string">"cox"</span>);</span><br><span class="line"><span class="comment">//json方式</span></span><br><span class="line">$(<span class="string">"#box"</span>).prop(&#123;</span><br><span class="line"><span class="string">"title"</span>:<span class="string">"xiaobai"</span>,</span><br><span class="line"><span class="string">"id"</span>,<span class="string">"cox"</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改标签的样式属性"><a href="#修改标签的样式属性" class="headerlink" title="修改标签的样式属性"></a>修改标签的样式属性</h2><h3 id="修改样式"><a href="#修改样式" class="headerlink" title="修改样式"></a>修改样式</h3><p>jquery对象.css(“css属性”，属性值)；</p><h3 id="获取样式的值"><a href="#获取样式的值" class="headerlink" title="获取样式的值"></a>获取样式的值</h3><p>jquery对象.css(“css属性”)</p><h3 id="设置多个css样式"><a href="#设置多个css样式" class="headerlink" title="设置多个css样式"></a>设置多个css样式</h3><ol><li>jquery对象.css(“css属性”，属性值).css(“css属性”，”属性值”)<br>.    jquery对象.css({<br>“css属性”：”属性值”,<br>“css属性”：”属性值”,<br>})</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//修改css样式的属性</span></span><br><span class="line">$(<span class="string">"#box"</span>).css(<span class="string">"width"</span>,<span class="string">"200px"</span>);</span><br><span class="line">$(<span class="string">"#box"</span>).css(<span class="string">"height"</span>,<span class="string">"200px"</span>);</span><br><span class="line"><span class="comment">//修改多个样式</span></span><br><span class="line">$(<span class="string">"#box"</span>).css(<span class="string">"width"</span>,<span class="string">"200px"</span>).css(<span class="string">"height"</span>,<span class="string">"200px"</span>);</span><br><span class="line">$(<span class="string">"#box"</span>).css(&#123;</span><br><span class="line"><span class="string">"width"</span>:<span class="string">"200px"</span>;</span><br><span class="line"><span class="string">"height"</span>:<span class="string">"200px"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//获取样式的值</span></span><br><span class="line">alert($(<span class="string">"#box"</span>).css(<span class="string">"width"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><p>Jquery.hide(毫秒)   以动画的形式隐藏<br>Jquery.show(毫秒)   以动画的形式显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//隐藏div</span></span><br><span class="line">$(<span class="string">"#box"</span>).hide(<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//显示div</span></span><br><span class="line">$(<span class="string">"#box"</span>).show(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><h2 id="修改样式类型"><a href="#修改样式类型" class="headerlink" title="修改样式类型"></a>修改样式类型</h2><p>语法</p><p><code>Jquery对象.removeClass();</code>//删除样式类型<br><code>Jquery对象.addClass();</code>//添加样式类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取第二个div的标签对象</span></span><br><span class="line"><span class="comment">//删除原有样式类型</span></span><br><span class="line">$(<span class="string">"#box"</span>).removeClass();</span><br><span class="line"><span class="comment">//添加原有样式类型</span></span><br><span class="line">$(<span class="string">"#box"</span>).addClass(<span class="string">"box"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：jquery.removeClass()没有指定参数，则jquery把这个标签的所有样式删除</p><h2 id="text函数"><a href="#text函数" class="headerlink" title="text函数"></a>text函数</h2><p>用于获取或者设置标签内部文本信息</p><ul><li>语法<br><code>jquery对象.text();</code>//获取文本内容<br><code>jquery对象.text(&quot;&quot;);</code>//修改文本内容</li><li>注意<br>只针对于文本内容，忽略HTML标签</li></ul><h2 id="HTML函数"><a href="#HTML函数" class="headerlink" title="HTML函数"></a>HTML函数</h2><p>用于获取或者设置标签内部的HTML标签</p><ul><li>语法<br><code>jquery对象.html();</code>//获取html标签内容<br><code>jquery对象.html(“标签”);</code>//修改html标签内容</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取HTML标签</span></span><br><span class="line"><span class="comment">//alert($("#box").html());</span></span><br><span class="line"><span class="comment">//修改HTML标签</span></span><br><span class="line">$(<span class="string">"#box"</span>).html(<span class="string">"I  &lt;font color=red &gt;  &amp;hearts;  &lt;/font&gt;  you"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Val函数"><a href="#Val函数" class="headerlink" title="Val函数"></a>Val函数</h2><p>用于获取或者设置表单标签中value属性内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取表单中的value值</span></span><br><span class="line"><span class="comment">// alert($("#t").val());</span></span><br><span class="line"><span class="comment">//修改表单中的value值</span></span><br><span class="line">$(<span class="string">"#t"</span>).val(<span class="string">"xiaohuahua"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Jquery中的事件处理"><a href="#Jquery中的事件处理" class="headerlink" title="Jquery中的事件处理"></a>Jquery中的事件处理</h1><h2 id="JS中事件处理的两种方法"><a href="#JS中事件处理的两种方法" class="headerlink" title="JS中事件处理的两种方法"></a>JS中事件处理的两种方法</h2><p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/js中事件处理的两种方法.jpg" alt="JS中事件处理的两种方法"><br>JavaScript编程式的事件处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面加载完成之后触发事件</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取对应的标签对象</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementByID(<span class="string">"box"</span>);</span><br><span class="line"><span class="comment">//为对应的标签对象添加事件</span></span><br><span class="line">input.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//js代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>前台控件代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"box"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Jquery中通过编程的方式加入事件处理"><a href="#Jquery中通过编程的方式加入事件处理" class="headerlink" title="Jquery中通过编程的方式加入事件处理"></a>Jquery中通过编程的方式加入事件处理</h2><p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/Jquery中通过编程的方式加入事件处理.jpg" alt="Jquery中通过编程的方式加入事件处理"></p><p>Jquery中编程式的事件处理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//页面加载完成后触发事件</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取标签对象，添加对应事件</span></span><br><span class="line">$(<span class="string">"#box"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//Jquery代码</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>前台控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"box"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意细节"><a href="#注意细节" class="headerlink" title="注意细节"></a>注意细节</h2><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//页面加载完成后触发事件</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$().click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//this，实质是DOM对象，代表当前操作标签对象</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">console</span>.info($(<span class="keyword">this</span>));</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="event"><a href="#event" class="headerlink" title="event"></a>event</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//页面加载完成后触发事件</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#box"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="comment">//event是一个Jquery对象</span></span><br><span class="line"><span class="built_in">console</span>.info(event);</span><br><span class="line"><span class="comment">//event.target是一个DOM对象</span></span><br><span class="line"><span class="built_in">console</span>.info(event.target);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="复合事件"><a href="#复合事件" class="headerlink" title="复合事件"></a>复合事件</h2><h3 id="toggle"><a href="#toggle" class="headerlink" title="toggle();"></a>toggle();</h3><p>复合多个单机操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toggle(fun1, fun2)</span><br></pre></td></tr></table></figure><h3 id="Hover"><a href="#Hover" class="headerlink" title="Hover()"></a>Hover()</h3><p>复合<code>mouseover</code> , <code>mouseout</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hover(fun1, fun2)</span><br></pre></td></tr></table></figure></p><h2 id="事件处理的完整写法（了解）"><a href="#事件处理的完整写法（了解）" class="headerlink" title="事件处理的完整写法（了解）"></a>事件处理的完整写法（了解）</h2><p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/事件处理的完整写法.png" alt="事件处理的完整写法"><br>简化事件的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#box"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//Jquery代码</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#box"</span>).mouseover(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//Jquery代码</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>完整事件处理的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">"#box"</span>).on(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//Jquery代码</span></span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#box"</span>).on(<span class="string">"mouseover"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//Jquery代码</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="特殊事件（了解）"><a href="#特殊事件（了解）" class="headerlink" title="特殊事件（了解）"></a>特殊事件（了解）</h2><p><code>one</code> 函数，保证一个事件只执行一次</p><h1 id="Jquery中的DOM编程"><a href="#Jquery中的DOM编程" class="headerlink" title="Jquery中的DOM编程"></a>Jquery中的DOM编程</h1><p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/Jquery中的DOM编程.png" alt="Jquery中的DOM编程"></p><h2 id="Jquery创建的HTML标签"><a href="#Jquery创建的HTML标签" class="headerlink" title="Jquery创建的HTML标签"></a>Jquery创建的HTML标签</h2><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = $(<span class="string">"&lt;div&gt;hibiscidai&lt;/div&gt;"</span>);</span><br></pre></td></tr></table></figure><h3 id="决定放置位置"><a href="#决定放置位置" class="headerlink" title="决定放置位置"></a>决定放置位置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#input"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//创建div标签对象</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">"&lt;div&gt;hibiscidai&lt;/div&gt;"</span>);</span><br><span class="line"><span class="comment">//父亲角度</span></span><br><span class="line">$(<span class="string">"#body"</span>).append(div);<span class="comment">//把新创建的div标签，放置在最后一个孩子处</span></span><br><span class="line">$(<span class="string">"#body"</span>).prepend(div);<span class="comment">//把新创建的div标签，放置在第一个孩子处</span></span><br><span class="line"><span class="comment">//兄弟角度</span></span><br><span class="line">$(<span class="string">"#input"</span>).after(div);</span><br><span class="line">$(<span class="string">"#input"</span>).before(div);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Jquery删除现有标签"><a href="#Jquery删除现有标签" class="headerlink" title="Jquery删除现有标签"></a>Jquery删除现有标签</h2><h3 id="清空标签的内部信息"><a href="#清空标签的内部信息" class="headerlink" title="清空标签的内部信息"></a>清空标签的内部信息</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box"</span>).empty();</span><br></pre></td></tr></table></figure><h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box"</span>).remove();</span><br></pre></td></tr></table></figure><h2 id="Jquery替换"><a href="#Jquery替换" class="headerlink" title="Jquery替换"></a>Jquery替换</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建input标签</span></span><br><span class="line"><span class="keyword">var</span> input = $(<span class="string">"&lt;input type='text' value='xiaohei' /&gt;"</span>);</span><br><span class="line"><span class="comment">//替换原有标签</span></span><br><span class="line">$(<span class="string">"#box"</span>).repalceWith(input);</span><br></pre></td></tr></table></figure><h2 id="克隆-clone"><a href="#克隆-clone" class="headerlink" title="克隆 clone()"></a>克隆 clone()</h2><p><code>clone()</code> 不复制事件<br><code>clone(true)</code> 复制事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#box"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"xxxxxxxx"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#input"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//克隆div标签</span></span><br><span class="line"><span class="keyword">var</span> div = $(<span class="string">"#box"</span>).clone(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//放置在body标签的最后孩子处</span></span><br><span class="line">$(<span class="string">"#body"</span>).append(div);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="一组关系方法"><a href="#一组关系方法" class="headerlink" title="一组关系方法"></a>一组关系方法</h2><p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/一组关系方法.png" alt="一组关系方法"></p><h2 id="案例：级联菜单"><a href="#案例：级联菜单" class="headerlink" title="案例：级联菜单"></a>案例：级联菜单</h2><p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/级联菜单.png" alt="级联菜单"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">bj:[<span class="string">'海淀'</span>,<span class="string">'朝阳'</span>,<span class="string">'丰台'</span>],</span><br><span class="line">tj:[<span class="string">'河东'</span>,<span class="string">'河西'</span>,<span class="string">'南开'</span>],</span><br><span class="line">zz:[<span class="string">'金水'</span>,<span class="string">'二七'</span>,<span class="string">'顺义'</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取北京对应的区</span></span><br><span class="line"><span class="keyword">var</span> sections =data[<span class="string">'bj'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取第二个select标签对象</span></span><br><span class="line"><span class="keyword">var</span> sectio n = $(<span class="string">"#section"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span>  i = <span class="number">0</span>; i &lt; sections.length; i++)&#123;</span><br><span class="line"><span class="comment">//创建option</span></span><br><span class="line"><span class="keyword">var</span> option = $(<span class="string">"&lt;option&gt;"</span>+sections[i]+<span class="string">"&lt;/option&gt;"</span>);</span><br><span class="line"><span class="comment">//把创建好的option放入第二个select标签中</span></span><br><span class="line">section.append(option);         </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给一个select标签添加change事件</span></span><br><span class="line">$(<span class="string">"#city"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//清空原有标签内部的信息</span></span><br><span class="line">section.empty();</span><br><span class="line"><span class="comment">//获取用户选中的城市值</span></span><br><span class="line"><span class="keyword">var</span> city = $(<span class="string">"#city option:selected"</span>).val(); </span><br><span class="line"><span class="comment">//获取该城市所对应的区</span></span><br><span class="line"><span class="keyword">var</span> sections = data[city];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sections.length; i++)&#123;</span><br><span class="line"><span class="comment">//创建option标签对象 </span></span><br><span class="line">            <span class="keyword">var</span> option = $(<span class="string">"&lt;option&gt;"</span>+sections[i]+<span class="string">"&lt;/option&gt;"</span>);</span><br><span class="line">            <span class="comment">//把option标签对象放入第二个select标签中</span></span><br><span class="line">            section.append(option);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);     </span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>前台表单控件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">city</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"city"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"bj"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"tj"</span>&gt;</span>天津<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"zz"</span>&gt;</span>郑州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">section</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"section"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件委派"><a href="#事件委派" class="headerlink" title="事件委派"></a>事件委派</h2><p>产生原因：通过最基本的方法，动态创建标签对象时，并不能添加原有的事件<br>解决方案：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">":checkbox"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"xxxxxx"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解决新创建的标签对象没有对应的事件</span></span><br><span class="line">$(<span class="string">":checkbox"</span>).live(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"xxxxxx"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#input"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//创建勾选框</span></span><br><span class="line"><span class="keyword">var</span> c = $(<span class="string">"&lt;input type='checkbox' /&gt;"</span>);</span><br><span class="line"><span class="comment">//获取body标签对象</span></span><br><span class="line">$(<span class="string">"#body"</span>).append(c);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Jquery对于Ajax编程的支持"><a href="#Jquery对于Ajax编程的支持" class="headerlink" title="Jquery对于Ajax编程的支持"></a>Jquery对于Ajax编程的支持</h1><p><img src="/2018/04/01/2018-04-01-Jquery框架学习笔记/Jquery对于Ajax编程的支持.png" alt="Jquery对于Ajax编程的支持"></p><h2 id="AJAX函数中参数的意义"><a href="#AJAX函数中参数的意义" class="headerlink" title="AJAX函数中参数的意义"></a>AJAX函数中参数的意义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">     type:”GET|POST”,</span><br><span class="line">     url:”XXX”,</span><br><span class="line">     data:name=xiaohei&amp;password=<span class="number">123456</span>   向服务器传递的数据</span><br><span class="line">      dataType:”text|json”  text纯文本信息    json自动封装js对象</span><br><span class="line">       success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//监听响应成功  执行代码</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="案例：级联菜单-1"><a href="#案例：级联菜单-1" class="headerlink" title="案例：级联菜单"></a>案例：级联菜单</h2><p>应用AJAX Jquery Strtus2 MyBatis 整合</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Jquery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HibisciDai&#39;s Blog Hello World</title>
      <link href="/2018/03/30/HibisciDais-Blog-Hello-World/"/>
      <url>/2018/03/30/HibisciDais-Blog-Hello-World/</url>
      <content type="html"><![CDATA[<p>Hello</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Hello-MyBlog"><a href="#Hello-MyBlog" class="headerlink" title="Hello MyBlog"></a>Hello MyBlog</h2><p>:)</p><p>个人github地址<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p><code>Waiting/patience/Trusting/Times all takes</code></p><a id="more"></a><h2 id="以下为长度测试内容"><a href="#以下为长度测试内容" class="headerlink" title="以下为长度测试内容"></a>以下为长度测试内容</h2><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Struts2学习笔记</title>
      <link href="/2018/03/30/2018-03-30-Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/30/2018-03-30-Struts2%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2学习笔记封面.jpg" alt="Struts2学习笔记封面"></p><p>Struts2，经典前端框架，学习笔记</p><a id="more"></a><p>[TOC]</p><h1 id="Struts2框架引言"><a href="#Struts2框架引言" class="headerlink" title="Struts2框架引言"></a>Struts2框架引言</h1><h2 id="什么是框架-FrameWork"><a href="#什么是框架-FrameWork" class="headerlink" title="什么是框架(FrameWork)"></a>什么是框架(FrameWork)</h2><p>软件开发过程中的半成品，解决软件开发中的通用问题，从而提高开发效率。<br><em>eg</em>：</p><ul><li>字符集编码</li><li>收集数据</li><li>手工类型转化</li><li>JDBC访问</li></ul><h2 id="Struts2框架的概念"><a href="#Struts2框架的概念" class="headerlink" title="Struts2框架的概念"></a>Struts2框架的概念</h2><p>典型的MVC框架，人为的把一个软件分为3个层次从而提高开发效率。<br>M(Model | 模型层)Service + DAO + Entity<br>V(View | 视图层) JSP(freemarker velocity)<br>C(Controller | 控制层) (Servlet)</p><h3 id="MVC设计思想的优点"><a href="#MVC设计思想的优点" class="headerlink" title="MVC设计思想的优点"></a>MVC设计思想的优点</h3><ul><li>解耦合，利于代码维护</li><li>有利于分工，提高代码开发效率</li></ul><h3 id="现有的MVC控制层所存在的问题"><a href="#现有的MVC控制层所存在的问题" class="headerlink" title="现有的MVC控制层所存在的问题"></a>现有的MVC控制层所存在的问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Servlet &#123;</span><br><span class="line"><span class="comment">//收集数据</span></span><br><span class="line"><span class="comment">//出现问题1:设置字符集编码的代码问题</span></span><br><span class="line">String age = request.getParamter(<span class="string">"age"</span>);</span><br><span class="line">request.getParamter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题2:手工进行类型转换</span></span><br><span class="line">Interger.parseInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用业务</span></span><br><span class="line">Service</span><br><span class="line"></span><br><span class="line"><span class="comment">//跳转页面</span></span><br><span class="line">request.getRequestDispatcher(<span class="string">"/a.jsp"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">redirect;</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题3:把跳转路径写死在程序中，不利于代码的维护</span></span><br><span class="line">response.sendredirect(<span class="string">"/b.jsp"</span>);</span><br></pre></td></tr></table></figure><h3 id="Struts2的实战开发思路"><a href="#Struts2的实战开发思路" class="headerlink" title="Struts2的实战开发思路"></a>Struts2的实战开发思路</h3><p>Struts2代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Struts2 &#123;</span><br><span class="line">MyStruts2 implements Action &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//调用业务</span></span><br><span class="line"><span class="comment">//调用业务</span></span><br><span class="line"><span class="comment">//跳转页面</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"hibiscidai"</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于WEBAPPLICATION的配置文件web.xml要声明映射</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>A<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>xxx.servlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>A<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/A<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于Struts.xml的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"A"</span> <span class="attr">class</span>=<span class="string">"xxx.action"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"hibiscidai"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第一个Struts2程序的开发"><a href="#第一个Struts2程序的开发" class="headerlink" title="第一个Struts2程序的开发"></a>第一个Struts2程序的开发</h1><h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><h3 id="引入核心jar包"><a href="#引入核心jar包" class="headerlink" title="引入核心jar包"></a>引入核心jar包</h3><p>struts2-core-2.3.15.1.jar</p><h3 id="引入第三方jar包"><a href="#引入第三方jar包" class="headerlink" title="引入第三方jar包"></a>引入第三方jar包</h3><h3 id="引入Struts-xml配置文件"><a href="#引入Struts-xml配置文件" class="headerlink" title="引入Struts.xml配置文件"></a>引入Struts.xml配置文件</h3><h3 id="配置Struts2核心过滤器"><a href="#配置Struts2核心过滤器" class="headerlink" title="配置Struts2核心过滤器"></a>配置Struts2核心过滤器</h3><p>在web.xml中声明</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>struts2<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对于不同版本会有兼容问题，注意 <em>filter-class</em> 标签映射类</p><h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="实现Action接口"><a href="#实现Action接口" class="headerlink" title="实现Action接口"></a>实现Action接口</h3><h3 id="配置文件配置"><a href="#配置文件配置" class="headerlink" title="配置文件配置"></a>配置文件配置</h3><p><img src="https://img-blog.csdn.net/20180325102257859?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts2配置文件配置"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2配置文件配置.png" alt="Struts2配置文件配置"></p><h3 id="ServletActionContext类的使用"><a href="#ServletActionContext类的使用" class="headerlink" title="ServletActionContext类的使用"></a>ServletActionContext类的使用</h3><p>在 <em>servlet-api.jar</em> 包中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">HttpServletResponse response =ServletActionContext.getResponse();</span><br><span class="line">HttpSession session = request.getSession();</span><br></pre></td></tr></table></figure><h3 id="Strtus2的另一种访问方式"><a href="#Strtus2的另一种访问方式" class="headerlink" title="Strtus2的另一种访问方式"></a>Strtus2的另一种访问方式</h3><p>直接在项目路径下输入action名字或者 xxx.action<br><em>eg:</em><br><code>http://localhost:8080/ProjectName/MyAction</code><br><code>http://localhost:8080/ProjectName/MyAction.action</code></p><h1 id="Struts2的跳转-4种-重点"><a href="#Struts2的跳转-4种-重点" class="headerlink" title="Struts2的跳转(4种|重点)"></a>Struts2的跳转(4种|重点)</h1><h2 id="Action跳转JSP"><a href="#Action跳转JSP" class="headerlink" title="Action跳转JSP"></a>Action跳转JSP</h2><h3 id="默认Forward跳转"><a href="#默认Forward跳转" class="headerlink" title="默认Forward跳转"></a>默认Forward跳转</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"FirstStruts"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.MyAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"dispatcher"</span>&gt;</span></span><br><span class="line">/ok.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Redirect跳转"><a href="#Redirect跳转" class="headerlink" title="Redirect跳转"></a>Redirect跳转</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"FirstStruts"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.MyAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span> <span class="attr">type</span>=<span class="string">"redirect"</span>&gt;</span></span><br><span class="line">/ok.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Action跳Action"><a href="#Action跳Action" class="headerlink" title="Action跳Action"></a>Action跳Action</h2><h3 id="Forward跳转"><a href="#Forward跳转" class="headerlink" title="Forward跳转"></a>Forward跳转</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"A"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.AAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"B"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span></span><br><span class="line">B</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"B"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.BAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">/ok.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Redirect跳转-1"><a href="#Redirect跳转-1" class="headerlink" title="Redirect跳转"></a>Redirect跳转</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"A"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.AAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"B"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span></span><br><span class="line">B</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"B"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.BAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">/ok.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="包-lt-PACKAGE-gt"><a href="#包-lt-PACKAGE-gt" class="headerlink" title="包 &lt; PACKAGE &gt;"></a>包 &lt; PACKAGE &gt;</h2><p>使配置文件当中的配置信息模块化，便于配置信息的管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"xxx"</span> <span class="attr">extends</span>=<span class="string">"struts-default"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="命名空间-lt-NAMESPACE-gt"><a href="#命名空间-lt-NAMESPACE-gt" class="headerlink" title="命名空间 &lt; NAMESPACE &gt;"></a>命名空间 &lt; NAMESPACE &gt;</h2><p>使用户的请求模块化，便于随后过滤器的使用。</p><p>原 <em>web.xml</em>配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>A<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>fancylab.hibiscidai.action.AAction<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>A<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/User/A<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>A<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>fancylab.hibiscidai.action.AAction<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>A<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/User/B<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">/User/*</span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问方式：localhost:[port]/ProjectName/A</p><p>Struts2 包空间加入后<br><em>struts.xml</em>配置<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">extends</span>=<span class="string">"strust-default"</span> <span class="attr">namespace</span>=<span class="string">"/First"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"A"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.AAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"Admin"</span> <span class="attr">extends</span>=<span class="string">"strust-default"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"A"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.AAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>访问方式：localhost:[port]/ProjectName/namespace/A</p><h2 id="跨包间的跳转"><a href="#跨包间的跳转" class="headerlink" title="跨包间的跳转"></a>跨包间的跳转</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"D"</span> <span class="attr">type</span>=<span class="string">"chain"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"namespace"</span>&gt;</span>/second<span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="comment">&lt;!--目标包的namespace--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"actionName"</span>&gt;</span>D<span class="tag">&lt;/<span class="name">param</span>&gt;</span><span class="comment">&lt;!--目标包下的目标Action--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全局跳转"><a href="#全局跳转" class="headerlink" title="全局跳转"></a>全局跳转</h2><p>当许多Action跳转到相同路径时，可以定义全局跳转，减少配置文件当中的配置信息冗余。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">global-results</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span>  <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span></span><br><span class="line">/ok.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">global-results</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>只在本包内有效</li><li>局部配置优先</li></ul><h1 id="STRUTS2接收CLIENT的参数-重点"><a href="#STRUTS2接收CLIENT的参数-重点" class="headerlink" title="STRUTS2接收CLIENT的参数(重点)"></a>STRUTS2接收CLIENT的参数(重点)</h1><h2 id="收集客户端的零散数据"><a href="#收集客户端的零散数据" class="headerlink" title="收集客户端的零散数据"></a>收集客户端的零散数据</h2><p>login.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"login"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xxxAction implements Action &#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setget方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UserService.login(username, password);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好处</p><ul><li>简化了收集client数据的方式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HttpServletRequest request = ServletActionContext.getRequest();</span><br><span class="line">String username = request.getParameter(<span class="string">"username</span></span><br><span class="line"><span class="string">"</span>);</span><br></pre></td></tr></table></figure><ul><li>对于通用数据进行自动类型转换。</li><li>针对于post提交数据的方式，自动解决字符集编码问题。</li></ul><h2 id="通过对象收集客户端的数据"><a href="#通过对象收集客户端的数据" class="headerlink" title="通过对象收集客户端的数据"></a>通过对象收集客户端的数据</h2><p>register.jsp</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.username"</span>&gt;</span></span><br><span class="line">密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"user.password"</span>&gt;</span></span><br><span class="line">年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"user.age"</span>&gt;</span></span><br><span class="line">日期<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"user.birthdate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> Date birthdate;</span><br><span class="line"></span><br><span class="line"><span class="comment">//setter和getter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RegisterAction.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">RegisterAction implements Action &#123;</span><br><span class="line"><span class="keyword">private</span> User user;</span><br><span class="line"><span class="comment">//setter和getter方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UserService.register(user);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过数组或集合的形式收集客户端的数据"><a href="#通过数组或集合的形式收集客户端的数据" class="headerlink" title="通过数组或集合的形式收集客户端的数据"></a>通过数组或集合的形式收集客户端的数据</h2><ul><li>批量删除</li><li>用户勾选多个选项时</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"3"</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">private List a;//以数组的形式接收数据</span><br></pre></td></tr></table></figure><h1 id="STRUTS2中ACTION的第二种开发方式"><a href="#STRUTS2中ACTION的第二种开发方式" class="headerlink" title="STRUTS2中ACTION的第二种开发方式"></a>STRUTS2中ACTION的第二种开发方式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyAction extends ActionSupport</span><br></pre></td></tr></table></figure><h1 id="DMI（DYNAMIC-METHOD-INVOKE-动态方法调用）-实战"><a href="#DMI（DYNAMIC-METHOD-INVOKE-动态方法调用）-实战" class="headerlink" title="DMI（DYNAMIC    METHOD   INVOKE  动态方法调用）(实战)"></a>DMI（DYNAMIC    METHOD   INVOKE  动态方法调用）(实战)</h1><p>在一个Action中提供多个方法应对用户不同需求</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>extends  ActionSupport(建议)<br>语法要求：DMI中Action中的方法，方法名随便写<br>修饰符   返回值   参数列表  与execute中方法保持一致</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="第一种配置"><a href="#第一种配置" class="headerlink" title="第一种配置"></a>第一种配置</h3><p><code>method</code> 标签中设置方法<br>优点：可读性好<br>缺点：配置信息冗余</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"addUser"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"add"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="第二种配置"><a href="#第二种配置" class="headerlink" title="第二种配置"></a>第二种配置</h3><p>采用通配符进行<br>优点：配置信息不再冗余<br>缺点：可读性极差</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"user_"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.UserAction"</span> <span class="attr">method</span>=<span class="string">"&#123;1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="STRUTS2中的数据处理机制"><a href="#STRUTS2中的数据处理机制" class="headerlink" title="STRUTS2中的数据处理机制"></a>STRUTS2中的数据处理机制</h1><p>数据处理机制：数据在网站中的流转<br><img src="https://img-blog.csdn.net/20180327174422857?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="数据处理机制-servlet-struts2"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/数据处理机制-servlet-struts2.png" alt="数据处理机制-servlet-struts2"></p><h2 id="OGNL表达式"><a href="#OGNL表达式" class="headerlink" title="OGNL表达式"></a>OGNL表达式</h2><p>OGNL表达式：是一种独立的表达式语言，不依赖于任何的框架<br>OGNL表达式特点： 从root区，ContextMap区取数据</p><h3 id="从Root区取数据"><a href="#从Root区取数据" class="headerlink" title="从Root区取数据"></a>从Root区取数据</h3><p>从Root区中取所存对象的属性值</p><h4 id="从Root去中取所存对象的属性值语法：直接属性名的方式"><a href="#从Root去中取所存对象的属性值语法：直接属性名的方式" class="headerlink" title="从Root去中取所存对象的属性值语法：直接属性名的方式"></a>从Root去中取所存对象的属性值语法：直接属性名的方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span>  Exception</span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span>  Person();</span><br><span class="line">person.setUsername(<span class="string">"laowang"</span>);</span><br><span class="line">person.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"username"</span>,person));</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"password"</span>,person));</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"age"</span>,person)); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从root区中取某一个对象中的关联对象的属性值-关联引用名-属性"><a href="#从root区中取某一个对象中的关联对象的属性值-关联引用名-属性" class="headerlink" title="从root区中取某一个对象中的关联对象的属性值:关联引用名.属性"></a>从root区中取某一个对象中的关联对象的属性值:关联引用名.属性</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span>  Person();</span><br><span class="line">person.setUsername(<span class="string">"laowang"</span>);</span><br><span class="line">person.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);  </span><br><span class="line">Address address = <span class="keyword">new</span>  Address();</span><br><span class="line"></span><br><span class="line">address.setStreet(<span class="string">"文化路"</span>);</span><br><span class="line">person.setAddress(address);</span><br><span class="line"></span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"address.addressname"</span>,person));</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"address.street"</span>,person));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从root区中取某一个对象当中的List集合中的元素-List集合引用名-下标"><a href="#从root区中取某一个对象当中的List集合中的元素-List集合引用名-下标" class="headerlink" title="从root区中取某一个对象当中的List集合中的元素:List集合引用名[下标]"></a>从root区中取某一个对象当中的List集合中的元素:List集合引用名[下标]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span>  Person();</span><br><span class="line">person.setUsername(<span class="string">"laowang"</span>);</span><br><span class="line">person.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; tels = person.getTels();</span><br><span class="line">tels.add(<span class="string">"xjr"</span>);</span><br><span class="line">tels.add(<span class="string">"whp"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"tels[0]"</span>,person));</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"tels[1]"</span>,person));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从root区中取某一个对象当中的Map集合中的某一个元素-map集合的引用名-键"><a href="#从root区中取某一个对象当中的Map集合中的某一个元素-map集合的引用名-键" class="headerlink" title="从root区中取某一个对象当中的Map集合中的某一个元素:map集合的引用名[键]"></a>从root区中取某一个对象当中的Map集合中的某一个元素:map集合的引用名[键]</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span>  Person();</span><br><span class="line">person.setUsername(<span class="string">"laowang"</span>);</span><br><span class="line">person.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);</span><br><span class="line">Map&lt;String, String&gt; qqs = person.getQqs();</span><br><span class="line">qqs.put(<span class="string">"kuaige"</span>,<span class="string">"562471794"</span>);</span><br><span class="line">qqs.put(<span class="string">"zpf"</span>,<span class="string">"7654321"</span>);</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"qqs['kuaige']"</span>,person));</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"qqs['zpf']"</span>,person));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ognl表达式中的运算"><a href="#ognl表达式中的运算" class="headerlink" title="ognl表达式中的运算"></a>ognl表达式中的运算</h4><ul><li>算数运算 <code>+</code>  <code>-</code>  <code>*</code>  <code>/</code>   <code>%</code></li><li>比较运算  <code>&gt;</code>  <code>&lt;</code>   <code>&gt;=</code>   <code>&lt;=</code>  <code>!=</code></li><li>逻辑运算   <code>&amp;&amp;</code>  <code>||</code>  <code>!</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.setUsername(<span class="string">"laowang"</span>);</span><br><span class="line">person.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"age&lt;10"</span>,person));</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"username=='laowang'"</span>,person));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="OGNL表达式可以调用某种数据类型的方法"><a href="#OGNL表达式可以调用某种数据类型的方法" class="headerlink" title="OGNL表达式可以调用某种数据类型的方法"></a>OGNL表达式可以调用某种数据类型的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.setUsername(<span class="string">"laowang"</span>);</span><br><span class="line">person.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"username.toUpperCase()"</span>,person));</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"username.equals('laowang')"</span>,person));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从ContextMap区取数据"><a href="#从ContextMap区取数据" class="headerlink" title="从ContextMap区取数据"></a>从ContextMap区取数据</h3><p>contextmap本身是个map，在单独测试ognl时需要提供一个map集合<br>语法：#key的方式取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ContextMap区取值的方式</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Map&lt;String,Person&gt; contextmap = <span class="keyword">new</span> HashMap&lt;String,Person&gt;();  </span><br><span class="line">Person person = <span class="keyword">new</span> Person();</span><br><span class="line">person.setUsername(<span class="string">"laowang"</span>);</span><br><span class="line">person.setPassword(<span class="string">"12345"</span>);</span><br><span class="line">person.setAge(<span class="number">30</span>);</span><br><span class="line">contextmap.put(<span class="string">"A"</span>, person);</span><br><span class="line">System.out.println(Ognl.getValue(<span class="string">"#A.age+10"</span>, contextmap,<span class="keyword">new</span> Object()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="VALUESTACK"><a href="#VALUESTACK" class="headerlink" title="VALUESTACK"></a>VALUESTACK</h2><h3 id="作用：管理-存储-一次请求有效的数据"><a href="#作用：管理-存储-一次请求有效的数据" class="headerlink" title="作用：管理(存储)一次请求有效的数据"></a>作用：管理(存储)一次请求有效的数据</h3><ol><li>客户端传来的数据</li><li>作用域中的数据</li></ol><ul><li>request</li><li>session</li><li>application</li></ul><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><p>与视图层（view层）解耦合</p><h3 id="获取值栈"><a href="#获取值栈" class="headerlink" title="获取值栈"></a>获取值栈</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ActionContext ac = ActionContext.getContext();</span><br><span class="line">ValueStack vs = ac.getValueStack();</span><br></pre></td></tr></table></figure><h3 id="值栈的生命周期-request作用域"><a href="#值栈的生命周期-request作用域" class="headerlink" title="值栈的生命周期(request作用域)"></a>值栈的生命周期(request作用域)</h3><p>一次请求有效，请求变化则值栈变化</p><h3 id="值栈的内存结构"><a href="#值栈的内存结构" class="headerlink" title="值栈的内存结构"></a>值栈的内存结构</h3><p>请求格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.setAttribute(<span class="string">"name"</span>, <span class="string">"laowang"</span>);</span><br><span class="line">request.getAttribute(<span class="string">"name"</span>);</span><br><span class="line">request.setAttribute(<span class="string">"n"</span>, <span class="string">"feige"</span>);</span><br></pre></td></tr></table></figure><p>user类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="comment">//setter和getter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>request作用域底层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">request</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Map attribute;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String name, String object)</span> </span>&#123;</span><br><span class="line">attribute.put(name, object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getAttribute</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">Object = attrbute.get(<span class="string">"name"</span>);</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于作用域<br>request–map<br>session–map<br>application–map</p><p><em>值栈的内存结构</em><br><img src="https://img-blog.csdn.net/20180327221632321?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="值栈的内存结构"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/值栈的内存结构.png" alt="值栈的内存结构"></p><h3 id="值栈的注意事项"><a href="#值栈的注意事项" class="headerlink" title="值栈的注意事项"></a>值栈的注意事项</h3><p>问题：值栈是一次请求有效，为什么可以管理session  application作用域？<br><img src="https://img-blog.csdn.net/20180327221748555?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="值栈注意事项"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/值栈注意事项.png" alt="值栈注意事项"></p><h2 id="STRUTS中的标签-上"><a href="#STRUTS中的标签-上" class="headerlink" title="STRUTS中的标签(上)"></a>STRUTS中的标签(上)</h2><p>作用：配合值栈在视图层显示数据<br>引用：<br>JSTL标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">taglib</span> <span class="attr">prefix</span>=<span class="string">"c"</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span></span><br></pre></td></tr></table></figure><p>Strtus标签：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">prefix</span>=<span class="string">"s"</span> <span class="attr">uri</span>=<span class="string">"/struts-tags"</span>%&gt;</span></span><br></pre></td></tr></table></figure><h3 id="显示数据"><a href="#显示数据" class="headerlink" title="显示数据"></a>显示数据</h3><h4 id="显示单个数据"><a href="#显示单个数据" class="headerlink" title="显示单个数据"></a>显示单个数据</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"OGNL表达式"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>单一流程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"OGNL表达式"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:else</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>非单一流程</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:if</span> <span class="attr">test</span>=<span class="string">"OGNL表达式"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:elseif</span> <span class="attr">test</span>=<span class="string">"OGNL表达式"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:elseif</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:else</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:else</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="显示多个数据"><a href="#显示多个数据" class="headerlink" title="显示多个数据"></a>显示多个数据</h4><p>语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"OGNL表达式"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="从数组或集合中显示数据-对象类型"><a href="#从数组或集合中显示数据-对象类型" class="headerlink" title="从数组或集合中显示数据(对象类型)"></a>从数组或集合中显示数据(对象类型)</h5><p><em>List或Set数组</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"#request.users"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"username"</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"password"</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"age"</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Map</em></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"#request.users"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--取map的键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"key"</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>==========<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--取map的值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">s:property</span> <span class="attr">value</span>=<span class="string">"value"</span>/&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="从数组或集合中显示数据-String类型和8种基本类型"><a href="#从数组或集合中显示数据-String类型和8种基本类型" class="headerlink" title="从数组或集合中显示数据(String类型和8种基本类型)"></a>从数组或集合中显示数据(String类型和8种基本类型)</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"#request.s"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:property</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="遍历状态"><a href="#遍历状态" class="headerlink" title="遍历状态"></a>遍历状态</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"OGNL"</span> <span class="attr">status</span>=<span class="string">"s"</span>&gt;</span></span><br><span class="line">#s.count      遍历次数</span><br><span class="line">#s.index      遍历的下标</span><br><span class="line">#s.odd       是否是奇数遍历</span><br><span class="line">#s.even      是否是偶次遍历</span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">s:iterator</span> <span class="attr">value</span>=<span class="string">"OGNL"</span> <span class="attr">begin</span>=<span class="string">""</span> <span class="attr">end</span>=<span class="string">""</span> <span class="attr">Step</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">s:iterator</span>&gt;</span></span><br></pre></td></tr></table></figure><p>begin：从某一个下标开始遍历<br>end：以某一个下标结束<br>step：步幅</p><p>查询所有的思路：<br><img src="https://img-blog.csdn.net/20180328220331687?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="查询所有的思路"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/查询所有的思路.png" alt="查询所有的思路"></p><h2 id="STRUTS2数据处理机制的补充"><a href="#STRUTS2数据处理机制的补充" class="headerlink" title="STRUTS2数据处理机制的补充"></a>STRUTS2数据处理机制的补充</h2><h3 id="Action中的成员变量替换request作用域"><a href="#Action中的成员变量替换request作用域" class="headerlink" title="Action中的成员变量替换request作用域"></a>Action中的成员变量替换request作用域</h3><p><img src="https://img-blog.csdn.net/20180328220600459?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Action中的成员变量替换request作用域"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Action中的成员变量替换request作用域.png" alt="Action中的成员变量替换request作用域"><br>Action中成员变量的作用：</p><ul><li>收集客户端的参数（零散变量，对象，数组或集合）</li><li>替换request作用域</li></ul><h3 id="简化值栈操作session作用域，application作用域的开发"><a href="#简化值栈操作session作用域，application作用域的开发" class="headerlink" title="简化值栈操作session作用域，application作用域的开发"></a>简化值栈操作session作用域，application作用域的开发</h3><p>Struts2ScopeUtil工具类的开发<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionContext;</span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.util.ValueStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化值栈操作session作用域及application作用域的使用</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Struts2ScopeUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向session作用域中存值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSessionAttribute</span><span class="params">(String OGNL, Object value)</span> </span>&#123;</span><br><span class="line">ActionContext context = ActionContext.getContext();</span><br><span class="line">ValueStack valueStack = context.getValueStack();</span><br><span class="line">valueStack.setValue(<span class="string">"#session."</span> + OGNL, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从Session作用域中取值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getSessionAttribute</span><span class="params">(String OGNL)</span> </span>&#123;</span><br><span class="line">ActionContext context = ActionContext.getContext();</span><br><span class="line">ValueStack valueStack = context.getValueStack();</span><br><span class="line"><span class="keyword">return</span> valueStack.findValue(<span class="string">"#session."</span> + OGNL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向application作用域中存值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationAttribute</span><span class="params">(String OGNL, Object value)</span> </span>&#123;</span><br><span class="line">ActionContext context = ActionContext.getContext();</span><br><span class="line">ValueStack valueStack = context.getValueStack();</span><br><span class="line">valueStack.setValue(<span class="string">"#application."</span> + OGNL, value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从application作用域中取值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getApplicationAttribute</span><span class="params">(String OGNL)</span> </span>&#123;</span><br><span class="line">ActionContext context = ActionContext.getContext();</span><br><span class="line">ValueStack valueStack = context.getValueStack();</span><br><span class="line"><span class="keyword">return</span> valueStack.findValue(<span class="string">"#application."</span> + OGNL);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="为什么叫值栈？值栈体现在哪个区呢"><a href="#为什么叫值栈？值栈体现在哪个区呢" class="headerlink" title="为什么叫值栈？值栈体现在哪个区呢?"></a>为什么叫值栈？值栈体现在哪个区呢?</h3><p>栈：先进后出</p><h3 id="DEBUG使用"><a href="#DEBUG使用" class="headerlink" title="DEBUG使用"></a>DEBUG使用</h3><ul><li>打断点</li><li>tomcat以debug模式启动</li><li>F5进入方法内部/F6不进入方法内部，只显示程序流程/F8推出debug模式/类似于ArrayList的内存结构</li></ul><p><img src="https://img-blog.csdn.net/20180328221147377?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="debug使用"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/debug使用.png" alt="debug使用"></p><h3 id="总结：现有STRUTS2的开发步骤"><a href="#总结：现有STRUTS2的开发步骤" class="headerlink" title="总结：现有STRUTS2的开发步骤"></a>总结：现有STRUTS2的开发步骤</h3><p><img src="https://img-blog.csdn.net/20180328221325880?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="debug开发步骤"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/debug开发步骤.png" alt="debug开发步骤"></p><h2 id="STRUTS标签-续"><a href="#STRUTS标签-续" class="headerlink" title="STRUTS标签(续)"></a>STRUTS标签(续)</h2><h3 id="lt-s-date-gt"><a href="#lt-s-date-gt" class="headerlink" title="&lt;s:date/&gt;"></a><code>&lt;s:date/&gt;</code></h3><p>语法：<code>&lt;s:date name=&quot;OGNL&quot; format=&quot;自定义日期类型&quot; /&gt;</code><br>作用：自定义日期的格式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:date</span> <span class="attr">name</span>=<span class="string">"#request.date"</span> <span class="attr">format</span>=<span class="string">"yyyy-MM-dd hh:mm:ss"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="lt-s-url-gt"><a href="#lt-s-url-gt" class="headerlink" title="&lt;s:url/&gt;"></a><code>&lt;s:url/&gt;</code></h3><p>语法：<code>&lt;s:url action=&quot;&quot; namespace=&quot;&quot;/&gt;</code> 、<code>&lt;s:url value=&quot;&quot;/&gt;</code><br>作用：防止用户禁用Cookie，自动进行url重写。加载第三方资源。<br>注意：传值<code>&lt;s:url action=&quot;&quot; namespace=&quot;&quot;/&gt;?id=41</code> </p><h3 id="s标签中与html相关的UI标签"><a href="#s标签中与html相关的UI标签" class="headerlink" title="s标签中与html相关的UI标签"></a>s标签中与html相关的UI标签</h3><p><code>&lt;s:form&gt;&lt;/s:form&gt;</code>———-&gt;<code>&lt;form&gt;&lt;/form&gt;</code><br><code>&lt;s:head/&gt;</code> ———-&gt;<code>&lt;head&gt;&lt;/head&gt;</code><br><code>&lt;s:text name=&quot;&quot;&gt;&lt;/s:text&gt;</code>———-&gt;<code>&lt;input type=&quot;text&quot;/&gt;</code><br><code>&lt;s:date name=&quot;&quot;/&gt;</code>———-&gt;<code>&lt;input type=&quot;date&quot;/&gt;</code></p><h3 id="lt-s-action-gt"><a href="#lt-s-action-gt" class="headerlink" title="&lt;s:action /&gt;"></a><code>&lt;s:action /&gt;</code></h3><p>语法：<code>&lt;s:action name=&quot;&quot; namespace=&quot;&quot; executeResult=&quot;&quot; /&gt;</code><br>作用：把多个Action的处理结果作整合</p><h3 id="针对于前台视图"><a href="#针对于前台视图" class="headerlink" title="针对于前台视图"></a>针对于前台视图</h3><p>传统思路</p><p><img src="https://img-blog.csdn.net/20180329214242443?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="传统首页显示方式"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/传统首页显示方式.png" alt="传统首页显示方式"></p><p>Struts解决方案</p><p><img src="https://img-blog.csdn.net/20180329214253159?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts解决前台首页"><br><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts解决前台首页.png" alt="Struts解决前台首页"></p><h1 id="STRUTS2中的拦截器"><a href="#STRUTS2中的拦截器" class="headerlink" title="STRUTS2中的拦截器"></a>STRUTS2中的拦截器</h1><h2 id="拦截器的作用：把多个ACTION中的冗余代码，抽取到拦截器中，解决代码冗余问题"><a href="#拦截器的作用：把多个ACTION中的冗余代码，抽取到拦截器中，解决代码冗余问题" class="headerlink" title="拦截器的作用：把多个ACTION中的冗余代码，抽取到拦截器中，解决代码冗余问题"></a>拦截器的作用：把多个ACTION中的冗余代码，抽取到拦截器中，解决代码冗余问题</h2><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="编码implements-Interceptor接口"><a href="#编码implements-Interceptor接口" class="headerlink" title="编码implements  Interceptor接口"></a>编码implements  Interceptor接口</h3><ul><li>方法作用：<br>把多个Action中的冗余代码，写入次方法中，解决代码冗余问题</li><li>参数的作用：<br><code>ai.getAction();</code>//获取目标的Action<br><code>ai.getStack();</code>//获取值栈<br><code>ai.invoke();</code>//控制请求的流程走向</li><li>返回值的作用：<br>中断用户请求时，指向跳转的目标JSP页面</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">checkloginInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractInterceptor</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">intercept</span><span class="params">(ActionInvocation ai)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 获取登陆或注册的标志位</span></span><br><span class="line">String flag = (String) Struts2ScopeUtil.getSessionAttribute(<span class="string">"flag"</span>);</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ai.invoke();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.interceptor.MyInterceptor"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"A"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.action.AAction"</span> <span class="attr">method</span>=<span class="string">"A"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">myinterceptor</span>"&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><h3 id="拦截响应"><a href="#拦截响应" class="headerlink" title="拦截响应"></a>拦截响应</h3><p><img src="https://img-blog.csdn.net/2018033021481617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts2拦截响应"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2拦截响应.png" alt="Struts2拦截响应"></p><h3 id="中断请求"><a href="#中断请求" class="headerlink" title="中断请求"></a>中断请求</h3><p><img src="https://img-blog.csdn.net/20180330215345741?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts2中断请求"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2中断请求.png" alt="Struts2中断请求"></p><h3 id="拦截器只在本包中有效"><a href="#拦截器只在本包中有效" class="headerlink" title="拦截器只在本包中有效"></a>拦截器只在本包中有效</h3><h3 id="简化拦截器开发-继承AbstractInterceptor类"><a href="#简化拦截器开发-继承AbstractInterceptor类" class="headerlink" title="简化拦截器开发  继承AbstractInterceptor类"></a>简化拦截器开发  继承AbstractInterceptor类</h3><h2 id="拦截器栈"><a href="#拦截器栈" class="headerlink" title="拦截器栈"></a>拦截器栈</h2><p>作用：管理多个拦截器<br>使用：不编码，只需配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器栈--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"my"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor2"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="默认拦截器栈"><a href="#默认拦截器栈" class="headerlink" title="默认拦截器栈"></a>默认拦截器栈</h3><p>作用：可以指定一个拦截器栈为默认拦截器栈，可以拦截所有的目标Action</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">default-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"my"</span>&gt;</span><span class="tag">&lt;/<span class="name">default-interceptor-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：默认拦截器栈放置的位置必须在全局跳转的前边，每个包中只能配置一个默认拦截器，局部配置优先。</p><h3 id="Struts2中的拦截器体系"><a href="#Struts2中的拦截器体系" class="headerlink" title="Struts2中的拦截器体系"></a>Struts2中的拦截器体系</h3><h4 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h4><h4 id="默认拦截器（系统拦截器）了解"><a href="#默认拦截器（系统拦截器）了解" class="headerlink" title="默认拦截器（系统拦截器）了解"></a>默认拦截器（系统拦截器）了解</h4><ul><li>params </li></ul><p>目的：接收客户端的请求参数</p><p><img src="https://img-blog.csdn.net/20180330221144209?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="param拦截器"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/param拦截器.png" alt="param拦截器"></p><ul><li>fileupload</li><li>Exception</li><li>workflow</li></ul><h4 id="默认拦截器放置的位置"><a href="#默认拦截器放置的位置" class="headerlink" title="默认拦截器放置的位置"></a>默认拦截器放置的位置</h4><p>Struts2-core.jar  —-&gt;Struts-default.xml</p><p><img src="https://img-blog.csdn.net/2018033022140593?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts-default.xml"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts-default.xml.png" alt="Struts-default.xml"></p><p>注意：如果自定义了默认拦截器栈，Struts2中的系统拦截器栈将失效</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"my"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defalutStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span><span class="comment">&lt;!--引入系统拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"myInterceptor2"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：如果自定义拦截器，系统拦截器将失效</p><h4 id="方法拦截器"><a href="#方法拦截器" class="headerlink" title="方法拦截器"></a>方法拦截器</h4><ul><li>作用<br>在DMI中，如果使用者采用的是通配符的配置方式，可以通过方法拦截器，拦截对应的方法。</li><li>编码<br>extends   MethodFilterInterceptor</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodInterceptor</span> <span class="keyword">extends</span> <span class="title">MethodFilterInterceptor</span>  </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">doIntercept</span><span class="params">(ActionInvocation ai)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我是方法拦截器"</span>);</span><br><span class="line">ai.invoke();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>配置<br>拦截排除某些方法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"includeMethod"</span>&gt;</span></span><br><span class="line">拦截器拦截哪些方法</span><br><span class="line"><span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">interceptor</span> <span class="attr">name</span>=<span class="string">"methodinterceptor"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.interceptor.MethodInterceptor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"excludeMethods"</span>&gt;</span></span><br><span class="line">    m4</span><br><span class="line">    <span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">interceptor</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"my"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"methodinterceptor"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">interceptors</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">defalut-interceptor-ref</span> <span class="attr">name</span>=<span class="string">"my"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">defalut-interceptor-ref</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意<br><img src="https://img-blog.csdn.net/20180330223024717?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="拦截器注意事项"></li></ul><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/拦截器注意事项.png" alt="拦截器注意事项"></p><ul><li>总结<br>拦截器的开发步骤<br><img src="https://img-blog.csdn.net/20180330223129670?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="拦截器的开发步骤"></li></ul><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/拦截器的开发步骤.png" alt="拦截器的开发步骤"></p><h2 id="拦截器的应用"><a href="#拦截器的应用" class="headerlink" title="拦截器的应用"></a>拦截器的应用</h2><h3 id="强制登陆"><a href="#强制登陆" class="headerlink" title="强制登陆"></a>强制登陆</h3><p><img src="https://img-blog.csdn.net/20180330223420565?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts2强制登录"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2强制登录.png" alt="Struts2强制登录"></p><h3 id="防止用户重复提交（令牌环）"><a href="#防止用户重复提交（令牌环）" class="headerlink" title="防止用户重复提交（令牌环）"></a>防止用户重复提交（令牌环）</h3><ul><li>发生场景<br>在用户进行表单提交时，因为网络通信等问题，产生重复的表单提交</li><li>解决方案<br>令牌环</li><li>令牌环实现原理<br><img src="https://img-blog.csdn.net/20180330223739678?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="令牌环实现原理"></li></ul><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/令牌环实现原理.png" alt="令牌环实现原理"></p><h3 id="Struts2令牌环解决思路"><a href="#Struts2令牌环解决思路" class="headerlink" title="Struts2令牌环解决思路"></a>Struts2令牌环解决思路</h3><h4 id="客户端生成随机数"><a href="#客户端生成随机数" class="headerlink" title="客户端生成随机数"></a>客户端生成随机数</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">s:token</span>&gt;</span><span class="tag">&lt;/<span class="name">s:token</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置token拦截器"><a href="#配置token拦截器" class="headerlink" title="配置token拦截器"></a>配置token拦截器</h4><p>引入Struts2提供的token拦截器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">interceptor-stack</span> <span class="attr">name</span>=<span class="string">"my1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"token"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">interceptor-ref</span> <span class="attr">name</span>=<span class="string">"defaultStack"</span>&gt;</span><span class="tag">&lt;/<span class="name">interceptor-ref</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">interceptor-stack</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="提供跳转目标页面"><a href="#提供跳转目标页面" class="headerlink" title="提供跳转目标页面"></a>提供跳转目标页面</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"invalid.token"</span>&gt;</span></span><br><span class="line">/error.jsp</span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="STRUTS2中的高级部分"><a href="#STRUTS2中的高级部分" class="headerlink" title="STRUTS2中的高级部分"></a>STRUTS2中的高级部分</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><h3 id="文件上传核心思路"><a href="#文件上传核心思路" class="headerlink" title="文件上传核心思路"></a>文件上传核心思路</h3><ul><li>client问题</li><li>服务器端如何获得文件上传的内容</li><li>服务器端如何存储文件上传的内容</li></ul><p><img src="https://img-blog.csdn.net/20180330224932279?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts2文件上传思路"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2文件上传思路.png" alt="Struts2文件上传思路"></p><h3 id="文件上传开发步骤"><a href="#文件上传开发步骤" class="headerlink" title="文件上传开发步骤"></a>文件上传开发步骤</h3><h4 id="客户端的处理"><a href="#客户端的处理" class="headerlink" title="客户端的处理"></a>客户端的处理</h4><p><code>enctype=&quot;application/x-www-form-urlencoded&quot;</code> 把表单中的文本中的内容，提交到服务器中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"application/x-www-form-urlencoded"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>enctype=&quot;multipart/form-data&quot;</code> 告知服务器端识别客户端传入的文件内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"upload"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"上传"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="服务器端创建一个文件夹，用于保存用户上传的文件"><a href="#服务器端创建一个文件夹，用于保存用户上传的文件" class="headerlink" title="服务器端创建一个文件夹，用于保存用户上传的文件"></a>服务器端创建一个文件夹，用于保存用户上传的文件</h4><h4 id="处理客户端上传的文件"><a href="#处理客户端上传的文件" class="headerlink" title="处理客户端上传的文件"></a>处理客户端上传的文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">uploadAction</span> <span class="keyword">extends</span> <span class="title">ActionSupport</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> File upload;</span><br><span class="line"><span class="comment">// 获取客户端传入的文件名和后缀</span></span><br><span class="line"><span class="keyword">private</span> String uploadFileName;</span><br><span class="line"><span class="comment">// 获取客户端传入的文件类型</span></span><br><span class="line"><span class="keyword">private</span> String uploadContentType;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 文件存放的目录</span></span><br><span class="line"><span class="keyword">private</span> String directory;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDirectory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> directory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDirectory</span><span class="params">(String directory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.directory = directory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUploadContentType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uploadContentType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadContentType</span><span class="params">(String uploadContentType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uploadContentType = uploadContentType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUploadFileName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUploadFileName</span><span class="params">(String uploadFileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.uploadFileName = uploadFileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> File <span class="title">getUpload</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> upload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpload</span><span class="params">(File upload)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.upload = upload;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">/*InputStream is = null;</span></span><br><span class="line"><span class="comment">OutputStream os = null;</span></span><br><span class="line"><span class="comment">// 把文件读入IO流</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">is = new FileInputStream(upload);</span></span><br><span class="line"><span class="comment">// 把文件写出到文件系统中</span></span><br><span class="line"><span class="comment">os = new FileOutputStream("D:\\Class3\\apache-tomcat-7.0.67\\webapps\\Strutspratice\\upload\\zkf.txt");</span></span><br><span class="line"><span class="comment">byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">int len = 0;</span></span><br><span class="line"><span class="comment">while (true) &#123;</span></span><br><span class="line"><span class="comment">// 读操作</span></span><br><span class="line"><span class="comment">len = is.read(buffer, 0, buffer.length);</span></span><br><span class="line"><span class="comment">if (len == -1)</span></span><br><span class="line"><span class="comment">break;</span></span><br><span class="line"><span class="comment">// 写操作</span></span><br><span class="line"><span class="comment">os.write(buffer, 0, len);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">return "uploadOK";</span></span><br><span class="line"><span class="comment">&#125; catch (Exception e) &#123;</span></span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">return "uploadError";</span></span><br><span class="line"><span class="comment">&#125; finally &#123;</span></span><br><span class="line"><span class="comment">try &#123;</span></span><br><span class="line"><span class="comment">// 关闭流</span></span><br><span class="line"><span class="comment">is.close();</span></span><br><span class="line"><span class="comment">os.close();</span></span><br><span class="line"><span class="comment">&#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line"><span class="comment">e.printStackTrace();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(uploadContentType);</span><br><span class="line">System.out.println(directory);</span><br><span class="line">FileUtils.copyFile(upload, <span class="keyword">new</span> File(getRealPath(directory) + <span class="string">"\\"</span> + uploadFileName));</span><br><span class="line"><span class="keyword">return</span> <span class="string">"uploadOK"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="string">"uploadError"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRealPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">ServletContext servletContext = ServletActionContext.getServletContext();</span><br><span class="line"><span class="comment">// 获取绝对路径</span></span><br><span class="line">String realPath = servletContext.getRealPath(path);</span><br><span class="line"><span class="keyword">return</span> realPath;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件上传（重构）"><a href="#文件上传（重构）" class="headerlink" title="文件上传（重构）"></a>文件上传（重构）</h4><h5 id="IO操作过于频繁，希望简化IO的处理"><a href="#IO操作过于频繁，希望简化IO的处理" class="headerlink" title="IO操作过于频繁，希望简化IO的处理"></a>IO操作过于频繁，希望简化IO的处理</h5><p><code>Commons-io.jar</code>  提供文件操作的工具类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileUtils.copyFile(upload, new File(getRealPath(directory) + &quot;\\&quot; + uploadFileName));</span><br></pre></td></tr></table></figure><h5 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h5><p>如何获得用户上传的文件名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> File upload;</span><br><span class="line"><span class="comment">// 获取客户端传入的文件名和后缀</span></span><br><span class="line"><span class="keyword">private</span> String uploadFileName;</span><br><span class="line"><span class="comment">// 获取客户端传入的文件类型</span></span><br><span class="line"><span class="keyword">private</span> String uploadContentType;</span><br></pre></td></tr></table></figure><h5 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h5><p>如何在web开发中通过相对路径获取绝对路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletContext sc = ServletActionContext.getServletContext();</span><br><span class="line">String RealPath = ac.getRealPath(“相对路径”);</span><br><span class="line">String RealPath = ac.getRealPath(“/upload”);</span><br></pre></td></tr></table></figure><h5 id="维护性差"><a href="#维护性差" class="headerlink" title="维护性差"></a>维护性差</h5><p>文件目录转移到配置文件中进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"upload"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.Action.uploadAction"</span> <span class="attr">method</span>=<span class="string">"upload"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"directory&gt;/upload&lt;/param&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;/action&gt;</span></span></span><br></pre></td></tr></table></figure><p>Action中声明成员变量即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String directory;</span><br></pre></td></tr></table></figure><h5 id="Struts2中上传的文件默认大小为2M"><a href="#Struts2中上传的文件默认大小为2M" class="headerlink" title="Struts2中上传的文件默认大小为2M"></a>Struts2中上传的文件默认大小为2M</h5><p><img src="https://img-blog.csdn.net/20180330230446373?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts2中上传的文件默认大小"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2中上传的文件默认大小.png" alt="Struts2中上传的文件默认大小"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--指定Struts2中 文件上传大小的上限--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constant</span> <span class="attr">name</span>=<span class="string">"struts.multipart.maxSize"</span> <span class="attr">value</span>=<span class="string">"2097152000"</span>&gt;</span><span class="tag">&lt;/<span class="name">constant</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>/struts-2.3.15.1/docs/WW/docs/stream-result.html        stream-result</p><h3 id="文件下载的核心思路"><a href="#文件下载的核心思路" class="headerlink" title="文件下载的核心思路"></a>文件下载的核心思路</h3><p><img src="https://img-blog.csdn.net/20180330230737927?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="Struts2文件下载核心思路"></p><p><img src="/2018/03/30/2018-03-30-Struts2学习笔记/Struts2文件下载核心思路.png" alt="Struts2文件下载核心思路"></p><h3 id="Struts2下载的步骤"><a href="#Struts2下载的步骤" class="headerlink" title="Struts2下载的步骤"></a>Struts2下载的步骤</h3><h4 id="extends-ActionSupport"><a href="#extends-ActionSupport" class="headerlink" title="extends ActionSupport"></a>extends ActionSupport</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//目的告知Struts2将要下载的文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FileInputStream(getRealPath(directory) + <span class="string">"\\"</span> + filename);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定文件下载类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- inline代表浏览器下载之后直接打开 attachment以附件的形式进行下载 filename下载之后的文件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span>attachment;filename=$&#123;filename&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="文件下载重构（优化）"><a href="#文件下载重构（优化）" class="headerlink" title="文件下载重构（优化）"></a>文件下载重构（优化）</h4><h5 id="完成路径的修改"><a href="#完成路径的修改" class="headerlink" title="完成路径的修改"></a>完成路径的修改</h5><p>通过<code>getRealPath()</code>方法与Action中为成员变量赋值的方式，完成路径的修改。</p><h5 id="下载中如何处理用户需要下载的文件名字"><a href="#下载中如何处理用户需要下载的文件名字" class="headerlink" title="下载中如何处理用户需要下载的文件名字"></a>下载中如何处理用户需要下载的文件名字</h5><p>客户通过传递参数的形式，向Action中传递数据，Action中通过成员变量接收数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:url action='download' namespace='/user' /&gt;?filename=z.txt"</span>&gt;</span></span><br><span class="line">z.txt</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;s:url action='download' namespace='/user' /&gt;?filename=zkf.txt"</span>&gt;</span></span><br><span class="line">zkf.txt</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端所要下载的文件名</span></span><br><span class="line"><span class="keyword">private</span> String filename;</span><br></pre></td></tr></table></figure><h5 id="解决用户下载之后的文件名"><a href="#解决用户下载之后的文件名" class="headerlink" title="解决用户下载之后的文件名"></a>解决用户下载之后的文件名</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端所要下载的文件名</span></span><br><span class="line"><span class="keyword">private</span> String filename;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"download"</span> <span class="attr">class</span>=<span class="string">"com.baizhi.Action.downloadAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"directory"</span>&gt;</span>/upload<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">type</span>=<span class="string">"stream"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定文件下载类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentType"</span>&gt;</span>text/plain<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- inline代表浏览器下载之后直接打开 attachment以附件的形式进行下载 filename下载之后的文件名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">"contentDisposition"</span>&gt;</span> attachment;filename=$&#123;filename&#125;<span class="tag">&lt;/<span class="name">param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Struts2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-05-建造者模式</title>
      <link href="/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-05-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-05-%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/28/设计模式-05-建造者模式/设计模式05.png" alt="设计模式05"></p><p>设计模式-05-建造者模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-05-建造者模式"><a href="#设计模式-05-建造者模式" class="headerlink" title="设计模式-05-建造者模式"></a>设计模式-05-建造者模式</h1><h1 id="建造者模式-Builder-Pattern"><a href="#建造者模式-Builder-Pattern" class="headerlink" title="建造者模式(Builder Pattern)"></a>建造者模式(Builder Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>将一个复杂对象的创建与表示分离，使得同样的创建过程可用不同的表示。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>一些基本部件不会变，而其组合经常变化的时候。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>建造者：创建和提供实例。<br>导演：管理建造出来的实例的依赖关系。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将变与不变分离开。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。</li><li>JAVA 中的 StringBuilder。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>建造者独立，易扩展。</li><li>便于控制细节风险。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>杯子构造过程。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/03/28/设计模式-05-建造者模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern05.bulider.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(MyBulider b)</span> </span>&#123;</span><br><span class="line">b.BuliderString();</span><br><span class="line">b.BuliderCup();</span><br><span class="line">b.BuliderBody();</span><br><span class="line">b.getResult();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBulider</span> </span>&#123;</span><br><span class="line">String myString;</span><br><span class="line">String myCup;</span><br><span class="line">String myBody;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuliderString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuliderCup</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuliderBody</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(myString);</span><br><span class="line">System.out.println(myCup);</span><br><span class="line">System.out.println(myBody);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlassCupBulider</span> <span class="keyword">extends</span> <span class="title">MyBulider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.myString = <span class="string">"GlassCup-String"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.myCup = <span class="string">"GlassCup-Cup"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.myBody = <span class="string">"GlassCup-Body"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SportCupBulider</span> <span class="keyword">extends</span> <span class="title">MyBulider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.myString = <span class="string">"SportCup-String"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.myCup = <span class="string">"SportCup-Cup"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.myBody = <span class="string">"SportCup-Body"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目标对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cup</span> </span>&#123;</span><br><span class="line">String CupString;</span><br><span class="line">String Cup;</span><br><span class="line">String CupBody;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCupString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> CupString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCupString</span><span class="params">(String cupString)</span> </span>&#123;</span><br><span class="line">CupString = cupString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Cup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCup</span><span class="params">(String cup)</span> </span>&#123;</span><br><span class="line">Cup = cup;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCupBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> CupBody;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCupBody</span><span class="params">(String cupBody)</span> </span>&#123;</span><br><span class="line">CupBody = cupBody;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">drink</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(CupString + Cup + CupBody);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Director d1 = <span class="keyword">new</span> Director();</span><br><span class="line">MyBulider mb1 = <span class="keyword">new</span> SportCupBulider();</span><br><span class="line">d1.create(mb1);</span><br><span class="line"></span><br><span class="line">Director d2 = <span class="keyword">new</span> Director();</span><br><span class="line">MyBulider mb2 = <span class="keyword">new</span> GlassCupBulider();</span><br><span class="line">d2.create(mb2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SportCup-String</span><br><span class="line">SportCup-Cup</span><br><span class="line">SportCup-Body</span><br><span class="line">GlassCup-String</span><br><span class="line">GlassCup-Cup</span><br><span class="line">GlassCup-Body</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>对话框构建过程。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/03/28/设计模式-05-建造者模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern05.bulider.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBulider</span> </span>&#123;</span><br><span class="line">String title;</span><br><span class="line">String icon;</span><br><span class="line">String message;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuliderTitle</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuliderIcon</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">BuliderMessage</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(title);</span><br><span class="line">System.out.println(icon);</span><br><span class="line">System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Conform</span> <span class="keyword">extends</span> <span class="title">MyBulider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">title = <span class="string">"Conform-title"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderIcon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">icon = <span class="string">"Conform-icon"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">message = <span class="string">"Conform-message"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Information</span> <span class="keyword">extends</span> <span class="title">MyBulider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">title = <span class="string">"Information-title"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderIcon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">icon = <span class="string">"Information-icon"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BuliderMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">message = <span class="string">"Information-message"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">MyBulider mb;</span><br><span class="line"></span><br><span class="line">Director(MyBulider mb) &#123;</span><br><span class="line"><span class="keyword">this</span>.mb = mb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mb.BuliderIcon();</span><br><span class="line">mb.BuliderMessage();</span><br><span class="line">mb.BuliderTitle();</span><br><span class="line">mb.getResult();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Diolog</span> </span>&#123;</span><br><span class="line">String title;</span><br><span class="line">String icon;</span><br><span class="line">String message;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.title = title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIcon</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> icon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIcon</span><span class="params">(String icon)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.icon = icon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">MyBulider mb1 = <span class="keyword">new</span> Conform();</span><br><span class="line">Director d1 = <span class="keyword">new</span> Director(mb1);</span><br><span class="line">d1.create();</span><br><span class="line"></span><br><span class="line">MyBulider mb2 = <span class="keyword">new</span> Information();</span><br><span class="line">Director d2 = <span class="keyword">new</span> Director(mb2);</span><br><span class="line">d2.create();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Conform-title</span><br><span class="line">Conform-icon</span><br><span class="line">Conform-message</span><br><span class="line">Information-title</span><br><span class="line">Information-icon</span><br><span class="line">Information-message</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ol><li><p><code>Bulider</code>限定名在java中有指定类，代码例中更改为<code>MyBulider</code>。</p></li><li><p>对于<code>Builder</code>中引用指定对象需要打破封装，即透视目标构建配件的结构，并声明为自己的成员变量，即目标对象与建造者有相同的成员变量。</p></li><li><p>关于两个案例中<code>Director</code>类构造有些不同导致方法调用有不一样。</p></li></ol><blockquote><p>案例一</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(MyBulider b)</span> </span>&#123;</span><br><span class="line">b.BuliderString();</span><br><span class="line">b.BuliderCup();</span><br><span class="line">b.BuliderBody();</span><br><span class="line">b.getResult();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>案例二</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</span><br><span class="line">MyBulider mb;</span><br><span class="line"></span><br><span class="line">Director(MyBulider mb) &#123;</span><br><span class="line"><span class="keyword">this</span>.mb = mb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mb.BuliderIcon();</span><br><span class="line">mb.BuliderMessage();</span><br><span class="line">mb.BuliderTitle();</span><br><span class="line">mb.getResult();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-04-抽象工厂模式</title>
      <link href="/2018/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-04-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-04-%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/26/设计模式-04-抽象工厂模式/设计模式04.png" alt="设计模式04"></p><p>设计模式专题-04-抽象工厂模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-04-抽象工厂模式"><a href="#设计模式-04-抽象工厂模式" class="headerlink" title="设计模式-04-抽象工厂模式"></a>设计模式-04-抽象工厂模式</h1><h1 id="抽象工厂模式-Abstract-Factory-Pattern"><a href="#抽象工厂模式-Abstract-Factory-Pattern" class="headerlink" title="抽象工厂模式(Abstract Factory Pattern)"></a>抽象工厂模式(Abstract Factory Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>提供一个创建一系列相关或者相关依赖对象的接口，而不需指定他们具体的类。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>接口选择。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在一个工厂里聚合多个同类产品。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>在一个产品族里面，定义多个产品。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>QQ 换皮肤，一整套一起换。</li><li>生成不同操作系统的程序。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>产品族难扩展，产品等级易扩展。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>暴力摩托游戏，游戏有两种模式。普通模式，开摩托拿AK47；魔法模式，骑扫把拿魔法棒。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/03/26/设计模式-04-抽象工厂模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern04.abstractFactory.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVehicle</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Broom</span> <span class="keyword">implements</span> <span class="title">IVehicle</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Broom-fly"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Moto</span> <span class="keyword">implements</span> <span class="title">IVehicle</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Moto-run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IWeapon</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AK47</span> <span class="keyword">implements</span> <span class="title">IWeapon</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"AK47-attack"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicStick</span> <span class="keyword">implements</span> <span class="title">IWeapon</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"MagicStick-attack"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> IVehicle <span class="title">createVehicle</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> IWeapon <span class="title">createWeapon</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IVehicle <span class="title">createVehicle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Moto();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IWeapon <span class="title">createWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AK47();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MagicFactory</span> <span class="keyword">implements</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IVehicle <span class="title">createVehicle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Broom();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IWeapon <span class="title">createWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MagicStick();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AbstractFactory myAbstractFactory = <span class="keyword">new</span> DefaultFactory();</span><br><span class="line">myAbstractFactory.createVehicle().run();</span><br><span class="line">myAbstractFactory.createWeapon().attack();</span><br><span class="line"></span><br><span class="line">AbstractFactory myAbstractFactory2 = <span class="keyword">new</span> MagicFactory();</span><br><span class="line">myAbstractFactory2.createVehicle().run();</span><br><span class="line">myAbstractFactory2.createWeapon().attack();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Moto-run</span><br><span class="line">AK47-attack</span><br><span class="line">Broom-fly</span><br><span class="line">MagicStick-attack</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>开发一款手机虚拟机（Virtual Device）的软件</p><ul><li>小米虚拟机（MVD）</li></ul><ul><li>图标ICON类：show()方法-米粒化</li><li>协议Protocol类：Communication()-米规则</li></ul><ul><li>IOS虚拟机（IVD）</li></ul><ul><li>图标ICON类：show()方法-扁平化</li><li>协议Protocol类：Communication()-IOS规则</li></ul><p>未来扩展锤子手机：Smartisan的虚拟机（SVD）</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/03/26/设计模式-04-抽象工厂模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern04.abstractFactory.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IICON</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiICON</span> <span class="keyword">implements</span> <span class="title">IICON</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小米图标"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlatICON</span> <span class="keyword">implements</span> <span class="title">IICON</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"IOS图标"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IProtocol</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">communication</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiRules</span> <span class="keyword">implements</span> <span class="title">IProtocol</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">communication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小米通信规则"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IOSRules</span> <span class="keyword">implements</span> <span class="title">IProtocol</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">communication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"IOS通信规则"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IAbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> IICON <span class="title">createICON</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> IProtocol <span class="title">createIProtocol</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MVDFactory</span> <span class="keyword">implements</span> <span class="title">IAbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IICON <span class="title">createICON</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MiICON();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IProtocol <span class="title">createIProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MiRules();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IVDFactory</span> <span class="keyword">implements</span> <span class="title">IAbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IICON <span class="title">createICON</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FlatICON();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IProtocol <span class="title">createIProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> IOSRules();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>扩展代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmarICON</span> <span class="keyword">implements</span> <span class="title">IICON</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"锤子图标"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmarRules</span> <span class="keyword">implements</span> <span class="title">IProtocol</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">communication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"锤子通信规则"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SVDFactory</span> <span class="keyword">implements</span> <span class="title">IAbstractFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IICON <span class="title">createICON</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SmarICON();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IProtocol <span class="title">createIProtocol</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SmarRules();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IAbstractFactory iAbstractFactory1 = <span class="keyword">new</span> MVDFactory();</span><br><span class="line">iAbstractFactory1.createICON().show();</span><br><span class="line">iAbstractFactory1.createIProtocol().communication();</span><br><span class="line"></span><br><span class="line">IAbstractFactory iAbstractFactory2 = <span class="keyword">new</span> IVDFactory();</span><br><span class="line">iAbstractFactory2.createICON().show();</span><br><span class="line">iAbstractFactory2.createIProtocol().communication();</span><br><span class="line"></span><br><span class="line">IAbstractFactory iAbstractFactory3 = <span class="keyword">new</span> SVDFactory();</span><br><span class="line">iAbstractFactory3.createICON().show();</span><br><span class="line">iAbstractFactory3.createIProtocol().communication();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">小米图标</span><br><span class="line">小米通信规则</span><br><span class="line">IOS图标</span><br><span class="line">IOS通信规则</span><br><span class="line">锤子图标</span><br><span class="line">锤子通信规则</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-03-工厂模式</title>
      <link href="/2018/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-03-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/21/设计模式-03-工厂模式/设计模式03.jpg" alt="设计模式03"></p><p>设计模式专题-03-工厂模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-03-工厂模式"><a href="#设计模式-03-工厂模式" class="headerlink" title="设计模式-03-工厂模式"></a>设计模式-03-工厂模式</h1><h1 id="工厂模式-Factory-Pattern"><a href="#工厂模式-Factory-Pattern" class="headerlink" title="工厂模式(Factory Pattern)"></a>工厂模式(Factory Pattern)</h1><blockquote><p>简单工厂</p></blockquote><p>对象创建的过程过于繁琐和庞大，可能进行同类型扩展，将类的创建单独放在一个类中进行，这个类叫工厂。<br>在工厂模式中，在创建对象受不会对客户暴露创建逻辑，通过共同的接口来指向新的创建对象。<br>创建过程延迟到子类进行，让子类决定实例化那个工厂。</p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪个类，一个类的创建延迟到其子类，这个类叫工厂。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>接口选择。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>明确计划不同条件下创建不同实例。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>创建过程在其子类执行。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>Hibienate换数据库只需要换方言和驱动就可以。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>一个调用者想创建一个对象，只要知道其名称就可以了。</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。</li><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>新产品增加需要增加具体类和实现工厂，个数成倍增加，增加系统复杂度。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p>扩展前：</p><p><img src="/2018/03/21/设计模式-03-工厂模式/扩展前.png" alt="扩展前"></p><p>扩展后:</p><p><img src="/2018/03/21/设计模式-03-工厂模式/扩展后.png" alt="扩展后"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern03.factory.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line"><span class="function">IMonster <span class="title">create</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IMonster</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ULtraman</span> <span class="keyword">implements</span> <span class="title">IMonster</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"正义使者"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ULtramanFactory</span> <span class="keyword">implements</span> <span class="title">IFactory</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> IMonster <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ULtraman();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">IFactory a = <span class="keyword">new</span> ULtramanFactory();</span><br><span class="line">a.create().show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正义使者</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>不同数据库有不同的数据驱动，由用户指定不同的数据驱动。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/03/21/设计模式-03-工厂模式/案例1.png" alt="案例1"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern03.factory.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLHelper</span> <span class="keyword">implements</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"SQLHelper-open"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"SQLHelper-operation"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"SQLHelper-close"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleHelper</span> <span class="keyword">implements</span> <span class="title">Helper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"OracleHelper-open"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"OracleHelper-operation"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"OracleHelper-close"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Helper <span class="title">create</span><span class="params">(String helperType)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Helper <span class="title">create</span><span class="params">(String helperType)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == helperType) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (helperType.equalsIgnoreCase(<span class="string">"SQLHelper"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SQLHelper();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (helperType.equalsIgnoreCase(<span class="string">"OracleHelper"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OracleHelper();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Factory myFactory = <span class="keyword">new</span> MyFactory();</span><br><span class="line">Helper helper1 = myFactory.create(<span class="string">"SQLHelper"</span>);</span><br><span class="line">helper1.open();</span><br><span class="line">helper1.operation();</span><br><span class="line">helper1.close();</span><br><span class="line">Helper helper2 = myFactory.create(<span class="string">"OracleHelper"</span>);</span><br><span class="line">helper2.open();</span><br><span class="line">helper2.operation();</span><br><span class="line">helper2.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SQLHelper-open</span><br><span class="line">SQLHelper-operation</span><br><span class="line">SQLHelper-close</span><br><span class="line">OracleHelper-open</span><br><span class="line">OracleHelper-operation</span><br><span class="line">OracleHelper-close</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/19/hello-world/"/>
      <url>/2018/03/19/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Ajax学习笔记</title>
      <link href="/2018/03/16/2018-03-16-Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/03/16/2018-03-16-Ajax%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/16/2018-03-16-Ajax学习笔记/Ajax学习笔记封面.jpg" alt="Ajax学习笔记封面"></p><p>Ajax学习笔记，前端基础，异步传参</p><a id="more"></a><p>[TOC]</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p><strong>（asynchronous javascript and xml[异步请求  javascript   xml])</strong></p><h2 id="传统请求"><a href="#传统请求" class="headerlink" title="传统请求"></a>传统请求</h2><h3 id="发起传统请求的方式"><a href="#发起传统请求的方式" class="headerlink" title="发起传统请求的方式"></a>发起传统请求的方式</h3><p>i.地址栏<br>ii.超级链接<br>iii.表单<br>iiii.javascript:location.href 函数</p><h3 id="传统请求的问题"><a href="#传统请求的问题" class="headerlink" title="传统请求的问题"></a>传统请求的问题</h3><p>需要刷新页面才能等待结果进行后续操作。</p><h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><h3 id="异步请求的特点"><a href="#异步请求的特点" class="headerlink" title="异步请求的特点"></a>异步请求的特点</h3><p>响应的内容不是新的页面,是一个页面的局部（字符串信息），所以用户在使用异步请求时，不需要等待响应，直接可以进行后续的操作</p><h3 id="传统请求与异步请求的区别"><a href="#传统请求与异步请求的区别" class="headerlink" title="传统请求与异步请求的区别"></a>传统请求与异步请求的区别</h3><h4 id="响应内容"><a href="#响应内容" class="headerlink" title="响应内容"></a>响应内容</h4><p>传统请求响应：新的页面  刷新页面<br>异步请求响应：页面的局部，字符串的信息</p><h4 id="对于用户的操作"><a href="#对于用户的操作" class="headerlink" title="对于用户的操作"></a>对于用户的操作</h4><p>传统的请求：等待响应<br>异步的请求：不需要等待响应，用户可以直接进行后续操作</p><h2 id="异步请求的开发"><a href="#异步请求的开发" class="headerlink" title="异步请求的开发"></a>异步请求的开发</h2><h3 id="异步请求对象"><a href="#异步请求对象" class="headerlink" title="异步请求对象"></a>异步请求对象</h3><p>javascript:XmlHttpRequest 对象 xhr<br><em>针对不同系列浏览器创建方式不同</em><br><strong>Chrom|FF|safari</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var xhr = <span class="keyword">new</span> XmlHttpRequest();</span><br></pre></td></tr></table></figure><p><strong>IE系</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Var xhr = <span class="keyword">new</span> ActionXObject(“Microsoft.XMLHTTP”);</span><br></pre></td></tr></table></figure><h3 id="xhr对象使用"><a href="#xhr对象使用" class="headerlink" title="xhr对象使用"></a>xhr对象使用</h3><p>i.创建xhr对象<br>ii.发送请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.open(<span class="string">"get | post"</span>, url);</span><br></pre></td></tr></table></figure><p>iii.如何传递数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xhr.send(数据);</span><br></pre></td></tr></table></figure><p>iiii.监听响应<br><code>xhr.readystate</code>    //检测是否完成</p><table><thead><tr><th>状态码</th><th>状态</th></tr></thead><tbody><tr><td>0</td><td>xhr对象被创建，并没有调用send()方法</td></tr><tr><td>1</td><td>xhr对象调用了send方法，但没有响应</td></tr><tr><td>2</td><td>xhr对象调用了send方法，响应已经返回客户端</td></tr><tr><td>3</td><td>响应解析</td></tr><tr><td>4</td><td>响应解析完成可以使用</td></tr></tbody></table><p><code>xhr.status</code> //响应是否正确</p><table><thead><tr><th>状态码</th><th>状态</th></tr></thead><tbody><tr><td>404</td><td>xhr对象被创建，并没有调用send()方法</td></tr><tr><td>500</td><td>xhr对象调用了send方法，但没有响应</td></tr><tr><td>405</td><td>xhr对象调用了send方法，响应已经返回客户端</td></tr><tr><td>200</td><td>正确</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readystate == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">xhr.responseTest  <span class="comment">//获得响应文本</span></span><br><span class="line"><span class="comment">//Javascript中的DOM编程展示在页面中</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户名校验开发实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取用户名</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">var</span> username = input.value;</span><br><span class="line"><span class="comment">//发送AJAX请求</span></span><br><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送请求</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>,<span class="string">"$&#123;pageContext.request.contextPath&#125;/check/checkusername1?username="</span>+ username);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//监听响应</span></span><br><span class="line"></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">//获取校验结果</span></span><br><span class="line"><span class="keyword">var</span> message = xhr.responseText;</span><br><span class="line"><span class="comment">//DOM提示信息</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="built_in">document</span>.getElementById(<span class="string">"message"</span>);</span><br><span class="line">m.innerHTML = message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">用户名<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">onblur</span>=<span class="string">"test1()"</span> <span class="attr">value</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">密码<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">年龄<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="JSON协议串"><a href="#JSON协议串" class="headerlink" title="JSON协议串"></a>JSON协议串</h1><h2 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h2><p>字符串</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>在异构的编程体系中，进行数据的传输和交互</p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><h3 id="对象形式"><a href="#对象形式" class="headerlink" title="对象形式"></a>对象形式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User &#123;</span><br><span class="line">id = <span class="number">1</span>;</span><br><span class="line">userName = <span class="string">"hibiscidai"</span>;</span><br><span class="line">age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"userName"</span>:<span class="string">"hibiscidai"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="集合形式"><a href="#集合形式" class="headerlink" title="集合形式"></a>集合形式</h3><p>数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> [] names = &#123;<span class="string">"xiaoming"</span>, <span class="string">"xiaozhu"</span>, <span class="string">"xiaogou"</span>&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"xiaoming"</span>,<span class="string">"xiaozhu"</span>,<span class="string">"xiaogou"</span>]</span><br></pre></td></tr></table></figure><p>含有对象的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List &lt;User&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"userName"</span>:<span class="string">"hibiscidai"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;,&#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"userName"</span>:<span class="string">"xiaoming"</span>,<span class="string">"age"</span>:<span class="number">20</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="内嵌对象"><a href="#内嵌对象" class="headerlink" title="内嵌对象"></a>内嵌对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">User &#123;</span><br><span class="line">id = <span class="number">1</span>;</span><br><span class="line">userName = <span class="string">"hibiscidai"</span>;</span><br><span class="line">Address address;</span><br><span class="line">List&lt;String&gt; phone;</span><br><span class="line">&#125;</span><br><span class="line">Address &#123;</span><br><span class="line">city = <span class="string">"zhengzhou"</span>;</span><br><span class="line">street = <span class="string">"wenhualu"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"userName"</span>:<span class="string">"hibiscidai"</span>,&#123;<span class="string">"city"</span>:<span class="string">"zhengzhou"</span>,<span class="string">"street"</span>:<span class="string">"wenhualu"</span>&#125;,[<span class="string">"11111"</span>,<span class="string">"2222"</span>,<span class="string">"3333"</span>]&#125;</span><br></pre></td></tr></table></figure><h3 id="Map类型与对象的转换形式是一致的"><a href="#Map类型与对象的转换形式是一致的" class="headerlink" title="Map类型与对象的转换形式是一致的"></a>Map类型与对象的转换形式是一致的</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; m = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">m.put(<span class="string">"name1"</span>, <span class="string">"hibiscidai1"</span>);</span><br><span class="line">m.put(<span class="string">"name2"</span>, <span class="string">"hibiscidai2"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"name2"</span>:<span class="string">"hibiscidai2"</span>,<span class="string">"name1"</span>:<span class="string">"hibiscidai1"</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON协议串解析"><a href="#JSON协议串解析" class="headerlink" title="JSON协议串解析"></a>JSON协议串解析</h2><p>异构体系中对象和集合与JSON串之间的转换<br>针对于java有jsonlib/gson(Google)/fastjson(ali)/jakenson(springmvc)<br><em>需要提前引入对应jar包</em></p><p><strong>实际测试</strong><br>用于本测试的对象<br><em>User.java | 省略setter和getter与构造方法</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line">String phone;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Address.java | 同User.java</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String city;</span><br><span class="line"><span class="keyword">public</span> String Street;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="GSON-google"><a href="#GSON-google" class="headerlink" title="GSON(google)"></a>GSON(google)</h3><h4 id="java中的对象-》JSON串"><a href="#java中的对象-》JSON串" class="headerlink" title="java中的对象==》JSON串"></a>java中的对象==》JSON串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的对象==》JSON串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"hibiscidai"</span>, <span class="string">"123456"</span>, <span class="number">18</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson(); <span class="comment">// 创建GSON对象</span></span><br><span class="line">String string = gson.toJson(user);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;hibiscidai&quot;,&quot;phone&quot;:&quot;123456&quot;,&quot;age&quot;:18&#125;</span><br></pre></td></tr></table></figure><h4 id="java中的集合-》JSON串"><a href="#java中的集合-》JSON串" class="headerlink" title="java中的集合==》JSON串"></a>java中的集合==》JSON串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的集合==》JSON串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user1 = <span class="keyword">new</span> User(<span class="string">"hibiscidai1"</span>, <span class="string">"1234561"</span>, <span class="number">181</span>, <span class="keyword">null</span>);</span><br><span class="line">User user2 = <span class="keyword">new</span> User(<span class="string">"hibiscidai2"</span>, <span class="string">"1234562"</span>, <span class="number">182</span>, <span class="keyword">null</span>);</span><br><span class="line">User user3 = <span class="keyword">new</span> User(<span class="string">"hibiscidai3"</span>, <span class="string">"1234563"</span>, <span class="number">183</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; listUser = <span class="keyword">new</span> ArrayList&lt;User&gt;(); <span class="comment">// 创建List集合</span></span><br><span class="line">listUser.add(user1);</span><br><span class="line">listUser.add(user2);</span><br><span class="line">listUser.add(user3);</span><br><span class="line"></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson(); <span class="comment">// 创建GSON对象</span></span><br><span class="line">String string = gson.toJson(listUser);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;name&quot;:&quot;hibiscidai1&quot;,&quot;phone&quot;:&quot;1234561&quot;,&quot;age&quot;:181&#125;,&#123;&quot;name&quot;:&quot;hibiscidai2&quot;,&quot;phone&quot;:&quot;1234562&quot;,&quot;age&quot;:182&#125;,&#123;&quot;name&quot;:&quot;hibiscidai3&quot;,&quot;phone&quot;:&quot;1234563&quot;,&quot;age&quot;:183&#125;]</span><br></pre></td></tr></table></figure><h4 id="java中的内嵌对象-》JSON"><a href="#java中的内嵌对象-》JSON" class="headerlink" title="java中的内嵌对象==》JSON"></a>java中的内嵌对象==》JSON</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的内嵌对象==》JSON</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Address addre = <span class="keyword">new</span> Address(<span class="string">"zhengzhou"</span>, <span class="string">"wenhualu"</span>);</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"hibiscidai1"</span>, <span class="string">"1234561"</span>, <span class="number">181</span>, addre);</span><br><span class="line"></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson(); <span class="comment">// 创建GSON对象</span></span><br><span class="line">String string = gson.toJson(user);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;hibiscidai1&quot;,&quot;phone&quot;:&quot;1234561&quot;,&quot;age&quot;:181,&quot;address&quot;:&#123;&quot;city&quot;:&quot;zhengzhou&quot;,&quot;Street&quot;:&quot;wenhualu&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="java中的Map对象-》JSON"><a href="#java中的Map对象-》JSON" class="headerlink" title="java中的Map对象==》JSON"></a>java中的Map对象==》JSON</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的Map对象==》JSON</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">maps.put(<span class="string">"1"</span>, <span class="string">"hibiscidai"</span>);</span><br><span class="line">maps.put(<span class="string">"2"</span>, <span class="string">"hibiscidai2"</span>);</span><br><span class="line"></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson(); <span class="comment">// 创建GSON对象</span></span><br><span class="line">String string = gson.toJson(maps);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;2&quot;:&quot;hibiscidai2&quot;,&quot;1&quot;:&quot;hibiscidai&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON-》java中对象"><a href="#JSON-》java中对象" class="headerlink" title="JSON==》java中对象"></a>JSON==》java中对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// JSON==》java中对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"hibiscidai"</span>, <span class="string">"123456"</span>, <span class="number">18</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson(); <span class="comment">// 创建GSON对象</span></span><br><span class="line">String string = gson.toJson(user);</span><br><span class="line"></span><br><span class="line">User user2 = gson.fromJson(string, User.class); <span class="comment">// json转对象</span></span><br><span class="line">System.out.println(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [name=hibiscidai, phone=123456, age=18, address=null]</span><br></pre></td></tr></table></figure><h3 id="fastjson-ali"><a href="#fastjson-ali" class="headerlink" title="fastjson(ali)"></a>fastjson(ali)</h3><p>对象&gt;int&gt;string</p><h4 id="java中的对象-》JSON串-1"><a href="#java中的对象-》JSON串-1" class="headerlink" title="java中的对象==》JSON串"></a>java中的对象==》JSON串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的内嵌对象==》JSON</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Address addre = <span class="keyword">new</span> Address(<span class="string">"zhengzhou"</span>, <span class="string">"wenhualu"</span>);</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"hibiscidai1"</span>, <span class="string">"1234561"</span>, <span class="number">181</span>, addre);</span><br><span class="line"></span><br><span class="line">String string = JSON.toJSONString(user);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;age&quot;:18,&quot;name&quot;:&quot;hibiscidai&quot;,&quot;phone&quot;:&quot;123456&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="java中的集合-》JSON串-1"><a href="#java中的集合-》JSON串-1" class="headerlink" title="java中的集合==》JSON串"></a>java中的集合==》JSON串</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的集合==》JSON串</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user1 = <span class="keyword">new</span> User(<span class="string">"hibiscidai1"</span>, <span class="string">"1234561"</span>, <span class="number">181</span>, <span class="keyword">null</span>);</span><br><span class="line">User user2 = <span class="keyword">new</span> User(<span class="string">"hibiscidai2"</span>, <span class="string">"1234562"</span>, <span class="number">182</span>, <span class="keyword">null</span>);</span><br><span class="line">User user3 = <span class="keyword">new</span> User(<span class="string">"hibiscidai3"</span>, <span class="string">"1234563"</span>, <span class="number">183</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">List&lt;User&gt; listUser = <span class="keyword">new</span> ArrayList&lt;User&gt;(); <span class="comment">// 创建List集合</span></span><br><span class="line">listUser.add(user1);</span><br><span class="line">listUser.add(user2);</span><br><span class="line">listUser.add(user3);</span><br><span class="line"></span><br><span class="line">String string = JSON.toJSONString(listUser);<span class="comment">// 创建GSON对象</span></span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#123;&quot;age&quot;:181,&quot;name&quot;:&quot;hibiscidai1&quot;,&quot;phone&quot;:&quot;1234561&quot;&#125;,&#123;&quot;age&quot;:182,&quot;name&quot;:&quot;hibiscidai2&quot;,&quot;phone&quot;:&quot;1234562&quot;&#125;,&#123;&quot;age&quot;:183,&quot;name&quot;:&quot;hibiscidai3&quot;,&quot;phone&quot;:&quot;1234563&quot;&#125;]</span><br></pre></td></tr></table></figure><h4 id="java中的内嵌对象-》JSON-1"><a href="#java中的内嵌对象-》JSON-1" class="headerlink" title="java中的内嵌对象==》JSON"></a>java中的内嵌对象==》JSON</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的内嵌对象==》JSON</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Address addre = <span class="keyword">new</span> Address(<span class="string">"zhengzhou"</span>, <span class="string">"wenhualu"</span>);</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"hibiscidai1"</span>, <span class="string">"1234561"</span>, <span class="number">181</span>, addre);</span><br><span class="line"></span><br><span class="line">String string = JSON.toJSONString(user);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;address&quot;:&#123;&quot;Street&quot;:&quot;wenhualu&quot;,&quot;city&quot;:&quot;zhengzhou&quot;,&quot;street&quot;:&quot;wenhualu&quot;&#125;,&quot;age&quot;:181,&quot;name&quot;:&quot;hibiscidai1&quot;,&quot;phone&quot;:&quot;1234561&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="java中的Map对象-》JSON-1"><a href="#java中的Map对象-》JSON-1" class="headerlink" title="java中的Map对象==》JSON"></a>java中的Map对象==》JSON</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// java中的Map对象==》JSON</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">maps.put(<span class="string">"1"</span>, <span class="string">"hibiscidai"</span>);</span><br><span class="line">maps.put(<span class="string">"2"</span>, <span class="string">"hibiscidai2"</span>);</span><br><span class="line"></span><br><span class="line">String string = JSON.toJSONString(maps);</span><br><span class="line">System.out.println(string);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;2&quot;:&quot;hibiscidai2&quot;,&quot;1&quot;:&quot;hibiscidai&quot;&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON-》java中对象-1"><a href="#JSON-》java中对象-1" class="headerlink" title="JSON==》java中对象"></a>JSON==》java中对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">// JSON==》java中对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"hibiscidai"</span>, <span class="string">"123456"</span>, <span class="number">18</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">Gson gson = <span class="keyword">new</span> Gson(); <span class="comment">// 创建GSON对象</span></span><br><span class="line">String string = gson.toJson(user);</span><br><span class="line"></span><br><span class="line">User user2 = JSON.parseObject(string, User.class); <span class="comment">// json转对象</span></span><br><span class="line">System.out.println(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User [name=hibiscidai, phone=123456, age=18, address=null]</span><br></pre></td></tr></table></figure><h2 id="DOM编程"><a href="#DOM编程" class="headerlink" title="DOM编程"></a>DOM编程</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//创建异步请求对象</span></span><br><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送异步请求</span></span><br><span class="line"><span class="comment">//Struts2请求</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"$&#123;pageContext.request.contextPath&#125;/user/selectAll"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//监听响应</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">//把JSON串转化为JS数组</span></span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line"><span class="comment">//获取table标签对象</span></span><br><span class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">"table"</span>);</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line"><span class="comment">//DOM编程</span></span><br><span class="line"><span class="comment">//创建行</span></span><br><span class="line"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);</span><br><span class="line"><span class="comment">//创建第一个单元格</span></span><br><span class="line"><span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//文本填充第一个单元格(列)</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">document</span>.createTextNode(users[i].id);</span><br><span class="line">td.appendChild(id);<span class="comment">//第一个单元格填充内容</span></span><br><span class="line">tr.appendChild(td);<span class="comment">//第一个单元行填充单元格</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个单元格(列)</span></span><br><span class="line"><span class="keyword">var</span> td1 = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.createTextNode(users[i].username);</span><br><span class="line">td1.appendChild(username);</span><br><span class="line">tr.appendChild(td1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个单元格(列)</span></span><br><span class="line"><span class="keyword">var</span> td2 = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span><br><span class="line"><span class="keyword">var</span> password = <span class="built_in">document</span>.createTextNode(users[i].password);</span><br><span class="line">td2.appendChild(password);</span><br><span class="line">tr.appendChild(td2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将行列接入表格</span></span><br><span class="line">table.appendChild(tr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>对于前台操作的表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"test1()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"table"</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellspading</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"0px"</span></span></span><br><span class="line"><span class="tag"><span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JSON转js对象或数组"><a href="#JSON转js对象或数组" class="headerlink" title="JSON转js对象或数组"></a>JSON转js对象或数组</h3><p>（浏览器内置Jquery，Ext，vue，angluar js）浏览器内置对象，后续使用js框架</p><p><em>JSON.parse(jsonString)</em><br>–&gt;js对象<br>–&gt;ja数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">//定义JSON串</span></span><br><span class="line"><span class="comment">var u = '&#123;"username":"hibiscidai","age":18&#125;';</span></span><br><span class="line"><span class="comment">//吧json串转化为js对象</span></span><br><span class="line"><span class="comment">var user = JSON.parse(u);</span></span><br><span class="line"><span class="comment">alert(user.username);</span></span><br><span class="line"><span class="comment">alert(user.age);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//定义JSON串</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">'["hibiscidai","dai","mujin"]'</span>;</span><br><span class="line"><span class="keyword">var</span> ss = <span class="built_in">JSON</span>.parse(s);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ss.length; i++) &#123;</span><br><span class="line">alert(ss[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AJAX-Struts2-Mybatis整合"><a href="#AJAX-Struts2-Mybatis整合" class="headerlink" title="AJAX+Struts2+Mybatis整合"></a>AJAX+Struts2+Mybatis整合</h3><p><img src="https://img-blog.csdn.net/20180328222529902?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="AJAX+Struts2+Mybatis整合"></p><h4 id="案例：显示所有用户的信息"><a href="#案例：显示所有用户的信息" class="headerlink" title="案例：显示所有用户的信息"></a>案例：显示所有用户的信息</h4><p><img src="https://img-blog.csdn.net/20180328222750730?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2RqNzQx/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="显示所有用户的信息"><br><em>selectAllAction</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">selectAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用业务</span></span><br><span class="line">UserService us = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">List&lt;User&gt; users = us.selectAllUsers();</span><br><span class="line"><span class="comment">// JSON串的转换</span></span><br><span class="line">String jsonString = JSON.toJSONString(users);</span><br><span class="line">HttpServletResponse response = ServletActionContext.getResponse();</span><br><span class="line">response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">out = response.getWriter();</span><br><span class="line">out.print(jsonString);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">out.close();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>前台表单</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"test1()"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">id</span>=<span class="string">"table"</span> <span class="attr">border</span>=<span class="string">"1px"</span> <span class="attr">cellspading</span>=<span class="string">"0px"</span> <span class="attr">cellpadding</span>=<span class="string">"0px"</span> <span class="attr">width</span>=<span class="string">"80%"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">bgcolor</span>=<span class="string">"red"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户ID<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>Ajax函数</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//创建异步请求对象</span></span><br><span class="line"><span class="keyword">var</span> xhr;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送异步请求</span></span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"$&#123;pageContext.request.contextPath&#125;/user/selectAll"</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//监听响应</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">//把JSON串转化为JS数组</span></span><br><span class="line"><span class="keyword">var</span> users = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line"><span class="comment">//获取table标签对象</span></span><br><span class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.getElementById(<span class="string">"table"</span>);</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++) &#123;</span><br><span class="line"><span class="comment">//DOM编程</span></span><br><span class="line"><span class="comment">//创建行</span></span><br><span class="line"><span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);</span><br><span class="line"><span class="comment">//创建第一个单元格</span></span><br><span class="line"><span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span><br><span class="line"><span class="comment">//文本填充第一个单元格</span></span><br><span class="line"><span class="keyword">var</span> id = <span class="built_in">document</span>.createTextNode(users[i].id);</span><br><span class="line">td.appendChild(id);</span><br><span class="line">tr.appendChild(td);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> td1 = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> username = <span class="built_in">document</span>.createTextNode(users[i].username);</span><br><span class="line">td1.appendChild(username);</span><br><span class="line">tr.appendChild(td1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> td2 = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> password = <span class="built_in">document</span>.createTextNode(users[i].password);</span><br><span class="line">td2.appendChild(password);</span><br><span class="line">tr.appendChild(td2);</span><br><span class="line"></span><br><span class="line">table.appendChild(tr);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-02-单例模式</title>
      <link href="/2018/03/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-02-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/14/设计模式-02-单例模式/设计模式02.jpg" alt="设计模式02"></p><p>设计模式专题-02-单例模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-02-单例模式"><a href="#设计模式-02-单例模式" class="headerlink" title="设计模式-02-单例模式"></a>设计模式-02-单例模式</h1><h1 id="单例模式（Singleton-Pattern）"><a href="#单例模式（Singleton-Pattern）" class="headerlink" title="单例模式（Singleton Pattern）"></a>单例模式（Singleton Pattern）</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>一个类仅有一个实例，并提供一个访问它的全局访问点。</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>该类不能被外界任意实例化（构造函数私有化）。</li><li>该类向外界提供一个可以获得该类实例的方法。</li><li>该类只能被实例化一次。</li></ol><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>一个全局使用的类频繁的创建与销毁。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>构造函数是私有的。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>一个党只有一个主席。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>在内存中只有一个实例，减少内存开销。</li><li>避免资源的多重占用。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外边如何实例化。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p><code>getInstance()</code> 方法中需要使用同步锁 <code>synchronized(Singleton.class)</code> 防止多线程同时进入造成 <code>instance</code> 被多次实例化。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingleObject instance = <span class="keyword">new</span> SingleObject();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingleObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleObject <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"hello SingleObject"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//main函数入口简写，下同</span></span><br><span class="line">Main &#123;</span><br><span class="line"><span class="comment">//错误初始化 SingleObject object = new SingleObject();</span></span><br><span class="line">SingleObject object = SingleObject.getInstance();</span><br><span class="line">object.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单例模式的几种实现方式"><a href="#单例模式的几种实现方式" class="headerlink" title="单例模式的几种实现方式"></a>单例模式的几种实现方式</h1><h2 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h2><ul><li>是否Lazy初始化</li></ul><p>是</p><ul><li>是否多线程安全</li></ul><p>否</p><ul><li>描述</li></ul><p>最基本的实现方式，不支持多线程和线程安全，严格来说并不是多线程。</p><ul><li>代码实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h2><ul><li>是否Lazy初始化</li></ul><p>是</p><ul><li>是否多线程安全</li></ul><p>是</p><ul><li>描述</li></ul><p>可在多线程中很好的工作，但是效率低，必须加锁 <code>synchronized</code> 才能保证单例，但加锁会影响效率。<code>getInstance()</code> 的性能对应用程序不是很关键</p><ul><li>代码实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><ul><li>是否Lazy初始化</li></ul><p>否</p><ul><li>是否多线程安全</li></ul><p>是</p><ul><li>描述</li></ul><p>常用方式，但容易产生垃圾对象。基于classloade机制避免了多线程的同步问题，instance在类装载的时候就实例化。</p><ul><li>优点</li></ul><p>没有加锁，执行效率会提高。</p><ul><li>缺点</li></ul><p>类加载时就初始化，浪费内存。</p><ul><li>代码实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双检锁-双重校验锁（DCL，即double-checked-locking）"><a href="#双检锁-双重校验锁（DCL，即double-checked-locking）" class="headerlink" title="双检锁/双重校验锁（DCL，即double-checked locking）"></a>双检锁/双重校验锁（DCL，即double-checked locking）</h2><p>jdk1.5之后支持</p><ul><li>是否Lazy初始化</li></ul><p>是</p><ul><li>是否多线程安全</li></ul><p>是</p><ul><li>描述</li></ul><p>这种方式采用双锁机制，安全且在多线程情况下能保持高性能。 <code>getInstance()</code> 的性能对应用程序很关键。</p><ul><li>代码实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登记式-静态内部类"><a href="#登记式-静态内部类" class="headerlink" title="登记式/静态内部类"></a>登记式/静态内部类</h2><ul><li>是否Lazy初始化</li></ul><p>是</p><ul><li>是否多线程安全</li></ul><p>是</p><ul><li>描述</li></ul><p>可以达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式。只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。<br>该方式利用 classloader 机制保证初始化 instance 时只有一个线程<br>与第三种方式不同的是：第三种方式只要 Singleton 类被装载了，那么 instance 就会被实例化；<br>该方式 Singleton 类被装载了，instance不一定被初始化。<br>因为 SingletonHolder 类没有被主动使用，只有显式调用 getInstance 方法时，才会显示装载 SingletonHolder 类，从而实例化 instacne。</p><ul><li>代码实例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton6</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton6 INSTANCE = <span class="keyword">new</span> Singleton6();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Singleton6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p>jdk1.5之后</p><ul><li>是否Lazy初始化</li></ul><p>否</p><ul><li>是否线程安全</li></ul><p>是</p><ul><li>描述</li></ul><p>这种实现方式还没有被广泛采用，是最佳方法，避免多线程，支持序列化，绝对防止多次实例化。<br>不能通过 reflection attack 来调私有构造方法。</p><ul><li>代码实例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">publc <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">INSTANCE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="关于一些经验"><a href="#关于一些经验" class="headerlink" title="关于一些经验"></a>关于一些经验</h1><p>不建议1 2方式，建议3</p><p>明确实现 lazy loading 时候，使用5</p><p>涉及序列化，用6</p><p>其它特殊需求，考虑4</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式-01-设计模式七大设计原则</title>
      <link href="/2018/03/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2018/03/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-01-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%83%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p><img src="/2018/03/07/设计模式-01-设计模式七大设计原则/设计模式01.jpg" alt="设计模式01"></p><p>设计模式专题-01-设计模式七大设计原则</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-01-设计模式七大设计原则"><a href="#设计模式-01-设计模式七大设计原则" class="headerlink" title="设计模式-01-设计模式七大设计原则"></a>设计模式-01-设计模式七大设计原则</h1><h1 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h1><ul><li>封装/继承/多态</li><li>抽象类</li><li>接口</li><li>静态类</li><li>重载(OverLoad)</li><li>重写/覆写(OverRide)</li></ul><h1 id="设计模式七大原则"><a href="#设计模式七大原则" class="headerlink" title="设计模式七大原则"></a>设计模式七大原则</h1><h2 id="单一职责原则-SRP-Single-Responsibility-Principle"><a href="#单一职责原则-SRP-Single-Responsibility-Principle" class="headerlink" title="单一职责原则(SRP | Single Responsibility Principle)"></a>单一职责原则(SRP | Single Responsibility Principle)</h2><p><strong>一个类只有一个职责</strong></p><h2 id="开闭原则-open-for-extension-closed-for-modification"><a href="#开闭原则-open-for-extension-closed-for-modification" class="headerlink" title="开闭原则(open for extension closed for modification)"></a>开闭原则(open for extension closed for modification)</h2><p><strong>面向对象的核心,对扩展开放对更改封闭</strong></p><ul><li>eg:利用开闭原则计算A+B/A-B</li></ul><p><img src="/2018/03/07/设计模式-01-设计模式七大设计原则/利用开闭原则计算A+B.png" alt="利用开闭原则计算A+B"></p><p><code>pattern01.principle.demo1.ajiab</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Operater</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sum</span> <span class="keyword">extends</span> <span class="title">Operater</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sub</span> <span class="keyword">extends</span> <span class="title">Operater</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (a &gt;= b) &#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> b - a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="里氏代换原则-LSP-Liskow-Substitution-Princciple"><a href="#里氏代换原则-LSP-Liskow-Substitution-Princciple" class="headerlink" title="里氏代换原则(LSP | Liskow Substitution Princciple)"></a>里氏代换原则(LSP | Liskow Substitution Princciple)</h2><p><strong>子类替换掉父类,后程序正常运行且结果跟预测相同才能允许继承,满足里氏代换原则才可以继承</strong></p><p>如果父类的某些方法在子类中发生畸变，建议断开父子关系，拒绝子类有自己的个性</p><ul><li>eg1.<br>正方形长方形的判断<br>当长大于等于宽时，宽+1<br>这时不能继承</li><li>eg2.<br>A依赖B，B改影响A的结果，依赖是单向的。</li></ul><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则()"></a>依赖倒转原则()</h2><p><strong>针对接口编程，不针对实现编<br>高层不依赖底层，依赖抽象</strong></p><ul><li>eg1.<br>电灯和开关应该各自依赖接口（通电协议）</li><li>eg2.<br>司机和车</li></ul><p>修改前类图：</p><p><img src="/2018/03/07/设计模式-01-设计模式七大设计原则/司机和车-修改前.png" alt="司机和车-修改前"></p><p>修改后类图：</p><p><img src="/2018/03/07/设计模式-01-设计模式七大设计原则/司机和车-修改后.png" alt="司机和车-修改后"></p><p>代码：<br>修改前</p><p><code>pattern01.principle.demo2.caranddriver.after</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Benz Run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzDriver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(Benz b)</span> </span>&#123;</span><br><span class="line">b.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Bmw Run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BmwDriver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(Benz b)</span> </span>&#123;</span><br><span class="line">b.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后</p><p><code>pattern01.principle.demo2.caranddriver.before</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Benz Run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bmw</span> <span class="keyword">implements</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Bmw Run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> <span class="keyword">implements</span> <span class="title">IDriver</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">driver</span><span class="params">(ICar car)</span> </span>&#123;</span><br><span class="line">car.run();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IDriver</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">driver</span> <span class="params">(ICar car)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口隔离原则-ISP-Interface-Segregation-Principle"><a href="#接口隔离原则-ISP-Interface-Segregation-Principle" class="headerlink" title="接口隔离原则(ISP | Interface Segregation Principle)"></a>接口隔离原则(ISP | Interface Segregation Principle)</h2><p><strong>客户端不应该依赖它不需要的方法，类间的依赖关系应建立在最小的接口上</strong></p><p>接口功能太多，实现接口可能不会完成全部方法实现（胖接口造成了对接口的污染）即一个接口只做一件事情</p><ul><li>eg1</li></ul><p>接口污染情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Iwork</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">voiid <span class="title">work</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line">publlic <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Iworlk</span> </span>&#123;</span><br><span class="line"><span class="function">publlic <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;<span class="comment">//...&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;<span class="comment">//...&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Roobt</span> <span class="keyword">implements</span> <span class="title">Iwork</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;<span class="comment">//...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理后的代码情况</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IWorkEat</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>; &#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IWorkWork</span> </span>&#123; <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>; &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Workerr</span> <span class="keyword">implements</span> <span class="title">IWorkEat</span> <span class="keyword">implements</span> <span class="title">IWorkWork</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> eat &#123;<span class="comment">//...&#125;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> work &#123;<span class="comment">//...&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">publlic <span class="class"><span class="keyword">class</span> <span class="title">Roobt</span> <span class="keyword">implements</span> <span class="title">IWorkWork</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> work &#123;<span class="comment">//...&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="合成-聚合复用原则-ARP-Composite-Aggregate-Reuse-Priciple"><a href="#合成-聚合复用原则-ARP-Composite-Aggregate-Reuse-Priciple" class="headerlink" title="合成/聚合复用原则(ARP | Composite/Aggregate Reuse Priciple)"></a>合成/聚合复用原则(ARP | Composite/Aggregate Reuse Priciple)</h2><p>构造函数中出现其他类/类使用调用其他类</p><h3 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h3><p>强烈的关联，部分（将）和整体（主）生命周期一样，整体（主）对部分（将）有支配权，，包括<code>创建</code>和<code>销毁</code><br>在构造函数参数或内部有其他类</p><h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>部分和整体的普通关联<br>在类的内部使用或调用其它类</p><h3 id="合成与聚合的区别"><a href="#合成与聚合的区别" class="headerlink" title="合成与聚合的区别"></a>合成与聚合的区别</h3><p>生命周期<br>合成：A死，B也死，且B必在A中使用<br>聚合：A死，B/C不一定结束</p><p>案例：</p><p><img src="/2018/03/07/设计模式-01-设计模式七大设计原则/合成与聚合的区别.png" alt="合成与聚合的区别"></p><h3 id="ARP原则"><a href="#ARP原则" class="headerlink" title="ARP原则"></a>ARP原则</h3><p>尽量使用合成/聚合，而不是使用即继承</p><ul><li>继承的优点<br>新的实现较为容易，因基类的大部功能可以通过继承的关系自动进入子类，修改和扩展继承而来的实现较为容易。</li><li>继承的缺点<br>继承将基类的实现细节暴露给子类，称为”白箱”复用。如果其基类发生改变，那么子类的实现也不得不发生改变。多继承不利于维护。</li></ul><ul><li>ARP优点<ul><li>依赖少，条条框框的限制少</li><li>几乎可以用到任何环境中</li><li>容易实现</li><li>修改和扩展容易</li></ul></li><li>缺点<ul><li>对象多，需要管理</li></ul></li></ul><h2 id="迪米特原则-LOR-The-Law-of-Demeter"><a href="#迪米特原则-LOR-The-Law-of-Demeter" class="headerlink" title="迪米特原则(LOR | The Law of Demeter)"></a>迪米特原则(LOR | The Law of Demeter)</h2><p><strong>不要和陌生人说话，最少知识原则，中介</strong></p><ul><li><p>优点</p><ul><li>相当弱的类耦合</li><li>利于复用</li><li>只要有可能，类就可以设计</li></ul></li><li><p>缺点</p><ul><li>小范围散落</li><li>传递</li><li>引起困惑</li></ul></li></ul><ul><li>应用实例<br>DOT(Date Trausfer Object)数据传输对象</li></ul><h2 id="主要类关系"><a href="#主要类关系" class="headerlink" title="主要类关系"></a>主要类关系</h2><p><img src="/2018/03/07/设计模式-01-设计模式七大设计原则/主要类关系.png" alt="主要类关系"></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>类A的某个成员方法的返回值、形参、局部变量或静态方法的调用，则表示类A引用了类B</p><h3 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h3><p>关联关系有单向关联、双向关联、自身关联、多维关联。</p><p>较依赖关系较强，发生依赖关系的两个类都不会增加属性。</p><h3 id="聚合-1"><a href="#聚合-1" class="headerlink" title="聚合"></a>聚合</h3><p>整体与部分、拥有的关系</p><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>较聚合更强</p><p>同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束。</p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript学习笔记</title>
      <link href="/2018/01/10/2018-01-10-JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/01/10/2018-01-10-JavaScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2018/01/10/2018-01-10-JavaScript学习笔记/JavaScript学习笔记封面.jpg" alt="JavaScript学习笔记封面"></p><p>JavaScript学习笔记，前端基础</p><a id="more"></a><p>[TOC]</p><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="什么是javascript？"><a href="#什么是javascript？" class="headerlink" title="什么是javascript？"></a>什么是javascript？</h2><p>javascript是一种动态网页（网页结构的变化）效果处理的技术，应用在html上。<br>注意：</p><ul><li>javascript与java没有任何关系</li><li><p>javascript client端技术运行在html网页中</p><blockquote><p>编译型编程语言 不能跨平台 运行效率高 C C++<br>解释型编程语言 跨平台 运行效率低 javascript<br>java是先编译后解释的语言 sacal jruby groovy…</p></blockquote></li><li><p>javascript存在浏览器的差异</p><blockquote><p>不同的浏览器在支持javascript预言时，存在微小的不同<br>IE系列 IE浏览器<br>WebKit系列 chrome Firefox safri 360浏览器（支持最标准的javascript语言 经过ww3c组织认证）</p></blockquote></li></ul><h1 id="第一个javascript程序开发"><a href="#第一个javascript程序开发" class="headerlink" title="第一个javascript程序开发"></a>第一个javascript程序开发</h1><p>IDE:MyEclipse Eclipse HBuilder WebStrom Apatana</p><h2 id="javascript的基本语法结构"><a href="#javascript的基本语法结构" class="headerlink" title="javascript的基本语法结构"></a>javascript的基本语法结构</h2><p>HTML页面上<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">Js 代码</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>输出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//javascript的输出</span></span><br><span class="line"><span class="comment">//网页中输出文本内容</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"Hello JavaScript"</span>);</span><br><span class="line"><span class="comment">//弹框的形式输出</span></span><br><span class="line">alert(<span class="string">"Hello JavaScript"</span>);</span><br><span class="line"><span class="comment">//控制台中输出</span></span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"Hello JavaScript"</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="JavaSctipt语法"><a href="#JavaSctipt语法" class="headerlink" title="JavaSctipt语法"></a>JavaSctipt语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>JavaScript是一种弱数据类型的编程语言<br>特点：变量没有类型<br>java：是一种强数据类型的语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String name = <span class="string">"hibiscidai"</span>;</span><br><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>javascript：是一种弱数据类型的语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var name = <span class="string">"hibiscidai"</span>;</span><br><span class="line">var age = <span class="number">10</span>;</span><br><span class="line">age = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><p>-可以不用var关键字声明变量，如果不用var关键字声明变量，该变量将变为全局变量<br>-javascript的语言结束可以不加分号</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>javascript不区分字符与字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明字符串</span></span><br><span class="line">var name = <span class="string">"hibiscidai"</span>;</span><br><span class="line">var n = <span class="string">'hibiscidai'</span>;</span><br><span class="line">alert(name);</span><br><span class="line">alert(n);</span><br></pre></td></tr></table></figure><h4 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h4><p>javascript中不区分整数与浮点数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明数字</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> a1 = <span class="number">10.04</span>;</span><br><span class="line">alert(a);</span><br><span class="line">alert(a1);</span><br></pre></td></tr></table></figure><h4 id="布尔"><a href="#布尔" class="headerlink" title="布尔"></a>布尔</h4><ul><li>true | false</li><li>非0 | 0</li><li>非null | null</li></ul><h4 id="特殊的类型"><a href="#特殊的类型" class="headerlink" title="特殊的类型"></a>特殊的类型</h4><p><code>NAN</code> not a number<br><code>underfine</code><br>如果使用了没有定义的变量，那么这个变量的值为underfine<br>如果定义了变量没有赋初始值，那么之歌变量的值为underfine<br><code>Null</code><br>定义变量后，手动赋值为null</p><h4 id="基本类的特殊操作"><a href="#基本类的特殊操作" class="headerlink" title="基本类的特殊操作"></a>基本类的特殊操作</h4><ul><li>parseInt 把一个字符串类型的数据转化为整数</li><li>typeof 确定变量的实际类型</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"10"</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span>(<span class="built_in">parseInt</span>(a)));</span><br></pre></td></tr></table></figure><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><h3 id="运算符-表达式"><a href="#运算符-表达式" class="headerlink" title="运算符 表达式"></a>运算符 表达式</h3><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><p><code>=</code></p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p><code>+</code>     <code>-</code>     <code>*</code>    <code>/</code>    <code>%</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算数运算符</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">alert(a + b);</span><br><span class="line">alert(a - b);</span><br><span class="line">alert(a * b);</span><br><span class="line">alert(a / b);</span><br><span class="line">alert(a % b);</span><br></pre></td></tr></table></figure><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p><code>&gt;</code>    <code>&lt;</code>    <code>&gt;=</code>    <code>&lt;=</code>    <code>!=</code>    <code>==</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line">alert(a &gt; b);</span><br><span class="line">alert(a &lt; b);</span><br><span class="line">alert(a == b);</span><br><span class="line">alert(a != b);</span><br></pre></td></tr></table></figure><blockquote><p>注意：javascript中对比字符串没有<code>equals</code>方法的，只能用<code>==</code></p></blockquote><p> <code>==</code>运算符 只比较数据内容 而不比较数据类型<br> <code>===</code>运算符 既比较数据的类型 又比较数据的内容</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p><code>&amp;&amp;</code>     <code>||</code>     <code>!</code></p><h3 id="程序的流程控制"><a href="#程序的流程控制" class="headerlink" title="程序的流程控制"></a>程序的流程控制</h3><h4 id="条件分支"><a href="#条件分支" class="headerlink" title="条件分支"></a>条件分支</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> () &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> () &#123;&#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> () &#123;&#125; <span class="keyword">else</span> <span class="keyword">if</span> () &#123;&#125; <span class="keyword">else</span> &#123;&#125;</span><br><span class="line"><span class="keyword">switch</span> (值) &#123;</span><br><span class="line">*java值：byte shrot int char <span class="built_in">String</span> *</span><br><span class="line">*javascript 中没有任何要求*</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span> : xxx <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span> : yyy <span class="keyword">break</span>;</span><br><span class="line">Default:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> () &#123;&#125;</span><br><span class="line">Do &#123;&#125; <span class="keyword">while</span> &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="函数（function-）"><a href="#函数（function-）" class="headerlink" title="函数（function()）"></a>函数（function()）</h1><h2 id="可以通过变量存储函数"><a href="#可以通过变量存储函数" class="headerlink" title="可以通过变量存储函数"></a>可以通过变量存储函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">i, j</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="comment">//通过变量存储函数</span></span><br><span class="line"><span class="keyword">var</span> func = add;</span><br><span class="line">alert(func(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*var result = add(1, 2);</span></span><br><span class="line"><span class="comment">*alert(result);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span> (<span class="params">i, j</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;;</span><br><span class="line">alert(add(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>iii. 匿名作为另一个函数的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">i, j</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i + j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params">func</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = func(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">alert(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line">test1(add);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="定义了函数之后，在调用的时候可以不按照参数表的要求传递数据"><a href="#定义了函数之后，在调用的时候可以不按照参数表的要求传递数据" class="headerlink" title="定义了函数之后，在调用的时候可以不按照参数表的要求传递数据"></a>定义了函数之后，在调用的时候可以不按照参数表的要求传递数据</h2><p>Javascript函数没有重载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//可以不按照参数表的要求调用函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">i, j</span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"Hello JavaScript"</span>);</span><br><span class="line"><span class="keyword">return</span> i + j;    <span class="comment">//1 + underfine = NAN</span></span><br><span class="line">&#125;</span><br><span class="line">alert(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="arguments内置对象，可以获得函数运行时的实际参数内容"><a href="#arguments内置对象，可以获得函数运行时的实际参数内容" class="headerlink" title="arguments内置对象，可以获得函数运行时的实际参数内容"></a>arguments内置对象，可以获得函数运行时的实际参数内容</h2><p>作用：增加函数的健壮性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">arguments</span>.length != <span class="number">2</span>) &#123;</span><br><span class="line">alert(<span class="string">"您输入的参数个数不符合要求"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">typeof</span> i==<span class="string">'number'</span>)&amp;&amp;(<span class="keyword">typeof</span> j==<span class="string">'number'</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> i+j;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">alert(<span class="string">"您输入的参数类型不符合要求"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="对象类型-1"><a href="#对象类型-1" class="headerlink" title="对象类型"></a>对象类型</h1><p>javascript中没有累的概念（类似面向对象的编程语言）</p><h2 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建学生对象 第一种方式</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> Student = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">Student.name = <span class="string">"HibisciDai"</span>;</span><br><span class="line">Student.age = <span class="number">18</span>;</span><br><span class="line">Student.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"this is show 方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">alert(Student.name);</span><br><span class="line">alert(Student.age);</span><br><span class="line">Student.show();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建学生对象 第二种方式</span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">var</span> Student = &#123;</span><br><span class="line">name : <span class="string">"zkf"</span>,</span><br><span class="line">age : <span class="number">18</span>,</span><br><span class="line">show : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"this is show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(Student.name);</span><br><span class="line">alert(Student.age);</span><br><span class="line">Student.show();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>Javascript内部提供的对象</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="不定长"><a href="#不定长" class="headerlink" title="不定长"></a>不定长</h4><h4 id="类型可以不一致，更类似与java中的ArrayList集合"><a href="#类型可以不一致，更类似与java中的ArrayList集合" class="headerlink" title="类型可以不一致，更类似与java中的ArrayList集合"></a>类型可以不一致，更类似与java中的ArrayList集合</h4><p>####数组定义的两种方式：</p><p>（1）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">names[<span class="number">0</span>] = <span class="string">"hibiscidai"</span>;</span><br><span class="line">names[<span class="number">1</span>] = <span class="string">"dj741"</span>;</span><br></pre></td></tr></table></figure></p><p>（2）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"hibiscidai"</span>, <span class="string">"dj741"</span>, <span class="string">"hha"</span>]</span><br></pre></td></tr></table></figure></p><h4 id="数组的API（方法）"><a href="#数组的API（方法）" class="headerlink" title="数组的API（方法）"></a>数组的API（方法）</h4><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:right">内容</th><th style="text-align:center">补充</th></tr></thead><tbody><tr><td style="text-align:left">length</td><td style="text-align:right">获得数组长度</td></tr><tr><td style="text-align:left">reverse</td><td style="text-align:right">倒序数组内容</td></tr><tr><td style="text-align:left">push</td><td style="text-align:right">压栈操作</td><td style="text-align:center">等效于数组添加最后一个元素</td></tr><tr><td style="text-align:left">pop</td><td style="text-align:right">弹栈操作</td><td style="text-align:center">删除的最后一个元素</td></tr><tr><td style="text-align:left">shift</td><td style="text-align:right">移除数组的第一个元素</td></tr><tr><td style="text-align:left">concat</td><td style="text-align:right">把两个数组连接起来（不常用）</td></tr><tr><td style="text-align:left">join</td><td style="text-align:right">把一个数组得元素通过分割符连接成一个字符串（不常用）</td></tr></tbody></table><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>Javascript中的字符串不区分字符与字符串<br>第一种：var name=”hibiscidai”;<br>第二种：var name=new String(“hibiscidai”);</p><p>字符串API：<br>| 方法     |    内容 | 补充 |<br>| :——– | ——–:| :–: |<br>|==或者===|字符串中内容对比|<br>|length|字符中的长度|<br>|charAt|获取某一个位置上的字符|<br>|indexOf()|获取一个子串第一次出现的位置|</p><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//获取当前日期</span></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">alert(d);</span><br><span class="line"><span class="comment">//自定义日期</span></span><br><span class="line"><span class="keyword">var</span> d1 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"2017-12-04"</span>);</span><br><span class="line">alert(d1.getFullYear());<span class="comment">//获取年份</span></span><br><span class="line">alert(d1.getMonth());<span class="comment">//获取月份 javascript中的月份是从0开始算起的</span></span><br><span class="line">alert(d1.getDay());<span class="comment">//获取星期几</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="算术"><a href="#算术" class="headerlink" title="算术"></a>算术</h3><p>Math.random();//获得随机数0-1之间</p><h3 id="HTML对象"><a href="#HTML对象" class="headerlink" title="HTML对象"></a>HTML对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span> /&gt;</span><br><span class="line">javascript中：</span><br><span class="line">input标签对象</span><br><span class="line">input.type获取标签对象中的属性</span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"d"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">div.id</span></span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p>Javascript是事件驱动程序运行的语言</p><h2 id="事件编程中的第一个案例"><a href="#事件编程中的第一个案例" class="headerlink" title="事件编程中的第一个案例"></a>事件编程中的第一个案例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">alert(<span class="string">"我是单机产生的事件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;h1 onclick="test()"&gt;&lt;/</span>h1&gt;</span><br></pre></td></tr></table></figure><h2 id="常见的事件句柄"><a href="#常见的事件句柄" class="headerlink" title="常见的事件句柄"></a>常见的事件句柄</h2><table><thead><tr><th style="text-align:left">句柄</th><th style="text-align:right">事件</th></tr></thead><tbody><tr><td style="text-align:left"><strong>所有标签基本都使用的事件句柄</strong></td></tr><tr><td style="text-align:left">onclick</td><td style="text-align:right">单机事件</td></tr><tr><td style="text-align:left">ondblclick</td><td style="text-align:right">双击事件</td></tr><tr><td style="text-align:left">onmouseover</td><td style="text-align:right">鼠标浮上事件</td></tr><tr><td style="text-align:left">onmouseout</td><td style="text-align:right">鼠标移出事件</td></tr><tr><td style="text-align:left">onmousewheel</td><td style="text-align:right">鼠标滑动滚轮触发事件</td></tr><tr><td style="text-align:left">onmousedown</td><td style="text-align:right">鼠标按下</td></tr><tr><td style="text-align:left">onmouseup</td><td style="text-align:right">鼠标弹起</td></tr><tr><td style="text-align:left">onmousemove</td><td style="text-align:right">鼠标移动</td></tr><tr><td style="text-align:left"><strong>用于body标签中的事件句柄</strong></td></tr><tr><td style="text-align:left">onload</td><td style="text-align:right">在整张Html页面内容全部显示后，自动运行该事件</td></tr><tr><td style="text-align:left">onresize</td><td style="text-align:right">调整浏览器窗口大小的时候触发</td></tr><tr><td style="text-align:left">onscroll</td><td style="text-align:right">滑动滚轮或者拖动浏览器右侧的进度条时触发</td></tr><tr><td style="text-align:left"><strong>用于表单中的相关事件句柄</strong></td></tr><tr><td style="text-align:left">onblur</td><td style="text-align:right">丢失焦点事件</td></tr><tr><td style="text-align:left">onfocus</td><td style="text-align:right">获取焦点事件</td></tr><tr><td style="text-align:left">onkeydown</td><td style="text-align:right">键盘按下触发的事件</td></tr><tr><td style="text-align:left">onkeyup</td><td style="text-align:right">键盘弹起触发的事件</td></tr><tr><td style="text-align:left">onchange</td><td style="text-align:right">针对于 &lt; select &gt;  当下拉列表中的内容改变时触发</td></tr><tr><td style="text-align:left">onsubmit</td><td style="text-align:right">表单提交时触发的事件</td></tr></tbody></table><h2 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h2><h3 id="事件源：产生事件的标签"><a href="#事件源：产生事件的标签" class="headerlink" title="事件源：产生事件的标签"></a>事件源：产生事件的标签</h3><h3 id="事件：单机-双击-鼠标以上。。。"><a href="#事件：单机-双击-鼠标以上。。。" class="headerlink" title="事件：单机  双击  鼠标以上。。。"></a>事件：单机  双击  鼠标以上。。。</h3><h3 id="监听-事件句柄触发后执行的程序"><a href="#监听-事件句柄触发后执行的程序" class="headerlink" title="监听  事件句柄触发后执行的程序"></a>监听  事件句柄触发后执行的程序</h3><h3 id="如何获得事件"><a href="#如何获得事件" class="headerlink" title="如何获得事件"></a>如何获得事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">alert(event);</span><br><span class="line">alert(<span class="string">"我是单机产生的事件"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;h1 onclick="test(event)"&gt;点击我&lt;/</span>h1&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure><p>获得了事件后就可以获取事件的类型</p><p><code>Event.type</code></p><p>获得事件产生的坐标</p><p><code>Event.clientX</code><br><code>Event.clientY</code></p><h3 id="获取事件的源头-标签对象"><a href="#获取事件的源头-标签对象" class="headerlink" title="获取事件的源头(标签对象)"></a>获取事件的源头(标签对象)</h3><p><code>Event.target</code></p><h2 id="阻止标签的默认行为"><a href="#阻止标签的默认行为" class="headerlink" title="阻止标签的默认行为"></a>阻止标签的默认行为</h2><h3 id="表单标签的默认行为"><a href="#表单标签的默认行为" class="headerlink" title="表单标签的默认行为"></a>表单标签的默认行为</h3><p>默认提交  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onsubmit=<span class="string">"return true"</span>;</span><br></pre></td></tr></table></figure><p>阻止</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onsubmit=<span class="string">"return false"</span>;</span><br></pre></td></tr></table></figure><h3 id="超级链接的默认行为"><a href="#超级链接的默认行为" class="headerlink" title="超级链接的默认行为"></a>超级链接的默认行为</h3><p>默认发送请求<br>阻止</p><figure class="highlight plain"><figcaption><span>href</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 事件冒泡(buble)</span><br><span class="line"></span><br><span class="line">特点：内部标签产生的事件，对外层标签产生了影响</span><br><span class="line">解决：event.stopPropagation();</span><br><span class="line"></span><br><span class="line"># DOM[document object model | 文档对象模型]</span><br><span class="line"></span><br><span class="line">## 什么是DOM（一种模型 + 一组API）</span><br><span class="line"></span><br><span class="line">DOM把一个HTML网页看成一棵树，每一个HTML标签看成一个对象</span><br><span class="line"></span><br><span class="line">![DOM模型](http://img.blog.csdn.net/20180308223119344?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)</span><br><span class="line"></span><br><span class="line">一组API：获得这棵树上边的HTML标签对象</span><br><span class="line"></span><br><span class="line">##作用：通过DOM的模型及相关方法，可以让HTML网页结构动起来</span><br><span class="line"></span><br><span class="line">##使网页结构动起来的手段：</span><br><span class="line"></span><br><span class="line">###改变标签的属性</span><br><span class="line"></span><br><span class="line">如何获取标签对象（语法：标签 对象.属性）</span><br><span class="line"></span><br><span class="line">```Javascript</span><br><span class="line">//第一种</span><br><span class="line">event.target</span><br><span class="line">//第二种</span><br><span class="line">document.getElementById(&quot;div&quot;);</span><br><span class="line">---------</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function tclick() &#123;</span><br><span class="line">var div = document.getElementById(&quot;div&quot;);</span><br><span class="line">alert(div);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;div&quot; title=&quot;this is title&quot;&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">//第三种this（代表当前对象）</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function tclick(input) &#123;</span><br><span class="line">alert(input);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;input type=&quot;button&quot; onclick=&quot;tclick(this)&quot; value=&quot;click&quot; /&gt;</span><br></pre></td></tr></table></figure><p>###改变标签的样式（语法：标签 对象.style.css 属性）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取标签对象</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"div"</span>);</span><br><span class="line">div.style.color = <span class="string">"white"</span>;</span><br><span class="line">div.style.backgroundColor = <span class="string">"red"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>javascript动态修改样式时，如果css标签属性有 - ，则需把 - 去掉，其后的字母对象</em></p><p>###特殊属性：</p><table><thead><tr><th style="text-align:left">句柄</th><th style="text-align:right">事件</th></tr></thead><tbody><tr><td style="text-align:left">.parentNode</td><td style="text-align:right">父亲对象</td></tr><tr><td style="text-align:left">.childNodes</td><td style="text-align:right">所有的孩子对象</td></tr><tr><td style="text-align:left">.firstChild</td><td style="text-align:right">第一个孩子对象</td></tr><tr><td style="text-align:left">.lastChild</td><td style="text-align:right">最后一个孩子</td></tr><tr><td style="text-align:left">.nextSibling</td><td style="text-align:right">下一个兄弟</td></tr><tr><td style="text-align:left">.previousSibling</td><td style="text-align:right">上一个兄弟</td></tr></tbody></table><p><em>注意：回车代表着一个标签对象</em><br>获取一组标签对象<br>Var   divs=  document.getElementByTagName(“div”);<br>获取文本节点的内容   .data  或者 .nodeValue</p><p>##增加新的标签内容</p><p>###新建标签</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure><p>###把创建出的标签放置正对应的位置上</p><table><thead><tr><th style="text-align:left">句柄</th><th style="text-align:right">事件</th></tr></thead><tbody><tr><td style="text-align:left">parentNode.appendChild(“div”)</td><td style="text-align:right">把对应的标签对象放置在最后一个孩子所处的位置</td></tr><tr><td style="text-align:left">parentNode.insertBefore(new,old)</td><td style="text-align:right">把对应的标签对象放置在旧的标签对象的前边</td></tr><tr><td style="text-align:left">parentNode.replaceChild(new,old)</td><td style="text-align:right">用新标签替换旧的标签</td></tr><tr><td style="text-align:left">parentNode.removeChild(old)</td><td style="text-align:right">删除一个标签</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建div标签对象</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="comment">//把创建出的标签对象放置在对应的位置</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.getElementById(<span class="string">"body"</span>);</span><br><span class="line"><span class="comment">//把新的标签对象添加到最后一个孩子所处的位置上</span></span><br><span class="line">body.appendChild(div);</span><br><span class="line"><span class="comment">//获取旧的input标签对象</span></span><br><span class="line"><span class="keyword">var</span> input = <span class="built_in">document</span>.getElementById(<span class="string">"input"</span>);</span><br><span class="line"><span class="comment">//把新的标签对象添加到原有标签对象的前边</span></span><br><span class="line">body.insertBefore(div, input);</span><br><span class="line">body.replaceChild(div, input);</span><br><span class="line">body.removeChild(input);</span><br></pre></td></tr></table></figure><p>##创建文本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">creatediv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//创建文本内容</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.creatTextNode(<span class="string">"hibiscidai"</span>);</span><br><span class="line"><span class="comment">//创建div标签对象</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line"><span class="comment">//把创建出的标签对象放置在对应的位置</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.getElementById(<span class="string">"body"</span>);</span><br><span class="line"><span class="comment">//把文本内容放入目标div标签的内部</span></span><br><span class="line">div.appendChild(text);</span><br><span class="line"><span class="comment">//把新的标签对象添加到最后一个孩子所处的位置上</span></span><br><span class="line">body.appendChild(div);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##innerHTML方法（语法：标签对象.innerHTML方法）</p><p>方法作用：</p><ol><li>可以获得一个标签内部所有的内容</li><li>可以为一个标签内部   插入一组新的标签或者文本</li></ol><p><em>注意：innerHTML在添加新的标签时，会把原有标签内部的内容替换掉</em></p><p>#BOM（Browser Object Model 浏览器对象模型）</p><p>思想：浏览器相关内容 看做对象</p><p><img src="http://img.blog.csdn.net/20180312164029916?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="BOM"></p><p>##window对象 （浏览器窗口）</p><table><thead><tr><th style="text-align:left">句柄</th><th style="text-align:right">事件</th><th style="text-align:right">备注</th></tr></thead><tbody><tr><td style="text-align:left">window.alert();</td><td style="text-align:right">提示框</td><td style="text-align:right">window独享的方法或属性 window. 可以省略</td></tr><tr><td style="text-align:left">window.confirm()</td><td style="text-align:right">确认框</td><td style="text-align:right">方法存在返回值 确定true 取消false</td></tr><tr><td style="text-align:left">window.open()</td><td style="text-align:right">打开一个新的页面</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">window.setTimeOut()</td><td style="text-align:right">在一定时间之后自动执行某一种功能</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">.nextSibling</td><td style="text-align:right">下一个兄弟</td></tr><tr><td style="text-align:left">.previousSibling</td><td style="text-align:right">上一个兄弟</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例："window."可以取消</span></span><br><span class="line">&lt;a href=<span class="string">"xxx/deleter.action"</span> onclick=<span class="string">"return confirm('您是否确定删除这条数据')"</span>&gt;删除&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/setTimeOut返回值 代表此方法的唯一标示</span></span><br><span class="line"><span class="regexp">var flag = window.setTimeout(function () &#123;</span></span><br><span class="line"><span class="regexp">alert("您好");</span></span><br><span class="line"><span class="regexp">&#125;，2000);/</span><span class="regexp">/第一个参数 执行的功能函数 第二个参数 设置的时间 返回值代表此方法的唯一标识</span></span><br><span class="line"><span class="regexp">window.clearTimeout(flag);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/Window.clearTimeout(唯一标示) 取消方法的调用</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/Window.setInterval() 每隔一段时间 自动执行一种功能</span></span><br><span class="line"><span class="regexp">var flag = window.setInterval(function () &#123;</span></span><br><span class="line"><span class="regexp">alert("您好");</span></span><br><span class="line"><span class="regexp">&#125;,3000);/</span><span class="regexp">/经过设置的事件周期 执行某一种功能</span></span><br><span class="line"><span class="regexp">window.clearInterval(flag);</span></span><br></pre></td></tr></table></figure><p>##document 对象 （网页对象）</p><p><code>document.write()</code><br><code>document.getElementById()</code><br><code>document.getElementByTagName()</code><br><code>document.createElement()</code>document.createTextNode()<code></code>form对象<code>代表form标签</code>form.submit()` 动态提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//获取form表单对象</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"form"</span>);</span><br><span class="line"><span class="comment">//动态提交表单</span></span><br><span class="line">form.submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##select对象 &lt; select 标签 &gt; |option对象 &lt; option 标签 &gt;</p><table><thead><tr><th style="text-align:left">句柄</th><th style="text-align:right">事件</th></tr></thead><tbody><tr><td style="text-align:left">Select.options</td><td style="text-align:right">获取所有的此select标签下的option标签对象</td></tr><tr><td style="text-align:left">option标签对象.text</td><td style="text-align:right">获取option标签中的文本内容</td></tr><tr><td style="text-align:left">option标签对象.value</td><td style="text-align:right">获取option标签中的value值</td></tr><tr><td style="text-align:left">select.selectedIndex</td><td style="text-align:right">获得当前被选中的option标签 在options数组中的下标</td></tr></tbody></table><p>###级联菜单</p><p><img src="http://img.blog.csdn.net/20180312171855657?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="级联菜单"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"gbk"</span> /&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*   </span></span><br><span class="line"><span class="comment">//获取此select标签下的所有的option标签</span></span><br><span class="line"><span class="comment">var  options=select.options;</span></span><br><span class="line"><span class="comment">for(var i=0;i&lt;options.length;i++)&#123;</span></span><br><span class="line"><span class="comment">   //alert(options[i].text);</span></span><br><span class="line"><span class="comment">   alert(options[i].value);</span></span><br><span class="line"><span class="comment">   &#125; */</span></span><br><span class="line"><span class="comment">//获取用户选中的option的对象的下标</span></span><br><span class="line"><span class="comment">//获取用户所选中的option标签对象</span></span><br><span class="line"><span class="comment">// alert(select.options[select.selectedIndex].text);</span></span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line"><span class="keyword">var</span> data = &#123;</span><br><span class="line">北京 : [ <span class="string">'海淀'</span>, <span class="string">'丰台'</span>, <span class="string">'朝阳'</span> ],</span><br><span class="line">上海 : [ <span class="string">'浦东'</span>, <span class="string">'浦西'</span>, <span class="string">'陆家嘴'</span> ],</span><br><span class="line">郑州 : [ <span class="string">'金水'</span>, <span class="string">'二七'</span>, <span class="string">'管城'</span> ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//获取用户选中的城市</span></span><br><span class="line"><span class="comment">//获取select标签对象</span></span><br><span class="line"><span class="keyword">var</span> select = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line"><span class="comment">//获取用户所选中的文本对应的下属所有的区</span></span><br><span class="line"><span class="keyword">var</span> sections = data[select.options[select.selectedIndex].text];</span><br><span class="line"><span class="comment">//获取二级下拉列表的标签对象</span></span><br><span class="line"><span class="keyword">var</span> ss = <span class="built_in">document</span>.getElementById(<span class="string">"ss"</span>);</span><br><span class="line"><span class="comment">//每一次清空数据</span></span><br><span class="line">ss.innerHTML = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; sections.length; i++) &#123;</span><br><span class="line"><span class="comment">//创建文本</span></span><br><span class="line"><span class="keyword">var</span> text = <span class="built_in">document</span>.createTextNode(sections[i]);</span><br><span class="line"><span class="comment">//创建option标签 </span></span><br><span class="line"><span class="keyword">var</span> option = <span class="built_in">document</span>.createElement(<span class="string">"option"</span>);</span><br><span class="line"><span class="comment">//把对应的文本内容填充到option标签中</span></span><br><span class="line">option.appendChild(text);</span><br><span class="line"><span class="comment">//把对应的option标签添加到对应的select下拉列表中</span></span><br><span class="line">ss.appendChild(option);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body onload=<span class="string">"test1()"</span>&gt;</span><br><span class="line">&lt;select id=<span class="string">"city"</span> onchange=<span class="string">"test1()"</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">"1"</span>&gt;北京&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option value="2"&gt;上海&lt;/</span>option&gt;</span><br><span class="line">&lt;option value=<span class="string">"3"</span>&gt;郑州&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>select&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">"ss"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--  &lt;input type="button" value="点击我" onclick="test1()"&gt; --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>##location对象（地址栏）</p><p>Location.href=”/XXXAction”  通过location发送请求</p><p>##History对象（前进 后退按钮）</p><p>history.back();后退<br>history.forward();前进</p><p>#js与jsp整合</p><p>a）js与jsp中 与在html网页中的应用一样<br>b）js中直接使用 jstl标签或者表达式以及struts标签</p><p>#外部js文件</p><p><img src="http://img.blog.csdn.net/20180312172255361?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="外联js文件"><br>（a）定义js文件<br>（b）外部文件的引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> scr=<span class="string">"js/my.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><em>设置引入外部文件编码格式[charset=””]</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> charset=<span class="string">"gbk"</span> scr=<span class="string">"js/my.js"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小米路由器3实现锐捷认证[免刷固件]</title>
      <link href="/2017/12/22/2017-12-22-%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A83%E5%AE%9E%E7%8E%B0%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81/"/>
      <url>/2017/12/22/2017-12-22-%E5%B0%8F%E7%B1%B3%E8%B7%AF%E7%94%B1%E5%99%A83%E5%AE%9E%E7%8E%B0%E9%94%90%E6%8D%B7%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<p><img src="/2017/12/22/2017-12-22-小米路由器3实现锐捷认证/小米路由器3实现锐捷认证封面.jpg" alt="小米路由器3实现锐捷认证"></p><p>小米路由器3实现锐捷认证，寝室校园的稳定wifi</p><a id="more"></a><p>[TOC]</p><h1 id="前言（可跳过）"><a href="#前言（可跳过）" class="headerlink" title="前言（可跳过）"></a>前言（可跳过）</h1><p>博主在4月份写过一篇刷路由固件的博，当时由于硬件限制导致想法破产。<a href="http://blog.csdn.net/dj741/article/details/69683896" target="_blank" rel="noopener">路由器刷固件 | MERCURY-MW305R | 路由器实现锐捷认证</a></p><p>今年小米年终大促的时候入手了一个小米路由器3<br><img src="http://img.blog.csdn.net/20171222134640860?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="订单"><br>手动滑稽</p><p>网传小米路由器mini是可以实现刷固件，但是小米路由器3刷固件的资料非常少。<br>两个路由主要参数区别如下：<br><img src="http://img.blog.csdn.net/20171222120600980?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="小米路由器3-小米路由器mini-硬件对比"></p><p>可以看到M3的ROM是SLC，Mini的ROM是SPI，这个就导致了M3路由固件的难以刷。<br>目前搜到M3成功刷机的案例是一俄国论坛的大神自己封装的脚本刷成了华硕RT-N56U的固件。</p><p>原博客：<a href="https://shopper.life/proshivka-xiaomi-mi-wifi-router-3-v-asus-rt-n56u-skriptom-vmware-padavan-prometheus-8793.html" target="_blank" rel="noopener">Прошивка Xiaomi Mi WiFi router 3 в ASUS RT-N56U скриптом Vmware Padavan Prometheus</a><br>恩山博客：<a href="http://www.right.com.cn/forum/thread-189694-1-1.html" target="_blank" rel="noopener">小米路由器3刷华硕RT-N56U固件 </a></p><p>本篇不在商讨小米路由器3刷固件（刷机需谨慎），保持原生小米路由器系统的同时实现锐捷认证。</p><h1 id="所需技术（你需要了解的原理）"><a href="#所需技术（你需要了解的原理）" class="headerlink" title="所需技术（你需要了解的原理）"></a>所需技术（你需要了解的原理）</h1><h2 id="SSH（安全外壳协议）"><a href="#SSH（安全外壳协议）" class="headerlink" title="SSH（安全外壳协议）"></a>SSH（安全外壳协议）</h2><p><em>SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。SSH最初是UNIX系统上的一个程序，后来又迅速扩展到其他操作平台。SSH在正确使用时可弥补网络中的漏洞。SSH客户端适用于多种平台。几乎所有UNIX平台—包括HP-UX、Linux、AIX、Solaris、Digital UNIX、Irix，以及其他平台，都可运行SSH。</em>(来自百度)</p><h2 id="WinSCP"><a href="#WinSCP" class="headerlink" title="WinSCP"></a>WinSCP</h2><p><em>WinSCP是一个Windows环境下使用SSH的开源图形化SFTP客户端。同时支持SCP协议。它的主要功能就是在本地与远程计算机间安全的复制文件。.winscp也可以链接其他系统,比如linux系统</em>（来自百度）<img src="http://img.blog.csdn.net/20171222121721186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="WinSCP登录界面"></p><h2 id="putty"><a href="#putty" class="headerlink" title="putty"></a>putty</h2><p>远程管理Linux系统。<br><img src="http://img.blog.csdn.net/20171222121813787?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="putty登录界面"></p><h2 id="mentohust"><a href="#mentohust" class="headerlink" title="mentohust"></a>mentohust</h2><p>具体百度，这个知道刷固件的都清楚。<br>可以理解为linux上的锐捷认证。<br>mentohust命令参数：<br><img src="http://img.blog.csdn.net/20171222135017954?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="mentohust命令参数"></p><h2 id="路由器基本原理"><a href="#路由器基本原理" class="headerlink" title="路由器基本原理"></a>路由器基本原理</h2><p>路由上ROM里其实是个linux系统，固件就是升级系统。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="锐捷认证三大难点："><a href="#锐捷认证三大难点：" class="headerlink" title="锐捷认证三大难点："></a>锐捷认证三大难点：</h2><p>（1）静态ip<br>（2）口令认证<br>（3）绑定单网卡</p><p>这三个限制第一限制了传统路由的设置，限制了主机的一些功能（如主机无线网卡、虚拟机网络配置等）。</p><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>所以为了突破这些限制，主要思路就是</p><p><strong>用路由器代替电脑进行锐捷认证</strong></p><p>实际是网络认证就是看一个设备的mac跟ip和口令，路由完全可以替代一个pc设备进行认证。</p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>那么传统路由器LAN口的三种上网方式：<br>（1）PPPoe拨号上网<br>（2）DHCP<br>（3）静态ip<br>但是锐捷需要两项同时满足条件。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>刷固件是一种，将一些功能直接继承到路由系统，即管理界面，直接设置认证就行，但是这个要求对路由构造原理还有linux机制非常清楚才可以搞定，而且路由刷成砖的几率高，详情参考前言的博客。</p><p><strong>在路由器原生系统中写入mentohust，将路由器的网络物理信息设置成本机的网络物理信息，在pc机上远程连接到路由器linux系统使用mentohust认证即可。</strong></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="升级小米路由器3开发版官方固件"><a href="#升级小米路由器3开发版官方固件" class="headerlink" title="升级小米路由器3开发版官方固件"></a>升级小米路由器3开发版官方固件</h2><p>声明下目前小米3开发版固件到miwifi_r3_firmware_65c8a_2.21.166.bin<br>但是SSH权限开启的目前确定的开发版本是miwifi_r3_all_55ac7_2.11.20.bin</p><p>官方下载地址<a href="http://www1.miwifi.com/miwifi_download.html" target="_blank" rel="noopener">MiWiFi下载</a></p><h2 id="设置路由"><a href="#设置路由" class="headerlink" title="设置路由"></a>设置路由</h2><p>初始化路由<br>登录路由后台<br>调节路由LAN口上网方式为静态ip，填写校园网信息<br>设置本机ip自动获取</p><h2 id="开启SSH权限"><a href="#开启SSH权限" class="headerlink" title="开启SSH权限"></a>开启SSH权限</h2><p>用浏览器登陆小米路由器后台<br>地址栏一般是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=[你的stok]/web/home#router</span><br></pre></td></tr></table></figure><p>改成如下并回车：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=[你的stok]/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bnvram%20set%20ssh%5Fen%3D1%3B%20nvram%20commit</span><br></pre></td></tr></table></figure><p>继续：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=[你的stok]/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3Bsed%20%2Di%20%22%3Ax%3AN%3As%2Fif%20%5C%5B%2E%2A%5C%3B%20then%5Cn%2E%2Areturn%200%5Cn%2E%2Afi%2F%23tb%2F%3Bb%20x%22%20%2Fetc%2Finit.d%2Fdropbear</span><br></pre></td></tr></table></figure><p>继续:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=[你的stok]/api/xqnetwork/set_wifi_ap?ssid=tianbao&amp;encryption=NONE&amp;enctype=NONE&amp;channel=1%3B%2Fetc%2Finit.d%2Fdropbear%20start</span><br></pre></td></tr></table></figure><p>继续：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.31.1/cgi-bin/luci/;stok=[你的stok]/api/xqsystem/set_name_password?oldPwd=[你当前的后台管理密码]&amp;newPwd=[新的后台管理密码]</span><br></pre></td></tr></table></figure><p>每次执行代码请等待执行完成后再进行下一次操作</p><p>前三次代码执行后出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">“&#123;&quot;msg&quot;:&quot;未能连接到指定WiFi(Probe timeout)&quot;,&quot;code&quot;:1616&#125;”</span><br></pre></td></tr></table></figure><p>最后一次代码出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:0&#125;”</span><br></pre></td></tr></table></figure></p><p>代表获取SSH成功</p><p>新的后台管理密码同样为ssh远程的root用户密码</p><h2 id="写入mentohust"><a href="#写入mentohust" class="headerlink" title="写入mentohust"></a>写入mentohust</h2><p>使用WinSCP登入小米的linux<br><img src="http://img.blog.csdn.net/20171222132800089?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="使用WinSCP登入小米的linux"><br>将mentohust上传至/etc目录下<br><img src="http://img.blog.csdn.net/20171222132951027?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="设置命令进行认证"><a href="#设置命令进行认证" class="headerlink" title="设置命令进行认证"></a>设置命令进行认证</h2><p>打开putty登入小米路由器linux系统<br>用户名root，密码为新设置的密码<br><img src="http://img.blog.csdn.net/20171222133238553?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="登录putty"></p><p>输入命令进行登录即可</p><p>获取权限命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /etc/mentohust</span><br></pre></td></tr></table></figure><p>登录命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/mentohust -u[用户名] -p[密码] -neth0.2 -i[ip] -g[网关] -m[子网掩码] -s[DNS] -b1 -w</span><br></pre></td></tr></table></figure></p><p>这个时候其实就能上网了</p><h2 id="路由设置开机自动认证"><a href="#路由设置开机自动认证" class="headerlink" title="路由设置开机自动认证"></a>路由设置开机自动认证</h2><p><strong>WinSCP写入sh文件用于保存命令</strong><br>内容即为登录命令</p><p><strong>putty获取权限命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /etc/mentohust.sh</span><br></pre></td></tr></table></figure><p>使用WinSCP工具打开etc目录下的<strong>profile文件</strong>（鼠标双击就行），在末尾加入下面的代码保存、关闭。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/mentohust.sh</span><br></pre></td></tr></table></figure><p><img src="http://img.blog.csdn.net/20171222134117661?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="写入profile文件"></p><p>使用WinSCP工具打开etc目录下的<strong>rc.local文件</strong>，在exit 0前面加入下面四行代码。你上面参数怎么设置的，在这里就怎么设置，你上面的参数改了，这里一定改过来！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /etc/mentohust</span><br><span class="line"></span><br><span class="line">chmod a+x /etc/mentohust.sh</span><br><span class="line"></span><br><span class="line">/etc/mentohust -u[用户名] -p[密码] -neth0.2 -i[ip] -g[网关] -m[子网掩码] -s[DNS] -b1 -w</span><br><span class="line"></span><br><span class="line">/etc/mentohust.sh</span><br></pre></td></tr></table></figure></p><p><img src="http://img.blog.csdn.net/20171222134345827?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="写入rc.local"></p><p>路由每次开机就可以自动认证了</p><h2 id="细节强调"><a href="#细节强调" class="headerlink" title="细节强调"></a>细节强调</h2><p>本机网络信息即为校园网注册信息，包括：ip地址、子网掩码、默认网关、首先DNS地址、备用DNS地址、MAC地址<br>（1）路由器设置为静态ip，mac地址设置为本机mac。</p><p>在windows 的cmd窗口输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all</span><br></pre></td></tr></table></figure><p>可以显示本机的网络配置</p><p>（2）本机ip设置为自动获取。<br>（3）传统路由器后台管理地址为192.168.1.1，小米路由器的后台管理地址为192.168.31.1。<br>（4）所需工具全部在github上，地址：<a href="https://github.com/HibisciDai/wangpan/tree/master/%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener">所需工具</a>。<br>（5）密码长度过短不能通过验证，导致无法使用putty或WinSCP。<br>（6）输入密码认证的时候校园网网线要在Lan口上插入。</p><h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>保证原生的小米路由，校园网连接。<br><img src="http://img.blog.csdn.net/20171222134748303?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="测速"></p>]]></content>
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 硬件 </tag>
            
            <tag> 路由器 </tag>
            
            <tag> 锐捷 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyBatis框架</title>
      <link href="/2017/11/19/2017-11-19-MyBatis%E6%A1%86%E6%9E%B6/"/>
      <url>/2017/11/19/2017-11-19-MyBatis%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p><img src="/2017/11/19/2017-11-19-MyBatis框架/MyBatis框架封面.jpg" alt="MyBatis框架封面"></p><p>MyBatis框架，基础库框架</p><a id="more"></a><p>[TOC]</p><p><em>参考网站</em><br><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">mybatis中文文档</a><br><a href="https://github.com/tuguangquan/mybatis" target="_blank" rel="noopener">mybatis源码中文注释</a></p><h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h1 id="1-MyBatis框架引言"><a href="#1-MyBatis框架引言" class="headerlink" title="1 MyBatis框架引言"></a>1 MyBatis框架引言</h1><h2 id="1-1-MyBatis框架的基本概念"><a href="#1-1-MyBatis框架的基本概念" class="headerlink" title="1-1 MyBatis框架的基本概念"></a>1-1 MyBatis框架的基本概念</h2><p>MyBatis是一个持久层框架，完成对数据库的访问(CRUD)</p><h2 id="1-2-MyBatis框架与JDBC对比"><a href="#1-2-MyBatis框架与JDBC对比" class="headerlink" title="1-2 MyBatis框架与JDBC对比"></a>1-2 MyBatis框架与JDBC对比</h2><p>jdbc访问和操作数据库存在的问题：</p><ul><li>大量的代码冗余</li><li>手工处理ORM（麻烦）</li><li>没有对数据库进行优化（Cache）</li></ul><p>解决JDBC访问和操作数据库存在 的问题，是对原有JDBC技术的封装。</p><h2 id="1-3-MyBatis框架的核心编程思路"><a href="#1-3-MyBatis框架的核心编程思路" class="headerlink" title="1-3 MyBatis框架的核心编程思路"></a>1-3 MyBatis框架的核心编程思路</h2><p><img src="http://img.blog.csdn.net/20171117133402543?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="MyBatis的核心开发思路.png"></p><p>在原来的JDBC三层模型汇总，先进行书写DAO接口后实现DAO实现类，MyBatis的解决思路是使用mapper xml类型文件代替DAO实现类的功能。</p><h1 id="2-第一个MyBatis程序的开发-HelloWorld"><a href="#2-第一个MyBatis程序的开发-HelloWorld" class="headerlink" title="2 第一个MyBatis程序的开发(HelloWorld)"></a>2 第一个MyBatis程序的开发(HelloWorld)</h1><h2 id="2-1-环境搭建（OpenSource）"><a href="#2-1-环境搭建（OpenSource）" class="headerlink" title="2-1 环境搭建（OpenSource）"></a>2-1 环境搭建（OpenSource）</h2><p><em>i.Ibatis是MyBatis的前身，apache组织</em><br><em>ii.IBatis从3.0开始改名为MyBatis   google  code</em><br><em>iii.MyBatis 属于GitHub</em></p><h3 id="2-1-1-导入jar包"><a href="#2-1-1-导入jar包" class="headerlink" title="2-1-1 导入jar包"></a>2-1-1 导入jar包</h3><ul><li>MyBatis的核心jar包</li><li>第三方依赖jar</li><li>相关数据库的驱动jar</li></ul><h3 id="2-1-2-引入配置文件"><a href="#2-1-2-引入配置文件" class="headerlink" title="2-1-2 引入配置文件"></a>2-1-2 引入配置文件</h3><h4 id="2-1-2-1-log4j-properties-可选"><a href="#2-1-2-1-log4j-properties-可选" class="headerlink" title="2-1-2-1 log4j.properties[可选]"></a>2-1-2-1 log4j.properties[可选]</h4><p>log4日志文件放置在src目录下</p><h4 id="2-1-2-2-MyBatis-config-xml"><a href="#2-1-2-2-MyBatis-config-xml" class="headerlink" title="2-1-2-2 MyBatis-config.xml"></a>2-1-2-2 MyBatis-config.xml</h4><p>建议放置在src目录下<br>配置的是MyBatis运行的相关参数</p><h4 id="2-1-2-3-Mapper文件"><a href="#2-1-2-3-Mapper文件" class="headerlink" title="2-1-2-3 Mapper文件"></a>2-1-2-3 Mapper文件</h4><p>实现DAO接口<br>位置建议xxxDao接口放在同一目录下</p><h3 id="2-1-3-初始化配置"><a href="#2-1-3-初始化配置" class="headerlink" title="2-1-3 初始化配置"></a>2-1-3 初始化配置</h3><p>MyBatis-config.xml配置</p><p>oracle数据库配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "mybatis-3-config.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"oracle"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"oracle.jdbc.OracleDriver"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"hr"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"hr"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"com/baizhi/dao/UserMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>&lt; environments default=”oracle”&gt;</em>  — <em>默认环境</em><br><em>&lt; environment id=”oracle”&gt;</em> — <em>环境的唯一标识</em><br><em>&lt; transactionManager type=”JDBC”&gt;</em> — <em>采用JDBC的事务控制</em><br><em>&lt; dataSource type=”POOLED”&gt;</em> — <em>MyBatis原生的连接池</em><br><em>&lt; mapper resource=”com/baizhi/dao/UserMapper.xml” /&gt;</em> — <em>注册Mapper文件</em></p><h4 id="2-1-3-1-补充MyBatis-config中的配置信息"><a href="#2-1-3-1-补充MyBatis-config中的配置信息" class="headerlink" title="2-1-3-1 补充MyBatis-config中的配置信息"></a>2-1-3-1 补充MyBatis-config中的配置信息</h4><p><strong>别名TypeAlias</strong></p><p>实体的权限定名<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.hibiscidai.entity.User"</span> <span class="attr">alias</span>=<span class="string">"A"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByNameAndPassword"</span> <span class="attr">resultType</span>=<span class="string">"A"</span>&gt;</span></span><br><span class="line">select * from t_user where username=#&#123;username&#125; and password=#&#123;passowrd&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置内容参数化</strong><br>问题：在mybatis-config文件中有经常需要修改的字符串相关（数据库相关）<br>解决方案：把在mybatis-config配置文件中经常需要修改的字符串信息提取到小配置文件中</p><p>i.读取小配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 读取小配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>resource=”jdbc.properties”</em>——<em>小配置文件存放路径</em></p><p>ii.${key}获取小配置文件中对应的值</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/</span></span><br><span class="line">&lt;property name="password" value="$&#123;password&#125;"/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver = oracle.jdbc.OracleDriver</span><br><span class="line">url = jdbc:oracle:thin:<span class="meta">@localhost</span>:<span class="number">1521</span>:xe</span><br><span class="line">username = hr</span><br><span class="line">password = hr</span><br></pre></td></tr></table></figure><h2 id="2-2-MyBatis-API"><a href="#2-2-MyBatis-API" class="headerlink" title="2-2 MyBatis API"></a>2-2 MyBatis API</h2><p><strong>三个重要的类</strong></p><h3 id="2-2-1-Resources"><a href="#2-2-1-Resources" class="headerlink" title="2-2-1 Resources"></a>2-2-1 Resources</h3><p>读取mybaitis-fonfig配置文件，打开IO</p><h3 id="2-2-2-SqlSessionFactory"><a href="#2-2-2-SqlSessionFactory" class="headerlink" title="2-2-2 SqlSessionFactory"></a>2-2-2 SqlSessionFactory</h3><p>通过SqlSessionFactory这个工厂创建SqlSession对象</p><h3 id="2-2-3-SqlSession"><a href="#2-2-3-SqlSession" class="headerlink" title="2-2-3 SqlSession"></a>2-2-3 SqlSession</h3><p>作用：</p><ul><li>根据程序员书写的Mapper文件，自动创建mapper文件对应的java类（DAO接口的实现类）</li><li>SqlSession内部封装了Connection对象</li><li>SqlSession控制事务</li></ul><p>SqlSession.commit——Connection.commit<br>SqlSession.rollback——Connection.rollback</p><p>注意：实战开发中，增删改需要控制事务 查询不需要控制事务</p><h2 id="2-3-MyBatis-的开发步骤"><a href="#2-3-MyBatis-的开发步骤" class="headerlink" title="2-3 MyBatis 的开发步骤"></a>2-3 MyBatis 的开发步骤</h2><ul><li>建表</li><li>写实体</li><li>DAO接口</li><li>Mapper文件做DAO的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectByID</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.hibiscidai.entity.User"</span>&gt;</span></span><br><span class="line">select * from t_user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>User</em> — <em>resultType=”com.hibiscidai.entity.User”</em><br><em>selectByID</em> — <em>id=”selectByID”</em><br><em>Integer id</em> — <em>parameterType=”int”</em></p><ul><li>Mapper文件的注册</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span> = <span class="string">"com/hibiscidai/dao/UserMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MyBatis核心API测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testMybatis</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 读取mybatis-config配置文件</span></span><br><span class="line">InputStream stream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line"><span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(stream);</span><br><span class="line"><span class="comment">// 创建SqlSession对象</span></span><br><span class="line">SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line"><span class="comment">// 创建DAO的实现类</span></span><br><span class="line">UserDAO userDAO = sqlSession.getMapper(UserDAO.class);</span><br><span class="line"><span class="comment">// 调用DAO中相关方法</span></span><br><span class="line">User user = userDAO.selectByID(<span class="number">1</span>);</span><br><span class="line">System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-参数绑定"><a href="#3-参数绑定" class="headerlink" title="3 参数绑定"></a>3 参数绑定</h1><h2 id="3-1-Mybaits代码中形参名与mapper文件中的-的名字没有必然联系"><a href="#3-1-Mybaits代码中形参名与mapper文件中的-的名字没有必然联系" class="headerlink" title="3-1 Mybaits代码中形参名与mapper文件中的#{}的名字没有必然联系"></a>3-1 Mybaits代码中形参名与mapper文件中的#{}的名字没有必然联系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectByID</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.hibiscidai.entity.User"</span>&gt;</span></span><br><span class="line">select * from t_user where id=#&#123;hibiscidai&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Integer id</strong>–<strong>hibiscidai</strong></p><h2 id="3-2-Mapper文件中可以通过下标的形式，代表接口中的形参"><a href="#3-2-Mapper文件中可以通过下标的形式，代表接口中的形参" class="headerlink" title="3-2 Mapper文件中可以通过下标的形式，代表接口中的形参"></a>3-2 Mapper文件中可以通过下标的形式，代表接口中的形参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectByID</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"com.hibiscidai.entity.User"</span>&gt;</span></span><br><span class="line">select * from t_user where id=#&#123;0&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Integer id</strong>–<strong>0</strong></p><p>下标默认从0开始</p><h2 id="3-3-多参数形式的查询解决方案"><a href="#3-3-多参数形式的查询解决方案" class="headerlink" title="3-3 多参数形式的查询解决方案"></a>3-3 多参数形式的查询解决方案</h2><p>注意：<em>在mybatis进行查询时，paramterType是可以省略的，不能随意指定#{}，名字</em></p><h3 id="3-3-1-可以通过下标的形式进行操作"><a href="#3-3-1-可以通过下标的形式进行操作" class="headerlink" title="3-3-1 可以通过下标的形式进行操作"></a>3-3-1 可以通过下标的形式进行操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectByNameAndPassword</span><span class="params">(String username, String password)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByNameAndPassword"</span> <span class="attr">resultTpe</span>=<span class="string">"com.baizhi.entity.User"</span>&gt;</span></span><br><span class="line">select * from t_user where username=#&#123;0&#125; and password=#&#123;1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-2-Param注解进行参数绑定-建议"><a href="#3-3-2-Param注解进行参数绑定-建议" class="headerlink" title="3-3-2@Param注解进行参数绑定[建议]"></a>3-3-2@Param注解进行参数绑定[建议]</h3><p>注：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[]]&gt;</span><br></pre></td></tr></table></figure><p>mybaits中消除xml大小写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectByNameAndPassword</span><span class="params">(@Param(<span class="string">"u"</span>)</span>String username, @<span class="title">Param</span><span class="params">(<span class="string">"p"</span>)</span> String password)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByNameAndPassword"</span> <span class="attr">resultType</span>=<span class="string">"com.hibiscidai.entuty.User"</span>&gt;</span></span><br><span class="line">select * from t_user where username=#&#123;u&#125; and password=#&#123;p&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-3-使用集合（map）进行传参-早期"><a href="#3-3-3-使用集合（map）进行传参-早期" class="headerlink" title="3-3-3 使用集合（map）进行传参[早期]"></a>3-3-3 使用集合（map）进行传参[早期]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">"username"</span>, <span class="string">"hibiscidai"</span>);</span><br><span class="line">map.put(<span class="string">"passowrd"</span>, <span class="string">"123456"</span>);</span><br><span class="line">User user = userDAO.selectByNameAndPassword(map);</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t_user where username=#&#123;username&#125; and password=#&#123;passowrd&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">selectByNameAndPassword</span><span class="params">(Map&lt;String, String&gt; params)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="4-MyBatis中CUD（增删改）"><a href="#4-MyBatis中CUD（增删改）" class="headerlink" title="4 MyBatis中CUD（增删改）"></a>4 MyBatis中CUD（增删改）</h1><p>注意：<em>在MyBatis应用的过程中，处理CUD时，必须要手工控制事务，否则操作不执行</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.commit();</span><br><span class="line">sqlSession.rollback();</span><br></pre></td></tr></table></figure><h2 id="4-1-删除"><a href="#4-1-删除" class="headerlink" title="4-1 删除"></a>4-1 删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"delete"</span>&gt;</span></span><br><span class="line">delete from t_user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-2-修改"><a href="#4-2-修改" class="headerlink" title="4-2 修改"></a>4-2 修改</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User &#123;</span><br><span class="line">id</span><br><span class="line">username</span><br><span class="line">password</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></span><br><span class="line">update t_user set username=#&#123;username&#125;, password=#&#123;password&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-3-插入"><a href="#4-3-插入" class="headerlink" title="4-3 插入"></a>4-3 插入</h2><p>Sequence序列进行主键插入[Oracle]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(User user)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User &#123;</span><br><span class="line">id = <span class="keyword">null</span></span><br><span class="line">username = hibiscidai</span><br><span class="line">passowrd = <span class="number">123456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insert"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">order</span>=<span class="string">"BEFORE"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">select z.newxval from dual</span><br><span class="line"><span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">inset int t_user (id, username, password) values(#&#123;id&#125;, #&#123;usename&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>案例<br>serviceimpl层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">regist</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">SqlSession session = MyBatisUtil.openSqlSession();</span><br><span class="line">UserDAO ud = (UserDAO) session.getMapper(UserDAO.class);</span><br><span class="line">User u = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">ud.insertSelective(user);</span><br><span class="line">u = ud.selectByEmail(user.getdEmail());</span><br><span class="line">session.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意从session获取Mapper执行后注意commit</p><h1 id="5-MyBatisUtil工具类的封装"><a href="#5-MyBatisUtil工具类的封装" class="headerlink" title="5 MyBatisUtil工具类的封装"></a>5 MyBatisUtil工具类的封装</h1><p>对于MyBatis三种类对象的分析</p><p><strong>Resources类</strong></p><p>特点：读取MyBatis-config配置文件 IO</p><p>建议：一次性通过IO读取所有的数据</p><p><strong>SqlSessionFactory类</strong></p><p>特点：创建SqlSession 重量级的资源 内存占用多 功能多</p><p>建议：每一个应用只创建一个 线程安全</p><p><strong>SqlSession类</strong></p><p>特点：清零及资源 不能被多线程共享</p><ol><li>创建DAO接口的实现类（动态代理设计思想 动态字节码技术）</li><li>SqlSession内部封装Connnection 一个SqlSession对应一个Connection</li><li>事务控制 </li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">```SqlSession.rollback</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mybatisutils</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;SqlSession&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;SqlSession&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 静态代码块加载基础信息 */</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">InputStream stream = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 读取mybatis-config配置文件</span></span><br><span class="line">stream = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line"><span class="comment">// 创建SqlSessionFactory对象</span></span><br><span class="line">sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(stream);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"读取配置文件失败"</span>);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123; <span class="comment">// 关闭流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">stream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e2) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">e2.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取SqlSession对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">opSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession = tl.get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非空判断</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == sqlSession) &#123;</span><br><span class="line">sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">tl.set(sqlSession);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sqlSession;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 关闭SqlSession对象 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取SqlSession</span></span><br><span class="line">SqlSession sqlSession = opSqlSession();</span><br><span class="line">sqlSession.close();</span><br><span class="line">tl.remove();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务提交 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession = opSqlSession();</span><br><span class="line">sqlSession.commit();</span><br><span class="line">closeSqlSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 事务回滚 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession = opSqlSession();</span><br><span class="line">sqlSession.rollback();</span><br><span class="line">closeSqlSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 获取DAO实现 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getMapper</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">SqlSession sqlSession = opSqlSession();</span><br><span class="line"><span class="keyword">return</span> sqlSession.getMapper(clazz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-ResultMap-结果映射，结果对应关系"><a href="#6-ResultMap-结果映射，结果对应关系" class="headerlink" title="6 ResultMap(结果映射，结果对应关系)"></a>6 ResultMap(结果映射，结果对应关系)</h1><p>作用：解决了实体类与数据库中的表不匹配</p><h2 id="6-1-定义ResultMap"><a href="#6-1-定义ResultMap" class="headerlink" title="6-1 定义ResultMap"></a>6-1 定义ResultMap</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Customer"</span> <span class="attr">id</span>=<span class="string">"CustomerResultMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"t_id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"t_username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"t_password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt; id &gt;</code>标签表示对主键的处理<br><code>&lt; result &gt;</code>标签表示对费主键的处理</p><p><code>property</code> – 代表实体的名字<br><code>column</code> – 代表数据库中的列名</p><h2 id="6-2-使用ResultMap"><a href="#6-2-使用ResultMap" class="headerlink" title="6-2 使用ResultMap"></a>6-2 使用ResultMap</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Customer"</span> <span class="attr">id</span>=<span class="string">"CustomerResultMap"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"t_id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">column</span>=<span class="string">"t_username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"t_password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">resultType</span>=<span class="string">"CustomerResultMap"</span> &gt;</span></span><br><span class="line">select * from t_customer where t_id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：如果在开发中，只解决列名不一致的问题，有简化的方式，起别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"com.baizhi.entity.Customer"</span> <span class="attr">alias</span>=<span class="string">"Customer"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">resultType</span>=<span class="string">"Customer"</span> &gt;</span></span><br><span class="line">select  t_id  as id,t_username  as username,t_password as password from t_customer where t_id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="7-MyBatis框架进行多表操作"><a href="#7-MyBatis框架进行多表操作" class="headerlink" title="7 MyBatis框架进行多表操作"></a>7 MyBatis框架进行多表操作</h1><h2 id="7-1-实体之间的关系分类"><a href="#7-1-实体之间的关系分类" class="headerlink" title="7-1 实体之间的关系分类"></a>7-1 实体之间的关系分类</h2><p>i.实体之间有关联关系（有 从属 has a）【重点】</p><p>a) 1 : 1<br>b) 1 : <em><br>c) </em> : *<br>ii.实体之间继承关系（is a）</p><h2 id="7-2-MyBatis中如何处理管理关系"><a href="#7-2-MyBatis中如何处理管理关系" class="headerlink" title="7-2 MyBatis中如何处理管理关系"></a>7-2 MyBatis中如何处理管理关系</h2><h3 id="7-2-1-entity处理"><a href="#7-2-1-entity处理" class="headerlink" title="7-2-1 entity处理"></a>7-2-1 entity处理</h3><p>关系属性：把关系另一方作为本方属性进行存储</p><ul><li>关系的方向性：</li></ul><ul><li>单向关系：只能从关系其中一方 找到关系的另一方</li><li>双向关系：从关系的双方都可以找到关系的另一方</li></ul><p>级联查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PersonDAO.query(id) ---&gt; Person(passport)</span><br><span class="line">PassportDAO.query(id) ---&gt; Passport(person)</span><br></pre></td></tr></table></figure></p><p>看似是单表处理 实际完成多张表的操作</p><h3 id="7-2-2-表"><a href="#7-2-2-表" class="headerlink" title="7-2-2 表"></a>7-2-2 表</h3><p>表中如何简历关联关系：外键</p><ul><li>建外键规则：</li></ul><ul><li>一对一 随便建</li><li>一对多 建在多的一方</li><li>多对多 建在第三张表中</li></ul><p>表中关系的方向行：天生的双向关系</p><p>注意</p><ol><li>父没有外键 先插入</li><li>子表没有外键 先删除</li></ol><p>###7-2-3 DAO接口</p><p>有几个DAO,    对应写几个DAO</p><p>###7-2-4 Mapper文件处理</p><p>自定义结果映射</p><p>#8 关联关系的实战开发</p><p>##8-1 1:1关联关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Person"</span> <span class="attr">id</span>=<span class="string">"PersonResultMap"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">id</span>  <span class="attr">column</span>=<span class="string">"pid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pusername"</span> <span class="attr">property</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"page"</span>  <span class="attr">property</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"passport"</span>  <span class="attr">javaType</span>=<span class="string">"Passport"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">id</span>  <span class="attr">column</span>=<span class="string">"sid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"sserial"</span> <span class="attr">property</span>=<span class="string">"serial"</span>/&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"splace"</span> <span class="attr">property</span>=<span class="string">"place"</span>/&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><p>##8-2 1:*关联关系(重点)</p><p><em>例：</em><br>部门(Department)与职员(Employee)关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Employee</span><br><span class="line">id</span><br><span class="line">username</span><br><span class="line">age</span><br><span class="line">salary</span><br><span class="line">department</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Department</span><br><span class="line">id</span><br><span class="line">departmentname</span><br><span class="line">departmentnumber</span><br><span class="line">List&lt;Employee&gt; employees</span><br></pre></td></tr></table></figure><p><code>t_employee</code><br>| id | usename | age | salary | did |<br>| :–: | :–: | :–: | :–: | :–: |<br>| 1 | hibiscidai | 18 | 10000| 1 |<br>| 1 | laowang| 18 | 100| 1 |</p><p><code>t_department</code><br>| id | epartmentname | epartmentnumber |<br>| :–: | :–: | :–: |<br>| 1 | 研发部 | 1111 |</p><p>一对多关联关系，集合作为关系属性，需要对集合进行初始化操作。</p><p>##8-3 <em> : </em>关联关系(了解)</p><p><em>例：</em><br>学生(Student)与课程(Course)关系<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Student</span><br><span class="line">id</span><br><span class="line">studentnumber</span><br><span class="line">studentname</span><br><span class="line">age</span><br><span class="line">List&lt;Course&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Course</span><br><span class="line">id</span><br><span class="line">coursename</span><br><span class="line">score</span><br><span class="line">List&lt;Student&gt;</span><br></pre></td></tr></table></figure><p><code>t_student | 学生表</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">studentnumber</th><th style="text-align:center">studentname</th><th style="text-align:center">age</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1111</td><td style="text-align:center">hibiscidai</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2222</td><td style="text-align:center">hibiscizhang</td><td style="text-align:center">28</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">3333</td><td style="text-align:center">hibisciwang</td><td style="text-align:center">38</td></tr></tbody></table><p><code>t_sc | 多对多映射表</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">sid</th><th style="text-align:center">cid</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">2</td></tr></tbody></table><p><code>t_course | 课程表</code></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">coursename</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">java</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">oracle</td><td style="text-align:center">2</td></tr></tbody></table><h2 id="8-4-关联关系总结"><a href="#8-4-关联关系总结" class="headerlink" title="8-4 关联关系总结"></a>8-4 关联关系总结</h2><h3 id="8-4-1-Entity-关系属性"><a href="#8-4-1-Entity-关系属性" class="headerlink" title="8-4-1 Entity 关系属性"></a>8-4-1 Entity 关系属性</h3><p>a)一个对象<br>b)集合 进行初始化</p><h3 id="8-4-2-Table外键"><a href="#8-4-2-Table外键" class="headerlink" title="8-4-2 Table外键"></a>8-4-2 Table外键</h3><p>一对一 随便建<br>一对多 建在多的一方<br>多对多 建在第三张表中</p><h3 id="8-4-3-Mapper文件"><a href="#8-4-3-Mapper文件" class="headerlink" title="8-4-3 Mapper文件"></a>8-4-3 Mapper文件</h3><p>ResultMap 一个对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">""</span> <span class="attr">javaType</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><p>多个对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">""</span> <span class="attr">oftype</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="9-动态SQL"><a href="#9-动态SQL" class="headerlink" title="9 动态SQL"></a>9 动态SQL</h1><p>作用：简化mapper文件的配置</p><h2 id="9-1-Sql片段"><a href="#9-1-Sql片段" class="headerlink" title="9-1 Sql片段"></a>9-1 Sql片段</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectAll"</span>&gt;</span></span><br><span class="line">select * from t_teacher</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">resutlType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span>where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByName"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span>where teachername=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-where语句的动态Sql"><a href="#9-2-where语句的动态Sql" class="headerlink" title="9-2 where语句的动态Sql"></a>9-2 where语句的动态Sql</h2><p>作用：同样的表，根据不同列的内容查询，通过where的动态sql</p><p><code>TeacherDAO文件重构</code><br>未使用where</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据教师的ID查询该教师</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">selectByID</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"><span class="comment">//根据教师的姓名查询该教师</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">selectByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="comment">//根据教师的序列号查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">selectByNumber</span><span class="params">(String number)</span></span>;</span><br><span class="line"><span class="comment">//根据教师的id及姓名查询</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">selectByIDAndName</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer ID,@<span class="title">Param</span><span class="params">(<span class="string">"name"</span>)</span>String name)</span>;</span><br></pre></td></tr></table></figure><p>使用where后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Teacher <span class="title">selectByWhere</span><span class="params">(Integer id, String name, String number)</span></span></span><br></pre></td></tr></table></figure><p><code>Mapper文件重构</code></p><p>未使用where</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectAll"</span>&gt;</span></span><br><span class="line">select * from t_teacher</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">resutlType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span>where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByName"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span>where teachername=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByNumber"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span>where teachernumber=#&#123;number&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByIDAndName"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span>where id=#&#123;id&#125; and teachername=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用where后</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"selectAll"</span>&gt;</span></span><br><span class="line">select * from t_teacher</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByWhere"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name!=null"</span>&gt;</span></span><br><span class="line">and name=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"number!=null"</span>&gt;</span></span><br><span class="line">and number=#&#123;number&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">select * from t_teacher where id=#&#123;id&#125;</span><br><span class="line">select * from t_teacher where name=#&#123;name&#125;</span><br><span class="line">select * from t_teacher where number=#&#123;number&#125;</span><br><span class="line">select * from t_teacher where id=#&#123;id&#125; and name=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>xml逻辑映射：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=null, number=nullwhere id=#&#123;id&#125;</span><br><span class="line">id=null, number=nullwhere name=#&#123;name&#125;</span><br><span class="line">id=null, name=nullwhere number=#&#123;number&#125;</span><br><span class="line">number=nullwhere id=#&#123;id&#125; and number=#&#123;number&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByDynamic"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"selectAll"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachername!=null"</span>&gt;</span></span><br><span class="line">and teachername=#&#123;teachername&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachernumber!=null"</span>&gt;</span></span><br><span class="line">and teachernumber=#&#123;teahcernumber&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：用where动态sql时候，多参数做参数绑定时，要与数据库中的列名保持一致。<br>如果起始条件为null则忽略and号</p><p>新的写法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and/or"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null"</span>&gt;</span></span><br><span class="line">id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachername!=null"</span>&gt;</span></span><br><span class="line">and teachername=#&#123;teachername&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachernumber!=null"</span>&gt;</span></span><br><span class="line">and teachernumber=#&#123;teachernumber&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>prefix</code> 忽略前缀</p><p><code>prefixOverrides</code> 忽略前缀and或者or</p><h2 id="9-3-修改操作的动态Sql"><a href="#9-3-修改操作的动态Sql" class="headerlink" title="9-3 修改操作的动态Sql"></a>9-3 修改操作的动态Sql</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateTeacher"</span>&gt;</span></span><br><span class="line">update t_teacher</span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachername!=null"</span>&gt;</span></span><br><span class="line">teachername=#&#123;teachername&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachernumber!=null"</span>&gt;</span></span><br><span class="line">teachernumber=#&#123;teachernumber&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span><br><span class="line">age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新的写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachername!=null"</span>&gt;</span></span><br><span class="line">teachername=#&#123;teachername&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"teachernumber!=null"</span>&gt;</span></span><br><span class="line">teachernumber#=&#123;teachernumber&#125;,</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age!=null"</span>&gt;</span></span><br><span class="line">age=#&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">where id=#&#123;id&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4-批量操作-批量删除，批量查询"><a href="#9-4-批量操作-批量删除，批量查询" class="headerlink" title="9-4 批量操作(批量删除，批量查询)"></a>9-4 批量操作(批量删除，批量查询)</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByIDs"</span> <span class="attr">resyltType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">select * from t_teacher where id in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">items</span>=<span class="string">"ids"</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">#&#123;ids&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">froeach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select * from t_teacher where id in</span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">item</span>=<span class="string">"ids"</span> <span class="attr">separator</span>=<span class="string">","</span><span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果参数是list集合 collection属性值设置为list</p><h1 id="10-MyBatis的缓存-Cache"><a href="#10-MyBatis的缓存-Cache" class="headerlink" title="10 MyBatis的缓存(Cache)"></a>10 MyBatis的缓存(Cache)</h1><h2 id="10-1-缓存简述"><a href="#10-1-缓存简述" class="headerlink" title="10-1 缓存简述"></a>10-1 缓存简述</h2><ul><li><p>作用：<br>在应用程序与数据库之间建立内存缓冲，存储用户曾经查询过的数据</p></li><li><p>好处：</p></li></ul><ol><li>减少与数据库之间的频繁通信</li><li>内存中随机读写效率高于硬盘</li></ol><ul><li>问题：</li></ul><ol><li>内存造价高，内存物理上线不大 无法缓存海量数据</li><li>数据安全性差</li></ol><ul><li>原则：<br>缓存中存储的数据一定是经常需要查询的数据，而且不是经常需要修改的数据</li></ul><h2 id="10-2-缓存开启步骤"><a href="#10-2-缓存开启步骤" class="headerlink" title="10-2 缓存开启步骤"></a>10-2 缓存开启步骤</h2><h3 id="10-2-1-开启MyBatis的全局缓存"><a href="#10-2-1-开启MyBatis的全局缓存" class="headerlink" title="10-2-1 开启MyBatis的全局缓存"></a>10-2-1 开启MyBatis的全局缓存</h3><p>Mybatis-config.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 激活全局缓存 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">setting</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="10-2-2-设置需要存储在缓存中的数据"><a href="#10-2-2-设置需要存储在缓存中的数据" class="headerlink" title="10-2-2 设置需要存储在缓存中的数据"></a>10-2-2 设置需要存储在缓存中的数据</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- cache标签的作用：本mapper文件中的所有有关查询的操作都会放入mybatis的缓存中 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByID"</span> <span class="attr">resultType</span>=<span class="string">"Person"</span>&gt;</span></span><br><span class="line">select * from t_person where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意实体类起别名</code></p><h3 id="10-2-3-放置在缓存中的实体对象都需要实现serializable接口"><a href="#10-2-3-放置在缓存中的实体对象都需要实现serializable接口" class="headerlink" title="10-2-3 放置在缓存中的实体对象都需要实现serializable接口"></a>10-2-3 放置在缓存中的实体对象都需要实现serializable接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>序列化目的：唤出策略（用少的数据写入硬盘中）</p><ul><li>注意：</li></ul><ul><li>只有session关闭时，MyBatis才会把数据存储在缓存中</li><li>事务提交时（CUD），MyBatis会自动清空缓存</li></ul><ul><li>建议：</li></ul><ul><li>查询方法不需要控制，但是一定要关闭SQLsession</li><li>CUD必须要控制事务</li><li>单表查询建议采用MyBatis缓存</li></ul><ul><li>第三方缓存：<br>  eacache,redis,memcache</li></ul>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java内存机制详解|JVM初步</title>
      <link href="/2017/07/15/2017-07-15-Java%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3JVM%E5%88%9D%E6%AD%A5/"/>
      <url>/2017/07/15/2017-07-15-Java%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3JVM%E5%88%9D%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h1 id="Java内存机制详解-JVM初步"><a href="#Java内存机制详解-JVM初步" class="headerlink" title="Java内存机制详解|JVM初步"></a>Java内存机制详解|JVM初步</h1><p>[TOC]<br><a id="more"></a></p><h1 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h1><h2 id="JVM执行引擎"><a href="#JVM执行引擎" class="headerlink" title="JVM执行引擎"></a>JVM执行引擎</h2><ul><li><strong>解释器</strong></li><li><strong>JIT</strong>(Just In Time)，优先次执行的字节码会编译成本地的机器代码，被缓存在系统中,以后可以随时调用</li><li><strong>自适应的优化器</strong>，虚拟机开始的时候解释字节码CodeGo.net，但是会监控运行中程序的活动，并记录下使用最频繁的代码段，虚拟机会把这些活动最频繁的代码段编译成本地代码。还有一种虚拟机是由硬件芯片构成，它用本地方法执行java字节码</li></ul><h2 id="JVM程序执行过程"><a href="#JVM程序执行过程" class="headerlink" title="JVM程序执行过程"></a>JVM程序执行过程</h2><ol><li>加载<code>.class</code>文件</li><li>管理分配内存</li><li>执行垃圾收集</li></ol><h2 id="JVM生命周期"><a href="#JVM生命周期" class="headerlink" title="JVM生命周期"></a>JVM生命周期</h2><ol><li><strong>启动</strong><br>启动一个Java 程序时，一个JVM 实例就产生了，任何一个又有 <code>public static void main(String[] args)</code> 函数的class 文件都可以作为JVM 实例运行的起点。</li><li><strong>运行</strong><br><code>main()</code>作为该程序初始线程的起点，任何其他线程均由该线程启动。JVM 内部有两种线程：守护线程和非守护线程,<code>main()</code>属于非守护线程，守护线程通常由JVM 自己使用，java 程序也可以表明自己创建的线程是守护线程。</li><li><strong>消亡</strong><br>当程序中的所有非守护线程都终止时，JVM 才退出；若安全管理器允许，程序也可以使用Runtime类或者System.exit()来退出。</li></ol><h2 id="JVM的逻辑内存模型"><a href="#JVM的逻辑内存模型" class="headerlink" title="JVM的逻辑内存模型"></a>JVM的逻辑内存模型</h2><p><strong>（重点重点[敲黑板]，仔细查看外链博客[敲黑板]）</strong></p><p><img src="http://img.blog.csdn.net/20170715122803665?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="JVM的逻辑内存模型"></p><p><a href="http://www.cnblogs.com/dingyingsi/p/3760447.html" target="_blank" rel="noopener">深入理解JVM—JVM内存模型</a></p><p><strong>方法区</strong>：方法区（Method Area）与Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java 堆区分开来。<br>要注意方法区单独开辟，不同于堆内存，意在一些类的公共的方法可以共享，堆内对象还有引用指向方法区。</p><p><strong>运行时常量池</strong>：运行时常量池（Runtime Constant Pool）是<em>方法区</em>的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外。还有一项信息是<strong>常量池</strong>（Constant PoolTable），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。</p><p><strong>常量池</strong>（ConstantPool）：常量池在编译期间就将一部分数据存放于该区域，包含基本数据类型如int、long等和对象类型String、数组等并以final声明的常量值。特别注意的是对于运行期位于栈中的String常量的值可以通过 String.intern()方法将该值置入到常量池中。</p><h2 id="JVM体系结构"><a href="#JVM体系结构" class="headerlink" title="JVM体系结构"></a>JVM体系结构</h2><p><img src="http://img.blog.csdn.net/20170715110606552?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="JVM体系结构"></p><p><a href="http://www.cnblogs.com/protected/p/6419217.html" target="_blank" rel="noopener">内存分配及变量存储位置（堆、栈、方法区常量池、方法区静态区）</a></p><p><strong>返回值</strong>：会在栈空间中临时开辟一块空间临时存放，在方法执行完成后消失。</p><h2 id="JVM原理"><a href="#JVM原理" class="headerlink" title="JVM原理"></a>JVM原理</h2><p><img src="http://img.blog.csdn.net/20170715110621519?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="JVM原理"></p><h2 id="堆内存和栈内存"><a href="#堆内存和栈内存" class="headerlink" title="堆内存和栈内存"></a>堆内存和栈内存</h2><h3 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h3><p>当在一段代码块定义一个变量时，Java 就在栈中为这个变量分配内存空间。栈中主要存放一些基本类型的变量(<code>int</code>, <code>short</code>, <code>long</code>, <code>byte</code>, <code>float</code>,<code>double</code>, <code>boolean</code>, <code>char</code>)和对象句柄。<br>栈有一个很重要的特殊性，就是存在栈中的数据可以共享。</p><h3 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h3><p>堆内存用来存放由new 创建的对象和数组</p><p><strong>eg</strong><br>假设我们同时定义:<br><code>int a = 3;</code><br><code>int b = 3;</code><br>编译器先处理int a = 3；首先它会在栈中创建一个变量为a 的引用，然后查找栈中是否有3 这个值，如果没找到，就将3 存放进来,然后将a 指向3。接着处理int b = 3；在创建完b 的引用变量后，因为在栈中已经有3 这个值，便将b 直接指向3。这样，就出现了a 与b 同时均指向3 的情况。这时，如果再令a=4；那么编译器会重新搜索栈中是否有4 值，如果没有，则将4 存放进来，并令a 指向4；如果已经有了，则直接将a 指向这个地址。因此a 值的改变不会影响到b 的值。要注意这种数据的共享与两<br>个对象的引用同时指向一个对象的这种共享是不同的，因为这种情况a 的修改并不会影响到b，它是由编译器完成的,它有利于节省空间。而一个对象引用变量修改了这个对象的内部状态，会影响到另一个对象引用变量。</p><p>String 是一个特殊的包装类数据。可以用：<br><code>String str = new String(&quot;abc&quot;);</code><br><code>String str = &quot;abc&quot;;</code><br>两种的形式来创建，第一种是用<code>new()</code>来新建对象的，它会在存放于堆中。每调用一次就会创建一个新的对象。而第二种是先在栈中创建一个对String 类的对象引用变量str，然后查找栈中有没有存放<code>&quot;abc&quot;</code>，如果没有，则<code>&quot;abc&quot;</code>存放进栈，并令str 指向<code>&quot;abc&quot;</code>，如果已经有<code>&quot;abc&quot;</code>则直接令str 指向<code>&quot;abc&quot;</code>。</p><h2 id="JVM-垃圾回收"><a href="#JVM-垃圾回收" class="headerlink" title="JVM 垃圾回收"></a>JVM 垃圾回收</h2><p><strong>GC</strong> (Garbage Collection)的基本原理：<br>将内存中不再被使用的对象进行回收，GC 中用于回收的方法称为收集器,由于GC 需要消耗一些资源和时间，Java 在对对象的生命周期特征进行分析后，按照新生代、旧生代的方式来对对象进行收集，以尽可能的缩短GC 对应用造成的暂停。</p><h2 id="java-虚拟机会在6-种情况下创建一个对象"><a href="#java-虚拟机会在6-种情况下创建一个对象" class="headerlink" title="java 虚拟机会在6 种情况下创建一个对象"></a>java 虚拟机会在6 种情况下创建一个对象</h2><ol><li>创建类的新实例</li><li>调用类中声明的静态方法</li><li>操作类或接口中声明的非常量静态字段</li><li>调用Java API 中特定的反射方法</li><li>初始化一个类的子类</li><li>制定一个类作为Java 虚拟机启动时的初始化类</li></ol>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式初步</title>
      <link href="/2017/07/12/2017-07-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9D%E6%AD%A5/"/>
      <url>/2017/07/12/2017-07-12-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%88%9D%E6%AD%A5/</url>
      <content type="html"><![CDATA[<p><a href="http://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">设计模式 | 菜鸟教程</a><br>参考书：<strong>Design Patterns - Elements of Reusable Object-Oriented Software（中文译名：设计模式 - 可复用的面向对象软件元素）</strong><br>23种设计模式。这些模式可以分为三大类：创建型模式（Creational Patterns）、结构型模式（Structural Patterns）、行为型模式（Behavioral Patterns）。</p><a id="more"></a><p><style>table th:first-of-type(2) {width: 60px;}</style><br>|序号 | 模式&amp;描述 | 包括 |<br>|:– | :-| :———- |<br>| 1  | <strong>创建型模式</strong><br>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。 | -工厂模式（Factory Pattern）<br>-抽象工厂模式（Abstract Factory Pattern）<br>-单例模式（Singleton Pattern）<br>-建造者模式（Builder Pattern）<br>-原型模式（Prototype Pattern）|<br>| 2  | <strong>结构型模式</strong><br>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。 |  -适配器模式（Adapter Pattern）<br>-桥接模式（Bridge Pattern）<br>-过滤器模式（Filter、Criteria Pattern）<br>-组合模式（Composite Pattern）<br>-装饰器模式（Decorator Pattern）<br>-外观模式（Facade Pattern）<br>-享元模式（Flyweight Pattern）<br>-代理模式（Proxy Pattern）  |<br>| 3  | <strong>行为型模式</strong><br>这些设计模式特别关注对象之间的通信。| -责任链模式（Chain of Responsibility Pattern）<br>-命令模式（Command Pattern）<br>-解释器模式（Interpreter Pattern）<br>-迭代器模式（Iterator Pattern）<br>-中介者模式（Mediator Pattern）<br>-备忘录模式（Memento Pattern）<br>-观察者模式（Observer Pattern）<br>-状态模式（State Pattern）<br>-空对象模式（Null Object Pattern）<br>-策略模式（Strategy Pattern）<br>-模板模式（Template Pattern）<br>-访问者模式（Visitor Pattern） |<br>| 4  |<strong>J2EE 模式</strong><br>这些设计模式特别关注表示层。这些模式是由 Sun Java Center 鉴定的。| -MVC 模式（MVC Pattern）<br>-业务代表模式（Business Delegate Pattern）<br>-组合实体模式（Composite Entity Pattern）<br>-数据访问对象模式（Data Access Object Pattern）<br>-前端控制器模式（Front Controller Pattern）<br>-拦截过滤器模式（Intercepting Filter Pattern）<br>-服务定位器模式（Service Locator Pattern）<br>-传输对象模式（Transfer Object Pattern）|</p><p>设计模式之间的关系<br><img src="http://img.blog.csdn.net/20170712104740188?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="设计模式之间的关系"></p><h1 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h1><h2 id="1、开闭原则（Open-Close-Principle）"><a href="#1、开闭原则（Open-Close-Principle）" class="headerlink" title="1、开闭原则（Open Close Principle）"></a>1、开闭原则（Open Close Principle）</h2><p>开闭原则的意思是：对扩展开放，对修改关闭。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><h2 id="2、里氏代换原则（Liskov-Substitution-Principle）"><a href="#2、里氏代换原则（Liskov-Substitution-Principle）" class="headerlink" title="2、里氏代换原则（Liskov Substitution Principle）"></a>2、里氏代换原则（Liskov Substitution Principle）</h2><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><h2 id="3、依赖倒转原则（Dependence-Inversion-Principle）"><a href="#3、依赖倒转原则（Dependence-Inversion-Principle）" class="headerlink" title="3、依赖倒转原则（Dependence Inversion Principle）"></a>3、依赖倒转原则（Dependence Inversion Principle）</h2><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><h2 id="4、接口隔离原则（Interface-Segregation-Principle）"><a href="#4、接口隔离原则（Interface-Segregation-Principle）" class="headerlink" title="4、接口隔离原则（Interface Segregation Principle）"></a>4、接口隔离原则（Interface Segregation Principle）</h2><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><h2 id="5、迪米特法则，又称最少知道原则（Demeter-Principle）"><a href="#5、迪米特法则，又称最少知道原则（Demeter-Principle）" class="headerlink" title="5、迪米特法则，又称最少知道原则（Demeter Principle）"></a>5、迪米特法则，又称最少知道原则（Demeter Principle）</h2><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><h2 id="6、合成复用原则（Composite-Reuse-Principle）"><a href="#6、合成复用原则（Composite-Reuse-Principle）" class="headerlink" title="6、合成复用原则（Composite Reuse Principle）"></a>6、合成复用原则（Composite Reuse Principle）</h2><p>合成复用原则是指：尽量使用合成/聚合的方式，而不是使用继承。</p><h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>提供创建对象的最佳方式。涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。该类提供一种访问其唯一的对象的方式，可以直接访问，不需要创建对象。<br>注意：1.单例类只能有一个实例。2.单例类必须自己创建自己的唯一实例。3.单例类必须给所有其他对象提供这一实例。</p><p><em>eg<br>在模拟学校运营模式的程序中，校长一实例为唯一实例，全局使用的类而且会参与全校事务处理，即频繁使用与销毁该类对象。由于此对象太特殊又为唯一值且频繁参与程序运行过程。所以为该校长类创建实例。</em></p><h1 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h1><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。创建对象过程在非工厂类中执行，耦合分离的思想。</p><p><em>eg<br>汽车制造厂，再制造汽车前所有汽车都有一个统一标准，然后根据型号对不同汽车进行设计组装，最后汽车分为很多种，制造过程由工厂承办，不同型号的车由不同厂商指定，工厂只是接到参数进行组装。</em></p><h2 id="静态工厂模式"><a href="#静态工厂模式" class="headerlink" title="静态工厂模式"></a>静态工厂模式</h2><p>一个类代表另一个类的功能，属于结构型模式。创建具有现有对象的对象，以便向外界提供功能接口。<br>为其他对象提供一种代理以控制这个对象的访问。代理对象可以在客户和目标对象之间起到中介作用。<br>每个代理只能为一个接口服务，代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一种方法都进行代理，静态代理在程序规模稍大时就无法胜任了。另外如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</p><p><em>eg<br>火车站销售问题，卖票是一种功能方法（抽象主题角色），该方法由火车站（真实主题角色）实现，但对于这一流程的实现，不能买一张票新建创建一个火车站（现实中是不可能实现的），创建代售点（代理主题角色）也可以实现售票功能。</em></p><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><p><em>eg<br>换皮肤，更改产品的一套属性。</em></p>]]></content>
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA反射机制</title>
      <link href="/2017/07/12/2017-07-12-JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
      <url>/2017/07/12/2017-07-12-JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="反射核心类"><a href="#反射核心类" class="headerlink" title="反射核心类"></a>反射核心类</h1><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h2 id="ClassLoader"><a href="#ClassLoader" class="headerlink" title="ClassLoader"></a>ClassLoader</h2><a id="more"></a><h1 id="程序的运行过程"><a href="#程序的运行过程" class="headerlink" title="程序的运行过程"></a>程序的运行过程</h1><p>图解：<br><img src="http://img.blog.csdn.net/20170711192815747?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="反射_程序的运行过程"><br>1.ClassLoader将其Load到内存汇总的CodeSegment<br>2.运行环境找到main才开始执行<br>3.动态加载机制，运行过程中会有更多class被load到内存</p><h1 id="ClassLoader的类的加载机制"><a href="#ClassLoader的类的加载机制" class="headerlink" title="ClassLoader的类的加载机制"></a>ClassLoader的类的加载机制</h1><p>1.非一次性加载<br>2.运行期间动态加载<br>3.static语句块(静态代码块)在加载后执行一次<br>4.dynamic语句(动态代码块)块在每次new新的对象之后会执行(构造方法之后运行，等同于构造方法内的语句)</p><p><code>-verbose:class</code> 控制台显示详细加载过程</p><p>TestDynamicLoading.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class TestDynamicLoading &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">new A();</span><br><span class="line">System.out.println(&quot;**----------**&quot;);</span><br><span class="line">new B();</span><br><span class="line"></span><br><span class="line">new C();</span><br><span class="line">new C();</span><br><span class="line"></span><br><span class="line">new D();</span><br><span class="line">new D();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class A &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class B &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class C &#123;</span><br><span class="line">static &#123;</span><br><span class="line">System.out.println(&quot;CCCCCCCCCC&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class D &#123;</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(&quot;DDDDDDDDDD&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行控制台输出(E:/WorkSpace为工作空间)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">[Loaded A from file:/E:/WrokSpace/TestReflect/bin/]</span><br><span class="line">**----------**</span><br><span class="line">[Loaded B from file:/E:/WrokSpace/TestReflect/bin/]</span><br><span class="line">[Loaded C from file:/E:/WrokSpace/TestReflect/bin/]</span><br><span class="line">CCCCCCCCCC</span><br><span class="line">[Loaded D from file:/E:/WrokSpace/TestReflect/bin/]</span><br><span class="line">DDDDDDDDDD</span><br><span class="line">DDDDDDDDDD</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="JDK内置的ClassLoader"><a href="#JDK内置的ClassLoader" class="headerlink" title="JDK内置的ClassLoader"></a>JDK内置的ClassLoader</h1><ul><li>bootstrap classloader<br>核心加载类，本地语言编程，不可以读取</li><li>extesion classloader<br>扩展加载类，jdk扩展类，jdk/jre/lib/ext目录下的类，可被读取</li><li>applicatioon classloader<br>用户自定义类加载类，</li><li>other classloader<br>SecureClassLoader<br>URLClassLoader</li></ul><p><code>TestJDKClassLoader.java</code></p><h1 id="JDKClassLoader的层次关系（不是继承）"><a href="#JDKClassLoader的层次关系（不是继承）" class="headerlink" title="JDKClassLoader的层次关系（不是继承）"></a>JDKClassLoader的层次关系（不是继承）</h1><p>所有的classloader都是从java.lang.classloader继承而来的<br><code>getParent()</code>方法是获取当前加载类的上一级加载对象，而不是父类<br>问parentloader加载后就不再加载，即parentloader加载以后sonloader不再加载，保证程序运行加载安全机制，如application classloader不可以加载bootstrap classloader中声明的类。</p><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(str);</span><br><span class="line">Object o = c.newInstance();</span><br><span class="line">Method[] methods = c.getMethods();</span><br><span class="line">for (Method m：method) &#123;</span><br><span class="line">if (m.getName().equals(&quot;m&quot;)) &#123;</span><br><span class="line">m.invoke(o);</span><br><span class="line">m.getParameterTypes();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于<code>invoke()</code>方法，是可变参数方法，第一个参数传入方法体所在对象，第二+个参数出入方法对应传入的参数。<br>实现接口的方法可以确定参数个数及类型，接口new对象的方法的可扩展性。<br>关于<code>getParameterTypes()</code>方法，返回传参类型。<br>关于<code>getReturnType()</code>方法，返回方法的返回类型。</p><p>通过反射的API接口，去探索运行期间的一个Class的内部结构，并且根据内部结构来决定方法怎么进行调用。</p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Maven学习笔记</title>
      <link href="/2017/06/22/2017-06-22-Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2017/06/22/2017-06-22-Maven%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2017/06/22/2017-06-22-Maven学习笔记/Maven学习笔记封面.jpg" alt="Maven学习笔记封面"></p><p>Maven学习笔记</p><a id="more"></a><h1 id="Maven学习笔记"><a href="#Maven学习笔记" class="headerlink" title="Maven学习笔记"></a>Maven学习笔记</h1><h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h1><p>已经配置过JAVA环境及Maven环境变量的配置工作</p><p><code>mvn- v</code></p><p>查看当前mvn版本及系统环境状态</p><p><code>mvn help:system</code></p><p>打印出所有的JAVA系统属性和环境变量</p><p><code>~/.m2</code></p><p><code>~</code> 代表用户目录<br><code>.m2</code> 文件夹下有Maven的全部资源文件</p><h2 id="m2eclipse插件"><a href="#m2eclipse插件" class="headerlink" title="m2eclipse插件"></a>m2eclipse插件</h2><p>详情参考另一篇Maven博客中插件安装方法<a href="http://blog.csdn.net/dj741/article/details/72859001" target="_blank" rel="noopener">Maven</a><br>组件用途参考P10-P11</p><p>不要使用ME自带的Maven插件</p><h1 id="2-入门使用"><a href="#2-入门使用" class="headerlink" title="2.入门使用"></a>2.入门使用</h1><h2 id="编写pom"><a href="#编写pom" class="headerlink" title="编写pom"></a>编写pom</h2><p>POM(Project Object Model，项目对象模型)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">porject</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Hello World Project<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>groupId</code></p><p>定义了项目属于哪个组</p><p><code>artifactId</code></p><p>定义了当前Maven项目在组中唯一的ID</p><p><code>version</code></p><p>项目版本，<code>SNAPSHOT</code> 表示快照，项目处于开发中</p><p><code>name</code></p><p>一个对于用户更为友好的项目名称<br>Maven优点，项目对象模型最大程度地与实际代码相独立，解耦或者正交性。</p><h2 id="Helloworld"><a href="#Helloworld" class="headerlink" title="Helloworld"></a>Helloworld</h2><h2 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h2><h3 id="加入junit依赖"><a href="#加入junit依赖" class="headerlink" title="加入junit依赖"></a>加入junit依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-world<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Hello World Project<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>mvn clean compile</code><br>项目根目录下执行后进行项目编译<br><code>mvn clean test</code><br>Maven测试命令，先自动执行项目主资源处理，主代码编译，测试资源处理，测试代码编译工作。<br><code>mvn clean package</code><br>默认打包类型为jar，即jar插件的jar目标将项目的主代码打包成一个 <code>项目名.jar</code> 的文件。<br><code>mvn clean install</code><br>复制被打包的jar到其他的项目中需要安装。</p><h2 id="在ME中使用maven项目操作依旧参照上篇博客"><a href="#在ME中使用maven项目操作依旧参照上篇博客" class="headerlink" title="在ME中使用maven项目操作依旧参照上篇博客"></a>在ME中使用maven项目操作依旧参照上篇博客</h2><p>#坐标和依赖</p><p>一个构件必须明确定义自己的坐标，一组Maven坐标是通过一些元素定义的：<br><code>groupId</code><br><code>artifactId</code><br><code>version</code><br><code>packaging</code> | 可选<br><code>classifier</code>    | 不能直接定义</p><p><strong>groupId</strong></p><p>当前Maven项目隶属的实际项目。一个实际项目往往会被划分成很多模块。只定义到组织级别。</p><p><strong>artifactId</strong></p><p>定义实际项目中的一个Maven项目。</p><p><strong>version</strong></p><p>版本。</p><p><strong>packaging</strong></p><p>打包方式，默认为jar。</p><p><strong>classifier</strong></p><p>帮助定义构建输出的一些附属构件。</p><h2 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h2><p><code>Compile</code><br>编译依赖范围。默认值，对于编译、测试、运行三种classpath都有效。<br><code>Test</code><br>测试依赖范围。典型的例子是JUnit，只在编译测试代码及运行测试的时候才需要。<br><code>Provided</code><br>已提供依赖范围。典型例子是servlet-api，对于编译和测试classpath有效，但在运行时无效。<br><code>Runtime</code><br>运行时依赖范围。典型例子是JDBC驱动实现，对于测试和运行classpath有效，但在编译主代码时无效。<br><code>System</code><br>系统依赖范围。必须通过systemPath元素显式地置顶依赖文件的路径。由于此依赖不是通过Maven仓库解析的，而且往往与本机系统绑定，可能造成构建的不可移植。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.sql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdbc-stdext<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>Import</code><br>导入依赖范围。不会对三种classpath产生实际的影响。</p><table><thead><tr><th style="text-align:left">依赖范围(Scope)</th><th style="text-align:center">对于编译classpath有效</th><th style="text-align:center">对于测试classpath有效</th><th style="text-align:center">对于运行时classpath有效</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:left">compile</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">spring-core</td></tr><tr><td style="text-align:left">test</td><td style="text-align:center">-</td><td style="text-align:center">Y</td><td style="text-align:center">-</td><td style="text-align:center">JUnit</td></tr><tr><td style="text-align:left">provided</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">-</td><td style="text-align:center">servlet-api</td></tr><tr><td style="text-align:left">runtime</td><td style="text-align:center">-</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">JDBC驱动实现</td></tr><tr><td style="text-align:left">system</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">-</td><td style="text-align:center">本地的，Maven仓库之外的类库文件</td></tr></tbody></table><h2 id="传递性依赖"><a href="#传递性依赖" class="headerlink" title="传递性依赖"></a>传递性依赖</h2><p>Maven会自动添加依赖关系，如使用Spring-Framwork的时候不用考虑它依赖了什么，也不用担心引入多余的依赖。</p><h3 id="传递性依赖和依赖范围"><a href="#传递性依赖和依赖范围" class="headerlink" title="传递性依赖和依赖范围"></a>传递性依赖和依赖范围</h3><p>假设A依赖于B，B依赖于C，我们说A对于B是第一直接依赖，B对于C是第二直接依赖，A对于C是传递性依赖。第一直接依赖的范围和第二直接依赖的范围决定了传递性依赖的范围。<br>下表左边一列表示第一直接依赖范围，最上一行表示第二直接依赖范围，中间的交叉单元格则表示传递性依赖范围：</p><table><thead><tr><th style="text-align:left">-</th><th style="text-align:center">compile</th><th style="text-align:center">test</th><th style="text-align:center">provided</th><th style="text-align:center">runtime</th></tr></thead><tbody><tr><td style="text-align:left">compile</td><td style="text-align:center">compile</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">runtime</td></tr><tr><td style="text-align:left">test</td><td style="text-align:center">test</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">test</td></tr><tr><td style="text-align:left">provided</td><td style="text-align:center">provided</td><td style="text-align:center">-</td><td style="text-align:center">provided</td><td style="text-align:center">provided</td></tr><tr><td style="text-align:left">runtime</td><td style="text-align:center">runtime</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">runtime</td></tr></tbody></table><h2 id="依赖调解"><a href="#依赖调解" class="headerlink" title="依赖调解"></a>依赖调解</h2><p>有时候我们只关心项目的直接依赖是什么，而不用考虑这些直接依赖会引入什么传递性依赖。但有时候，当传递性依赖造成问题的时候，我们就需要清楚地知道该传递性依赖是从哪条依赖路径引入的。<br>Maven依赖调解的第一原则：<strong>路径最近者优先</strong>。<br>例如：<br>项目A有这样的依赖关系：A-&gt;B-&gt;C-&gt;X(1.0)、A-&gt;D-&gt;X(2.0)<br>其中X(1.0)的路径长度为3，X(2.0)的路径长度为2，因此X(2.0)会被解析使用。<br>Maven依赖调解的第二原则：<strong>第一声明者优先</strong>。<br>在依赖路径长度相等的前提下，在POM中依赖声明的顺序决定了谁会被解析使用，顺序最靠前的那个依赖优胜。<br>例如：<br>项目A有以下依赖关系：A-&gt;B-&gt;Y(1.0)、A-&gt;C-&gt;Y(2.0)，Y(1.0)和Y(2.0)依赖路径长度是一样的，都是2。顺序最靠前的那个依赖优胜。</p><h2 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h2><p>假设有这样一个依赖关系，项目A依赖于项目B，B依赖于项目X和Y，B对于X和Y的依赖都是可选依赖：A-&gt;B、B-&gt;X(可选)、B-&gt;Y(可选)。根据传递性依赖的定义，如果所有这三个依赖的范围都是compile，那么X、Y就是A的compile范围传递性依赖。然而，由于这里X、Y是可选依赖，依赖将不会得以传递，换句话说，X、Y将不会对A有任何影响。<br>可能项目B实现了两个特性，其中的特性一依赖于X，特性二依赖于Y,而且这两个特性是互斥的，用户不可能同时使用两个特性。比如B是一个持久层隔离工具包，支持多种数据库，构建时需要两种数据库的驱动程序，但在使用这个工具包的时候，只会依赖一种数据库。</p><h2 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h2><p>传递性依赖会给项目隐式的引入很多依赖，这极大地简化了项目依赖的管理，但是有些时候这种特性也会带来问题。<br>例如，当一个项目有一个第三方依赖，而这个第三方依赖由于某些原因依赖了另外一个类库的SNAPSHOT版本，那么这个SNAPSHOT就会成为当前项目的传递性依赖，而SNAPSHOT的不稳定性就会直接影响到当前的项目。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>project-c<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用 <code>exclusions</code> 元素声明排除依赖， <code>exclusions</code> 可以包含一个或者多个 <code>exclusion</code> 子元素，因此可以排除一个或者多个传递性依赖。</p><h2 id="归类依赖"><a href="#归类依赖" class="headerlink" title="归类依赖"></a>归类依赖</h2><p>在升级项目的时候只需要修改一处，类似于配置文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.juvenxu.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Account Email<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">springframework.version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">springframework.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springframework.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="优化依赖"><a href="#优化依赖" class="headerlink" title="优化依赖"></a>优化依赖</h2><p>Maven会自动解析所有项目的直接依赖和传递依赖，并且根据规则正确判断每个依赖的范围，对于一些依赖冲突，异能进行调节，以确保任何一个构件只有唯一的版本在依赖中存在。最后得到的那些依赖被称为<strong>已解析依赖</strong>。<br>依赖树。</p><h1 id="使用Maven构建Web应用"><a href="#使用Maven构建Web应用" class="headerlink" title="使用Maven构建Web应用"></a>使用Maven构建Web应用</h1><p>指定打包方式为war</p><h2 id="使用Cargo实现自动化部署"><a href="#使用Cargo实现自动化部署" class="headerlink" title="使用Cargo实现自动化部署"></a>使用Cargo实现自动化部署</h2><p><code>cargo-maven2-plugin</code> 主要服务于自动化部署</p><h3 id="部署至本地Web容器"><a href="#部署至本地Web容器" class="headerlink" title="部署至本地Web容器"></a>部署至本地Web容器</h3><p><code>standalone</code> 模式。Cargo会从Web容器的安装目录复一份配置到用户指定的目录，然后在此基础上部署应用，每次重新构建的时候，这个目录都会被清空，所有配置被重新生成。<br><code>existing</code> 模式。用户需要指定现有的Web容器配置目录，然后Cargo会直接使用这些配置并将应用部署到其对应的位置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.cargo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cargo-maven2-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">containerId</span>&gt;</span>tomcat7x<span class="tag">&lt;/<span class="name">containerId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">home</span>&gt;</span>D:\apache-tomcat-7.0.67<span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>standalone<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">home</span>&gt;</span>$&#123;project.build.directory&#125;/tomcat7x<span class="tag">&lt;/<span class="name">home</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cargo.servlet.port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">cargo.servlet.port</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="部署至远程Web容器"><a href="#部署至远程Web容器" class="headerlink" title="部署至远程Web容器"></a>部署至远程Web容器</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.cargo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cargo-maven2-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">containerId</span>&gt;</span>tomcat7x<span class="tag">&lt;/<span class="name">containerId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>remote<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">container</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cargo.remote.username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">cargo.remote.username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cargo.remote.password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">cargo.remote.password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cargo.tomcat.manager.url</span>&gt;</span>http://localhost:8080/manager<span class="tag">&lt;/<span class="name">cargo.tomcat.manager.url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Maven综述</title>
      <link href="/2017/06/19/2017-06-19-Maven%E7%BB%BC%E8%BF%B0/"/>
      <url>/2017/06/19/2017-06-19-Maven%E7%BB%BC%E8%BF%B0/</url>
      <content type="html"><![CDATA[<p><img src="/2017/06/19/2017-06-19-Maven综述/Maven综述封面.jpg" alt="Maven综述"></p><p>Maven综述</p><a id="more"></a><p>[TOC]</p><h1 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h1><p>是apache下的一个项目管理工具<br><a href="http://maven.apache.org/" target="_blank" rel="noopener">apache/maven</a><br><a href="https://github.com/apache/maven" target="_blank" rel="noopener">github|apache/maven</a><br><a href="http://blog.csdn.net/tomato__/article/details/13625497" target="_blank" rel="noopener">Maven的pom.xml文件详解——Build Settings</a></p><h1 id="Maven常用数据"><a href="#Maven常用数据" class="headerlink" title="Maven常用数据"></a>Maven常用数据</h1><p><code>mvn archetype:generate</code> ：创建 Maven 项目<br><code>mvn compile</code> ：编译源代码<br><code>mvn test-compile</code> ：编译测试代码<br><code>mvn test</code> ： 运行应用程序中的单元测试<br><code>mvn site</code> ： 生成项目相关信息的网站<br><code>mvn clean</code> ：清除目标目录中的生成结果<br><code>mvn package</code> ： 依据项目生成 jar 文件<br><code>mvn install</code> ：在本地 Repository 中安装 jar<br><code>mvn deploy</code>：将jar包发布到远程仓库<br><code>mvn eclipse:eclipse</code> ：生成 Eclipse 项目文件</p><h1 id="Maven详解"><a href="#Maven详解" class="headerlink" title="Maven详解"></a>Maven详解</h1><p><a href="http://www.yiibai.com/maven/" target="_blank" rel="noopener">Maven教程</a><br><a href="http://www.cnblogs.com/hongwz/p/5456578.html" target="_blank" rel="noopener">Maven详解</a></p><h1 id="Maven安装配置-windows环境配置"><a href="#Maven安装配置-windows环境配置" class="headerlink" title="Maven安装配置|windows环境配置"></a>Maven安装配置|windows环境配置</h1><h2 id="1）java环境变量"><a href="#1）java环境变量" class="headerlink" title="1）java环境变量"></a>1）java环境变量</h2><h2 id="2）下载Maven"><a href="#2）下载Maven" class="headerlink" title="2）下载Maven"></a>2）下载Maven</h2><h2 id="3）Maven环境变量"><a href="#3）Maven环境变量" class="headerlink" title="3）Maven环境变量"></a>3）Maven环境变量</h2><p>M2_HOME 和 MAVEN_HOME<br>指向maven包</p><h2 id="4）检查"><a href="#4）检查" class="headerlink" title="4）检查"></a>4）检查</h2><p><code>mvn -version</code></p><h1 id="Maven资源库"><a href="#Maven资源库" class="headerlink" title="Maven资源库"></a>Maven资源库</h1><p><a href="http://blog.csdn.net/wanghantong/article/details/36427433" target="_blank" rel="noopener"> Maven详解之仓库——本地仓库、远程仓库</a><br>jar包来源顺序：本地仓库—-&gt;私服（如果设置的话）—-&gt;中央仓库（远程仓库）<br>默认所有的Maven仓库都服用一个本地仓库<br>中央仓库是唯一内置的远程仓库：<br><a href="http://repo1.maven.org/maven2/" target="_blank" rel="noopener">Maven中央仓库地址</a><br><a href="http://search.maven.org/" target="_blank" rel="noopener">Maven中央仓库地址更改版本</a></p><h2 id="Maven本地资源库"><a href="#Maven本地资源库" class="headerlink" title="Maven本地资源库"></a>Maven本地资源库</h2><h3 id="更改本地资源库"><a href="#更改本地资源库" class="headerlink" title="更改本地资源库"></a>更改本地资源库</h3><p>默认位置（用户文件夹下）：<code>~/.m2/repository</code><br><code>conf\settings.xml</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;localRepository&gt;D:\apache-maven-3.5.0\repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure></p><h3 id="更新本地资源库"><a href="#更新本地资源库" class="headerlink" title="更新本地资源库"></a>更新本地资源库</h3><p><code>mvn archetype:generate</code></p><h2 id="Maven远程存储库"><a href="#Maven远程存储库" class="headerlink" title="Maven远程存储库"></a>Maven远程存储库</h2><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss<span class="tag">&lt;/<span class="name">id</span>&gt;</span>     <span class="comment">&lt;!----&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span>   <span class="comment">&lt;!----&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.com/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  <span class="comment">&lt;!----&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span>  <span class="comment">&lt;!----&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="comment">&lt;!-- never,always,interval n --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span><span class="comment">&lt;!-- fail,ignore --&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span> <span class="comment">&lt;!----&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>    <span class="comment">&lt;!----&gt;</span></span><br><span class="line">                default</span><br><span class="line">            <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven依赖机制"><a href="#Maven依赖机制" class="headerlink" title="Maven依赖机制"></a>Maven依赖机制</h2><p><a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html" target="_blank" rel="noopener">Introduction to the Dependency Mechanism</a></p><p><code>compile</code>: 默认的scope。编译、测试、打包全都需要。compile参与依赖传递，就是说，项目A依赖于B(依赖scope是compile)，项目C依赖于你的项目A，那么C也就依赖于B。</p><p><code>provided</code>: 表示JDK或者容器会在Runtime时提供这些(jar)，如servlet api，部署时是不需要它的，因为应用服务器肯定有这些东西。provided的东西在编译和测试时会用到，不参与传递依赖。</p><p><code>runtime</code>: 表示编译时不需要，但测试和运行时需要，最终打包时会包含进去。</p><p><code>test</code>: 只用于测试阶段（测试的编译和测试的运行），典型的就是junit的jar。</p><p><code>system</code>: 和provided类似，但要求jar是系统里已有的，不会在repository里找，如rt.jar,tools.jar这些。</p><p><code>import</code>: 简单的说，项目的pom可以继承另一个项目的pom，从而继承了父项目的依赖关系，但是因为之后single inheritance的限制，所以创造了import，使得你可以“导入”或者说“继承”任何一到多个项目的依赖关系。</p><h4 id="lt-dependency-management-gt-和-lt-dependencies-gt-的区别："><a href="#lt-dependency-management-gt-和-lt-dependencies-gt-的区别：" class="headerlink" title="&lt;dependency management&gt;和&lt;dependencies&gt;的区别："></a><code>&lt;dependency management&gt;</code>和<code>&lt;dependencies&gt;</code>的区别：</h4><p>在父POM中用<dependency management="">定义好version, scope, 和exclusions后，可以被子POM中用<dependencies>定义的依赖所继承使用。这样，如果有多个子POM的话，可以确保用同一套version, scope, 和exclusions。</dependencies></dependency></p><p><code>&lt;dependencyManagement&gt;</code>部分。它指示要替换为指定POM的<code>&lt;dependencyManagement&gt;</code>部分中的依赖关系的有效列表的依赖关系。由于它们被替换，具有导入范围的依赖关系实际上并不参与限制依赖关系的传递性。</p><p>编译时依赖关系仍然是编译范围，即使它们是传递性的。<br>|-        |compile     |provided|runtime |test|<br>|:—–   |:——     |:—— |:—— |:– |<br>|compile  |    compile(*) |-        |runtime |     -|<br>|provided |    provided   |-        |provided|     -|<br>|runtime  |    runtime       |-        |runtime |     -|<br>|test     |    test       |-        |test    |     -|</p><h1 id="使用Maven创建Web应用程序项目-Eclipse下"><a href="#使用Maven创建Web应用程序项目-Eclipse下" class="headerlink" title="使用Maven创建Web应用程序项目(Eclipse下)"></a>使用Maven创建Web应用程序项目(Eclipse下)</h1><h2 id="Eclipse下配置Maven环境"><a href="#Eclipse下配置Maven环境" class="headerlink" title="Eclipse下配置Maven环境"></a>Eclipse下配置Maven环境</h2><p><a href="http://www.cnblogs.com/fancyzero/archive/2012/06/09/maven3.html" target="_blank" rel="noopener">myeclipse 上安装 Maven3</a><br>添加maven文件夹依赖和<code>setting.xml</code></p><h2 id="使用Maven创建Web应用项目"><a href="#使用Maven创建Web应用项目" class="headerlink" title="使用Maven创建Web应用项目"></a>使用Maven创建Web应用项目</h2><p><a href="http://jingyan.baidu.com/article/22a299b5123ddc9e19376a14.html" target="_blank" rel="noopener">Myeclipse 10 Maven 构建 Java Web 项目</a><br><a href="http://blog.csdn.net/chuyuqing/article/details/28879477" target="_blank" rel="noopener"> 如何用Maven创建web项目（具体步骤）</a><br><a href="http://blog.csdn.net/clementad/article/details/46592557" target="_blank" rel="noopener">图文详解MyEclipse中新建Maven webapp项目的步骤（很详细）</a></p><p><code>GroupId</code>：一般是公司名或组织名<br><code>ArtifactId</code>：一般是project名<br><code>Packaging</code>：打包类型，jar/war/rar/ear/pom等，默认是jar<br><code>Version</code>：版本号，GroupId+ArtifactId+Packaging+Version构成项目的唯一标识<br><code>Snapshot</code>：标识一个正在开发阶段、会经常更新、但尚未发布的版本</p><p><a href="http://jishiweili.iteye.com/blog/2080611" target="_blank" rel="noopener">Maven搭建SSH</a><br>目录结构：<br><img src="http://img.blog.csdn.net/20170605005907786?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGo3NDE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="目录结构"></p><h2 id="Maven-web项目部署运行"><a href="#Maven-web项目部署运行" class="headerlink" title="Maven web项目部署运行"></a>Maven web项目部署运行</h2><p><a href="http://blog.csdn.net/maosijunzi/article/details/21160965" target="_blank" rel="noopener"> eclipse构建及运行maven web项目</a></p><h3 id="m2eclipse插件-已经安装"><a href="#m2eclipse插件-已经安装" class="headerlink" title="m2eclipse插件|已经安装"></a>m2eclipse插件|已经安装</h3><p>直接在在线时长上搜索<code>m2e</code><br><code>Maven Integration for Eclipse</code><br>或直接从站点安装<br><code>http://download.eclipse.org/technology/m2e/releases</code></p><h3 id="tomcat中配置Maven"><a href="#tomcat中配置Maven" class="headerlink" title="tomcat中配置Maven"></a>tomcat中配置Maven</h3><h4 id="tomcat角色管理，设置超级管理员"><a href="#tomcat角色管理，设置超级管理员" class="headerlink" title="tomcat角色管理，设置超级管理员"></a>tomcat角色管理，设置超级管理员</h4><p><code>tomcat_home/conf/tomcat_users.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"admin-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-gui"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-script"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-jmx"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">"manager-status"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">"admin"</span> <span class="attr">password</span>=<span class="string">"admin"</span> <span class="attr">roles</span>=<span class="string">"manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="修改Maven配置文件"><a href="#修改Maven配置文件" class="headerlink" title="修改Maven配置文件"></a>修改Maven配置文件</h4><p><code>maven_home/conf/settings.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>tomcat<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">password</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="关于项目中pom-xml报错问题"><a href="#关于项目中pom-xml报错问题" class="headerlink" title="关于项目中pom.xml报错问题"></a>关于项目中<code>pom.xml</code>报错问题</h2><p>仔细检查依赖关系，点击pom.xml视图，查看报错信息，然后进入<code>setting.xml</code>中设置的的<code>repository</code>路径检查jar包，可以删除然后右键–&gt;maven–&gt;update</p><p>tomcat 7 下 在web.xml中添加页面编码filter遇到：Java.lang.NoSuchMethodException: org.apache.catalina.deploy.WebXml addFilter</p><p><a href="http://blog.csdn.net/stormwy/article/details/36901707" target="_blank" rel="noopener">org.apache.catalina.deploy.WebXml addFilter</a></p><h2 id="Maven项目加载本地jar"><a href="#Maven项目加载本地jar" class="headerlink" title="Maven项目加载本地jar"></a>Maven项目加载本地jar</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.dj741.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>    <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!--自定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span> <span class="comment">&lt;!--system，类似provided，需要显式提供依赖的jar以后，Maven就不会在Repository中查找它--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/lib/dj741.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span> <span class="comment">&lt;!--项目根目录下的lib文件夹下--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>版本控制概述|VSS/CVS/SVN/Git比较|Windows下SVN搭建详细介绍</title>
      <link href="/2017/05/03/2017-05-03-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%A6%82%E8%BF%B0VSSCVSSVNGit%E6%AF%94%E8%BE%83Windows%E4%B8%8BSVN%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/"/>
      <url>/2017/05/03/2017-05-03-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E6%A6%82%E8%BF%B0VSSCVSSVNGit%E6%AF%94%E8%BE%83Windows%E4%B8%8BSVN%E6%90%AD%E5%BB%BA%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="版本控制介绍"><a href="#版本控制介绍" class="headerlink" title="版本控制介绍"></a>版本控制介绍</h1><p><a href="http://www.cnblogs.com/yanghongliang/p/5750306.html" target="_blank" rel="noopener">版本控制——总结</a><br>里边有关于文字性质定义</p><a id="more"></a><h1 id="常用版本控制技术"><a href="#常用版本控制技术" class="headerlink" title="常用版本控制技术"></a>常用版本控制技术</h1><h2 id="vss-Visual-SourceSafe"><a href="#vss-Visual-SourceSafe" class="headerlink" title="vss(Visual SourceSafe)"></a>vss(Visual SourceSafe)</h2><p>作为Microsoft Visual Studio 的一名成员，它主要任务就是负责项目文件的管理，几乎可以适用任何软件项目。<br>仅适用于团队开发，不适用于企业级开发。</p><h2 id="cvs-Concurrent-Versions-System"><a href="#cvs-Concurrent-Versions-System" class="headerlink" title="cvs(Concurrent Versions System)"></a>cvs(Concurrent Versions System)</h2><p>一个典型的服务器/客户端软件，有Unix版本的CVS 、Linux版本的CVS和Windows版本的CVS。<br>功能相对单一，适用于几人的小团队。<br>代表协作版本系统或者并发版本系统，是一种版本控制系统，方便软件的开发和使用者协同工作。</p><h2 id="svn-Subversion"><a href="#svn-Subversion" class="headerlink" title="svn(Subversion)"></a>svn(Subversion)</h2><p>是一个开放源代码的版本控制系统，相对于的RCS、CVS，采用了分支管理系统，它的设计目标就是取代CVS。互联网上越来越多的控制服务从CVS转移到Subversion。</p><h2 id="git"><a href="#git" class="headerlink" title="git"></a>git</h2><p>Git本身关心档案的整体性是否有改变，但多数的CVS，或Subversion系统则在乎档案内容的差异。因此Git更像一个档案系统，直接在本机上取得资料，不必连线到host端取资料回来。</p><h1 id="区别-转自网络"><a href="#区别-转自网络" class="headerlink" title="区别(转自网络)"></a>区别(转自网络)</h1><table><thead><tr><th style="text-align:left">特征</th><th style="text-align:left">CVS</th><th style="text-align:left">Git</th><th style="text-align:center">Mercurial</th><th style="text-align:left">Subversion</th></tr></thead><tbody><tr><td style="text-align:left">是否原子提交</td><td style="text-align:left">否</td><td style="text-align:left">是</td><td style="text-align:center">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">文件和目录是否可以移动或重命名</td><td style="text-align:left">否 强制手动进行, 可能会损坏历史记录</td><td style="text-align:left">是</td><td style="text-align:center">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">在移动或重命名之后智能合并</td><td style="text-align:left">否</td><td style="text-align:left">否</td><td style="text-align:center">是</td><td style="text-align:left">否</td></tr><tr><td style="text-align:left">文件和目录拷贝是否支持</td><td style="text-align:left">否</td><td style="text-align:left">否</td><td style="text-align:center">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">远程存储仓库的备份</td><td style="text-align:left">间接的. 可以使用John Polstra写的CVSup</td><td style="text-align:left">是</td><td style="text-align:center">是</td><td style="text-align:left">间接的. 可以使用Chia-liang Kao的SVN::Mirror插件(好像是台湾人)或Shlomi Fish的SVN-Pusher工具</td></tr><tr><td style="text-align:left">是否传递变更到父仓库</td><td style="text-align:left">否</td><td style="text-align:left">是</td><td style="text-align:center">是</td><td style="text-align:left">是的, 使用要么是Chia-Ling Kao的SVN::Mirror脚本或者Shlomi Fish的svn-push工具</td></tr><tr><td style="text-align:left">仓库权限</td><td style="text-align:left">有限“pre-commit hook scripts“能够被用来实现各种权限控制系统</td><td style="text-align:left"></td><td style="text-align:center">是</td><td style="text-align:left">是的. 基于HTTP权限的WebDAV-based模块能够支持基于目录级的仓库</td></tr><tr><td style="text-align:left">变更集</td><td style="text-align:left">否</td><td style="text-align:left">是</td><td style="text-align:center">是</td><td style="text-align:left">部分支持，对于一次提交会隐式创建一个变更集</td></tr><tr><td style="text-align:left">跟踪线性的文件历史</td><td style="text-align:left">是</td><td style="text-align:left">是</td><td style="text-align:center">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">能够只在仓库的单目录下作用</td><td style="text-align:left">是</td><td style="text-align:left">否</td><td style="text-align:center">是的. 基于HTTP权限的WebDAV-based模块能够支持基于目录级的仓库</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">跟踪未提交的变化</td><td style="text-align:left">是</td><td style="text-align:left">是</td><td style="text-align:center">是</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">基于单个文件的提交信息</td><td style="text-align:left">否，基于单次变化</td><td style="text-align:left">否，基于变更集</td><td style="text-align:center">否</td><td style="text-align:left">否，无特征</td></tr><tr><td style="text-align:left">文档</td><td style="text-align:left">非常棒. 有很多在线的tutorials和资源, 在线的书籍. 命令行客户端也支持一个在线的帮助系统</td><td style="text-align:left">良好. 短的帮助比较简洁难懂. man页很有分量, 但容易误解. 有很多tutorial</td><td style="text-align:center">很好. 有基于公司的书籍和wiki. 每个命令都集成了帮助</td><td style="text-align:left">很好. 有一些在线的书籍和一些在线的tutorials和资源. 并且书籍是以docbook/xml写的所以很容易变换成其他格式. 命令行同样提供了在线的帮助系统</td></tr><tr><td style="text-align:left">配置是否轻松</td><td style="text-align:left">好. 是个事实上的标准. 基于每个系统都有并且很容易配置</td><td style="text-align:left">好. 在现有平台上二进制可用. 需要C编译器和Perl. 在windows上需要cygwin. 并有一些Unix特征</td><td style="text-align:center">非常好. 几乎所有平台都有二进制包. 从源码编译需要python2.3以上, 并且需要C编译器</td><td style="text-align:left">Subversion服务器需要安装在apache2模块里(如果有人希望HTTP作为底层协议的话)或使用它自身的服务器. 客户端需要Subversion特征的逻辑还有WebDAV库(针对HTTP). 安装组件很直接, 但是需要一些额外的工作(假定subversion在某些平台没有二进制包可用)</td></tr><tr><td style="text-align:left">命令集</td><td style="text-align:left">包含了3个经常用到的命令的简单的命令集(cvs commit, cvs update和cvs checkout)和其它一些</td><td style="text-align:left">命令集很丰富, 并且和CVS不兼容</td><td style="text-align:center">尝试模仿CVS交互方式, 但是偏离了基于不同的设计的意图</td><td style="text-align:left">类CVS的命令集, 能够很容易被CVS用户使用</td></tr><tr><td style="text-align:left">网络支持</td><td style="text-align:left">好. cvs在不同的场合使用不同的协议. 协议能够通过ssh链接的加密隧道进行</td><td style="text-align:left">非常棒. 能够使用本地的git协议, 但也能在rsync, ssh, HTTP和HTTPS上使用</td><td style="text-align:center">非常棒. 使用HTTP或ssh. 远程访问会非常安全, 在只读网络里不需要上锁</td><td style="text-align:left">非常好. Subversion服务器支持WebDAV+DeltaV(基于HTTP或HTTPS)作为底层协议, 或者它自身的协议同样能在ssh链接通道里使用.</td></tr><tr><td style="text-align:left">可移植性</td><td style="text-align:left">好. 客户端能在UNIX, Windows和Mac OS上使用. 服务器端能在UNIX, 附有UNIX模拟层的Windows上使用</td><td style="text-align:left">客户端运行在大多数的UNIX系统上, 但没有MS-Windows本地程序. 基于cygwin的系统看起来也能使用</td><td style="text-align:center">非常棒. 运行在基于所有能运行python的平台.仓库是兼容性的基于CPU结构和字节序的</td><td style="text-align:left">非常好. 客户端和服务器端都能在UNIX, Windows和Mac OS X上运行</td></tr><tr><td style="text-align:left">web接口</td><td style="text-align:left">是的. CVSweb, ViewVC, Chora和wwCVS</td><td style="text-align:left">是的. Gitweb包含在发布包中</td><td style="text-align:center">是的. Web接口是内置组件</td><td style="text-align:left">是的. ViewVC, SVN::Web, WebSVN, ViewSVN, mod_svn_view, Chora, Trac, SVN::RaWeb::Light, SVN Browser, Insurrection和perl_svn.另外, Subversion的apache服务也提供了一个基础的web接口</td></tr><tr><td style="text-align:left">图形用户界面</td><td style="text-align:left">非常好. 有很多图形界面可以用: WinCVS, Cervisia(对于KDE), TortoiseCVS(Windows浏览器插件)</td><td style="text-align:left">Gitk包含在发行版中. Qqit和Git-gui工具也可使用</td><td style="text-align:center">通过hgit扩展查看历史; 检入扩展(hgct)使得提交很容易. 一些第三方的IDEs和GUI工具(如eric3, meld)有一些集成的Mercurial支持</td><td style="text-align:left">非常好. 有很多GUIs可用: RapidSVN(跨平台), TortoiseSVN(Windows浏览器插件), Jsvn(java), 等. 大多数都还在开发中</td></tr></tbody></table><h1 id="SVN使用简介"><a href="#SVN使用简介" class="headerlink" title="SVN使用简介"></a>SVN使用简介</h1><p>详细流程请参考以下博文，具体细节注意的已经写出。<br><a href="http://www.cnblogs.com/xiaobaihome/archive/2012/03/20/2407610.html" target="_blank" rel="noopener">SVN服务器搭建和使用（一）|软件下载安装</a><br><a href="http://www.cnblogs.com/xiaobaihome/archive/2012/03/20/2407979.html" target="_blank" rel="noopener">SVN服务器搭建和使用（二）|服务器搭建使用</a><br><a href="http://www.cnblogs.com/xiaobaihome/archive/2012/03/20/2408089.html" target="_blank" rel="noopener">SVN服务器搭建和使用（三）|SVN具体操作</a><br><a href="http://jingyan.baidu.com/article/86112f137d522d2736978765.html" target="_blank" rel="noopener">Windows下搭建SVN服务器</a></p><h2 id="搭建SVN服务器"><a href="#搭建SVN服务器" class="headerlink" title="搭建SVN服务器"></a>搭建SVN服务器</h2><p><a href="http://subversion.apache.org/packages.html" target="_blank" rel="noopener">Apache Subversion Binary Packages</a><br>从官网下载windows版本的Apache Subversion Binary Packages<br>选择VisualSVN版本服务器下载安装VisualSVN Server</p><h2 id="TortoiseSVN客户端搭建"><a href="#TortoiseSVN客户端搭建" class="headerlink" title="TortoiseSVN客户端搭建"></a>TortoiseSVN客户端搭建</h2><p><a href="https://tortoisesvn.net/downloads.html" target="_blank" rel="noopener">TortoiseSVN</a><br>对应版本的TortoiseSVN客户端及汉化包</p><h3 id="win7右键无法出现SVN选项"><a href="#win7右键无法出现SVN选项" class="headerlink" title="win7右键无法出现SVN选项"></a>win7右键无法出现SVN选项</h3><p>安装TortoiseSVN记着勾选第二个选项<em>command line client tools</em>，如果忘记请重新点击安装文件<em>modify</em>中进行重新安装。</p><h2 id="导出到服务器"><a href="#导出到服务器" class="headerlink" title="导出到服务器"></a>导出到服务器</h2><p>主要用于将项目部署到服务器</p><h2 id="客户端检出文件"><a href="#客户端检出文件" class="headerlink" title="客户端检出文件"></a>客户端检出文件</h2><p>鼠标右键点击<em>check out</em></p><h3 id="检出完成后无法显示svn文件夹图标"><a href="#检出完成后无法显示svn文件夹图标" class="headerlink" title="检出完成后无法显示svn文件夹图标"></a>检出完成后无法显示svn文件夹图标</h3><p><a href="http://jingyan.baidu.com/article/0a52e3f43f3f6bbf63ed7259.html" target="_blank" rel="noopener">SVN绿色对号消失，.svn目录在，怎么重新连接</a></p><h1 id="Eclipse集成SVN"><a href="#Eclipse集成SVN" class="headerlink" title="Eclipse集成SVN"></a>Eclipse集成SVN</h1><p><a href="http://jingyan.baidu.com/article/63f236280a37680208ab3db7.html" target="_blank" rel="noopener">Eclipse安装SVN教程</a><br><a href="http://jingyan.baidu.com/article/eae07827a977b61fed548572.html" target="_blank" rel="noopener">MyEclipse安装SVN教程</a><br>注意网址<code>http://subclipse.tigris.org/update_1.8.x</code></p><h1 id="Eclipse下使用svn"><a href="#Eclipse下使用svn" class="headerlink" title="Eclipse下使用svn"></a>Eclipse下使用svn</h1><p><a href="http://blog.csdn.net/v123411739/article/details/22512133" target="_blank" rel="noopener"> Eclipse中使用SVN</a><br><a href="http://www.cnblogs.com/keyi/p/5949370.html" target="_blank" rel="noopener">MyEclipse中SVN的常见的使用方法</a><br>新建资源库<br>新建项目<br>project –&gt; team</p>]]></content>
      
      <categories>
          
          <category> 后台 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>神经网络风格画 Neural Style Art</title>
      <link href="/2017/04/08/2017-04-08-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E9%A3%8E%E6%A0%BC%E7%94%BB-Neural-Style-Art/"/>
      <url>/2017/04/08/2017-04-08-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E9%A3%8E%E6%A0%BC%E7%94%BB-Neural-Style-Art/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主看到了一篇知乎上有关于代码实现照片滤镜的文章<br><a href="https://zhuanlan.zhihu.com/p/26066756?utm_source=qq&amp;utm_medium=social" target="_blank" rel="noopener">安利一个很火的 Github 滤镜项目</a><br>照片风格迁移<br><a href="https://zhuanlan.zhihu.com/p/21978527" target="_blank" rel="noopener">7 个 App 可让你的照片变成艺术品</a></p><a id="more"></a><h1 id="Neural-Style-项目"><a href="#Neural-Style-项目" class="headerlink" title="Neural Style 项目"></a>Neural Style 项目</h1><p>博主目前的水平还看不懂整个项目的代码跟底层算法实现到底是什么原理<br>google+baidu了一番很是想要亲自体验下这个算法，美化一下自己的照片。<br>下边是github上neural-style项目的主页：<br><a href="https://github.com/jcjohnson/neural-style" target="_blank" rel="noopener">neural-style | github</a><br>安装说明：<br><a href="https://github.com/jcjohnson/neural-style/blob/master/INSTALL.md" target="_blank" rel="noopener">neural-style | github | 安装使用说明</a></p><h1 id="项目部署前准备"><a href="#项目部署前准备" class="headerlink" title="项目部署前准备"></a>项目部署前准备</h1><p>可以了解到该项目代码基于 Torch，并已经在 Ubuntu 14.04 LTS 系统测试。目前尚未搜索到在windows上跑起来的案例。<br>并且项目介绍说到GPU下跑的要比CPU效果好，可是博主对于GPU模式并没有研究，遂查了很多案例，博主准备在<strong>windows7下利用VMare安装Ubuntu进行项目部署。</strong></p><p><a href="http://wiki.ubuntu.org.cn/Ubuntu%E6%A1%8C%E9%9D%A2%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">Ubuntu桌面入门指南</a></p><p><a href="http://www.jianshu.com/p/e1f9126846ff" target="_blank" rel="noopener">深度学习neural-style环境搭建 | 简书</a></p><h2 id="Windws下载VM中安装Ubuntu"><a href="#Windws下载VM中安装Ubuntu" class="headerlink" title="Windws下载VM中安装Ubuntu"></a>Windws下载VM中安装Ubuntu</h2><p><a href="http://jingyan.baidu.com/article/14bd256e0ca52ebb6d26129c.html" target="_blank" rel="noopener">怎样在VMware虚拟机中使用安装并设置Ubuntu系统 | 百度经验</a></p><h2 id="VM中Ubuntu的网络配置"><a href="#VM中Ubuntu的网络配置" class="headerlink" title="VM中Ubuntu的网络配置"></a>VM中Ubuntu的网络配置</h2><p>请参考<br><a href="http://blog.csdn.net/wuxianglong/article/details/6126942" target="_blank" rel="noopener">虚拟机安装Ubuntu的上网设置（有线网络和无线网络）</a><br>需要注意的是Ubuntu在VM下NAT模式网络连接注意本机需要开启两个服务<br><code>VMware NAT Service</code><br><code>VMware DHCP Service（可不开）</code></p><h1 id="项目部署安装说明"><a href="#项目部署安装说明" class="headerlink" title="项目部署安装说明"></a>项目部署安装说明</h1><p>详细请参考github中项目简介，过程博主出现各种问题，主要google+百度+翻遍issues解决，感触就是<strong>别放弃</strong>。</p><h2 id="确认部署的Linux机器拥有git和cmake"><a href="#确认部署的Linux机器拥有git和cmake" class="headerlink" title="确认部署的Linux机器拥有git和cmake"></a>确认部署的Linux机器拥有git和cmake</h2><p>没有的通过命令<br><code>sudo apt-get install git</code>安装git<br>cmake安装直接google</p><h2 id="步骤一：Install-torch7"><a href="#步骤一：Install-torch7" class="headerlink" title="步骤一：Install torch7"></a>步骤一：Install torch7</h2><p><code>cd ~/curl -s https://raw.githubusercontent.com/torch/ezinstall/master/install-deps | bashgit clone https://github.com/torch/distro.git ~/torch --recursivecd ~/torch; ./install.shsource ~/.bashrc</code></p><p>还有 <code>sudo apt-get install libreadline-dev</code></p><h2 id="步骤二：安装loadcaffe"><a href="#步骤二：安装loadcaffe" class="headerlink" title="步骤二：安装loadcaffe"></a>步骤二：安装loadcaffe</h2><p><code>sudo apt-get install libprotobuf-dev protobuf-compiler</code></p><p><code>luarocks install loadcaffe</code></p><h2 id="步骤三：安装neural-style"><a href="#步骤三：安装neural-style" class="headerlink" title="步骤三：安装neural-style"></a>步骤三：安装neural-style</h2><h3 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h3><p><code>cd ~/git clone https://github.com/jcjohnson/neural-style.gitcd neural-style</code></p><h3 id="下载模型"><a href="#下载模型" class="headerlink" title="下载模型"></a>下载模型</h3><p><code>sh models/download_models.sh</code></p><h3 id="CPU模式下运行测试"><a href="#CPU模式下运行测试" class="headerlink" title="CPU模式下运行测试"></a>CPU模式下运行测试</h3><p><code>th neural_style.lua -gpu -1 -print_iter 1</code><br>上一行是官方给的测试语句，博主在解决以上所有步骤后在此步骤卡了好长时间。<br>第一次，终端提示RAM不够，重启VM更改设置增到2G内存。RAM报错解决。<br>第二次，终端报错 <code>No LuaRocks module found for cutorch</code>，找到对应Issues<a href="https://github.com/jcjohnson/neural-style/issues/320" target="_blank" rel="noopener">No LuaRocks module found for cutorch</a>遂发现Troch7装载过程有问题，重装。</p><h3 id="测试输出解释"><a href="#测试输出解释" class="headerlink" title="测试输出解释"></a>测试输出解释</h3><p>官方给出的样例输出即为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[libprotobuf WARNING google/protobuf/io/coded_stream.cc:505] Reading dangerously large protocol message.  If the message turns out to be larger than 1073741824 bytes, parsing will be halted for security reasons.  To increase the limit (or to disable these warnings), see CodedInputStream::SetTotalBytesLimit() in google/protobuf/io/coded_stream.h.</span><br><span class="line">[libprotobuf WARNING google/protobuf/io/coded_stream.cc:78] The total number of bytes read was 574671192</span><br><span class="line">Successfully loaded models/VGG_ILSVRC_19_layers.caffemodel</span><br><span class="line">conv1_1: 64 3 3 3</span><br><span class="line">conv1_2: 64 64 3 3</span><br><span class="line">conv2_1: 128 64 3 3</span><br><span class="line">conv2_2: 128 128 3 3</span><br><span class="line">conv3_1: 256 128 3 3</span><br><span class="line">conv3_2: 256 256 3 3</span><br><span class="line">conv3_3: 256 256 3 3</span><br><span class="line">conv3_4: 256 256 3 3</span><br><span class="line">conv4_1: 512 256 3 3</span><br><span class="line">conv4_2: 512 512 3 3</span><br><span class="line">conv4_3: 512 512 3 3</span><br><span class="line">conv4_4: 512 512 3 3</span><br><span class="line">conv5_1: 512 512 3 3</span><br><span class="line">conv5_2: 512 512 3 3</span><br><span class="line">conv5_3: 512 512 3 3</span><br><span class="line">conv5_4: 512 512 3 3</span><br><span class="line">fc6: 1 1 25088 4096</span><br><span class="line">fc7: 1 1 4096 4096</span><br><span class="line">fc8: 1 1 4096 1000</span><br><span class="line">WARNING: Skipping content loss</span><br><span class="line">Iteration 1 / 1000</span><br><span class="line">  Content 1 loss: 2091178.593750</span><br><span class="line">  Style 1 loss: 30021.292114</span><br><span class="line">  Style 2 loss: 700349.560547</span><br><span class="line">  Style 3 loss: 153033.203125</span><br><span class="line">  Style 4 loss: 12404635.156250</span><br><span class="line">  Style 5 loss: 656.860304</span><br><span class="line">  Total loss: 15379874.666090</span><br><span class="line">Iteration 2 / 1000</span><br><span class="line">  Content 1 loss: 2091177.343750</span><br><span class="line">  Style 1 loss: 30021.292114</span><br><span class="line">  Style 2 loss: 700349.560547</span><br><span class="line">  Style 3 loss: 153033.203125</span><br><span class="line">  Style 4 loss: 12404633.593750</span><br><span class="line">  Style 5 loss: 656.860304</span><br><span class="line">  Total loss: 15379871.853590</span><br></pre></td></tr></table></figure><p>其中这段是Troch输出。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">conv1_1: 64 3 3 3</span><br><span class="line">conv1_2: 64 64 3 3</span><br><span class="line">conv2_1: 128 64 3 3</span><br><span class="line">conv2_2: 128 128 3 3</span><br><span class="line">conv3_1: 256 128 3 3</span><br><span class="line">conv3_2: 256 256 3 3</span><br><span class="line">conv3_3: 256 256 3 3</span><br><span class="line">conv3_4: 256 256 3 3</span><br><span class="line">conv4_1: 512 256 3 3</span><br><span class="line">conv4_2: 512 512 3 3</span><br><span class="line">conv4_3: 512 512 3 3</span><br><span class="line">conv4_4: 512 512 3 3</span><br><span class="line">conv5_1: 512 512 3 3</span><br><span class="line">conv5_2: 512 512 3 3</span><br><span class="line">conv5_3: 512 512 3 3</span><br><span class="line">conv5_4: 512 512 3 3</span><br><span class="line">fc6: 1 1 25088 4096</span><br><span class="line">fc7: 1 1 4096 4096</span><br><span class="line">fc8: 1 1 4096 1000</span><br></pre></td></tr></table></figure></p><p>真正的Neural Style项目输出才是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">WARNING: Skipping content loss</span><br><span class="line">Iteration 1 / 1000</span><br><span class="line">  Content 1 loss: 2091178.593750</span><br><span class="line">  Style 1 loss: 30021.292114</span><br><span class="line">  Style 2 loss: 700349.560547</span><br><span class="line">  Style 3 loss: 153033.203125</span><br><span class="line">  Style 4 loss: 12404635.156250</span><br><span class="line">  Style 5 loss: 656.860304</span><br><span class="line">  Total loss: 15379874.666090</span><br><span class="line">Iteration 2 / 1000</span><br><span class="line">  Content 1 loss: 2091177.343750</span><br><span class="line">  Style 1 loss: 30021.292114</span><br><span class="line">  Style 2 loss: 700349.560547</span><br><span class="line">  Style 3 loss: 153033.203125</span><br><span class="line">  Style 4 loss: 12404633.593750</span><br><span class="line">  Style 5 loss: 656.860304</span><br><span class="line">  Total loss: 15379871.853590</span><br></pre></td></tr></table></figure><p>关于<code>WARNING: Skipping content loss</code>此句，博主本机上并没有出现此类信息<br>代码显示如下，此为Neural Style输出代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Setting up style layer  2:relu1_1</span><br><span class="line">Setting up style layer  7:relu2_1</span><br><span class="line">Setting up style layer  12:relu3_1</span><br><span class="line">Setting up style layer  21:relu4_1</span><br><span class="line">Setting up content layer23:relu4_2</span><br><span class="line">Setting up style layer  30:relu5_1</span><br><span class="line">Capturing content targets</span><br><span class="line">nn.Sequential &#123;</span><br><span class="line">  [input -&gt; (1) -&gt; (2) -&gt; (3) -&gt; (4) -&gt; (5) -&gt; (6) -&gt; (7) -&gt; (8) -&gt; (9) -&gt; (10) -&gt; (11) -&gt; (12) -&gt; (13) -&gt; (14) -&gt; (15) -&gt; (16) -&gt; (17) -&gt; (18) -&gt; (19) -&gt; (20) -&gt; (21) -&gt; (22) -&gt; (23) -&gt; (24) -&gt; (25) -&gt; (26) -&gt; (27) -&gt; (28) -&gt; (29) -&gt; (30) -&gt; (31) -&gt; (32) -&gt; (33) -&gt; (34) -&gt; (35) -&gt; (36) -&gt; (37) -&gt; output]</span><br><span class="line">  (1): nn.TVLoss</span><br><span class="line">  (2): nn.SpatialConvolution(3 -&gt; 64, 3x3, 1,1, 1,1)</span><br><span class="line">  (3): nn.ReLU</span><br><span class="line">  (4): nn.StyleLoss</span><br><span class="line">  (5): nn.SpatialConvolution(64 -&gt; 64, 3x3, 1,1, 1,1)</span><br><span class="line">  (6): nn.ReLU</span><br><span class="line">  (7): nn.SpatialMaxPooling(2x2, 2,2)</span><br><span class="line">  (8): nn.SpatialConvolution(64 -&gt; 128, 3x3, 1,1, 1,1)</span><br><span class="line">  (9): nn.ReLU</span><br><span class="line">  (10): nn.StyleLoss</span><br><span class="line">  (11): nn.SpatialConvolution(128 -&gt; 128, 3x3, 1,1, 1,1)</span><br><span class="line">  (12): nn.ReLU</span><br><span class="line">  (13): nn.SpatialMaxPooling(2x2, 2,2)</span><br><span class="line">  (14): nn.SpatialConvolution(128 -&gt; 256, 3x3, 1,1, 1,1)</span><br><span class="line">  (15): nn.ReLU</span><br><span class="line">  (16): nn.StyleLoss</span><br><span class="line">  (17): nn.SpatialConvolution(256 -&gt; 256, 3x3, 1,1, 1,1)</span><br><span class="line">  (18): nn.ReLU</span><br><span class="line">  (19): nn.SpatialConvolution(256 -&gt; 256, 3x3, 1,1, 1,1)</span><br><span class="line">  (20): nn.ReLU</span><br><span class="line">  (21): nn.SpatialConvolution(256 -&gt; 256, 3x3, 1,1, 1,1)</span><br><span class="line">  (22): nn.ReLU</span><br><span class="line">  (23): nn.SpatialMaxPooling(2x2, 2,2)</span><br><span class="line">  (24): nn.SpatialConvolution(256 -&gt; 512, 3x3, 1,1, 1,1)</span><br><span class="line">  (25): nn.ReLU</span><br><span class="line">  (26): nn.StyleLoss</span><br><span class="line">  (27): nn.SpatialConvolution(512 -&gt; 512, 3x3, 1,1, 1,1)</span><br><span class="line">  (28): nn.ReLU</span><br><span class="line">  (29): nn.ContentLoss</span><br><span class="line">  (30): nn.SpatialConvolution(512 -&gt; 512, 3x3, 1,1, 1,1)</span><br><span class="line">  (31): nn.ReLU</span><br><span class="line">  (32): nn.SpatialConvolution(512 -&gt; 512, 3x3, 1,1, 1,1)</span><br><span class="line">  (33): nn.ReLU</span><br><span class="line">  (34): nn.SpatialMaxPooling(2x2, 2,2)</span><br><span class="line">  (35): nn.SpatialConvolution(512 -&gt; 512, 3x3, 1,1, 1,1)</span><br><span class="line">  (36): nn.ReLU</span><br><span class="line">  (37): nn.StyleLoss</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三次，基于以上运行后，出现 <code>已杀死</code> 即 <code>killed</code> ，查看Issues中出现此问题<a href="https://github.com/jcjohnson/neural-style/issues/15" target="_blank" rel="noopener">Ends abruptly with the message: Killed </a><br>在命令末尾加上 <code>-image_size 256</code> 即可，原因好像是内存分配问题导致进程被杀死。<br>截止到此，成功跑起来，运行代码。</p><p><code>th neural_style.lua -style_image examples/inputs/test1.jpg -content_image examples/inputs/test0.jpg -gpu -1 -image_size 256</code></p><p>以下 <code>Iteration 50 / 1000</code> 表示迭代周期，在CPU模式下进行，大概50分钟可以算出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Capturing style target 1</span><br><span class="line">Running optimization with L-BFGS</span><br><span class="line">&lt;optim.lbfgs&gt; creating recyclable direction/step/history buffers</span><br><span class="line">Iteration 50 / 1000</span><br><span class="line">  Content 1 loss: 3137684.062500</span><br><span class="line">  Style 1 loss: 24579.841614</span><br><span class="line">  Style 2 loss: 402988.671875</span><br><span class="line">  Style 3 loss: 206954.541016</span><br><span class="line">  Style 4 loss: 1519436.718750</span><br><span class="line">  Style 5 loss: 4940.230560</span><br><span class="line">  Total loss: 5296584.066315</span><br><span class="line">Iteration 100 / 1000</span><br><span class="line">  Content 1 loss: 2293927.968750</span><br><span class="line">  Style 1 loss: 10807.684326</span><br><span class="line">  Style 2 loss: 104236.169434</span><br><span class="line">  Style 3 loss: 72638.903809</span><br><span class="line">  Style 4 loss: 696868.261719</span><br><span class="line">  Style 5 loss: 4750.508499</span><br><span class="line">  Total loss: 3183229.496536</span><br><span class="line">Iteration 150 / 1000</span><br><span class="line">  Content 1 loss: 2009629.531250</span><br><span class="line">  Style 1 loss: 6019.753647</span><br><span class="line">  Style 2 loss: 53772.943115</span><br><span class="line">  Style 3 loss: 46527.423096</span><br><span class="line">  Style 4 loss: 598785.595703</span><br><span class="line">  Style 5 loss: 5068.376923</span><br><span class="line">  Total loss: 2719803.623734</span><br><span class="line">Iteration 200 / 1000</span><br><span class="line">  Content 1 loss: 1873752.343750</span><br><span class="line">  Style 1 loss: 4074.698257</span><br><span class="line">  Style 2 loss: 33790.167236</span><br><span class="line">  Style 3 loss: 36095.117188</span><br><span class="line">  Style 4 loss: 563354.492188</span><br><span class="line">  Style 5 loss: 5103.339767</span><br><span class="line">  Total loss: 2516170.158386</span><br><span class="line">Iteration 250 / 1000</span><br><span class="line">  Content 1 loss: 1798739.218750</span><br><span class="line">  Style 1 loss: 3052.088928</span><br><span class="line">  Style 2 loss: 24353.424072</span><br><span class="line">  Style 3 loss: 31327.365112</span><br><span class="line">  Style 4 loss: 547528.515625</span><br><span class="line">  Style 5 loss: 5063.606644</span><br><span class="line">  Total loss: 2410064.219131</span><br></pre></td></tr></table></figure></p><p>项目主页还有关于详细命令设置<br><code>th neural_style.lua -style_image examples/inputs/picasso_selfport1907.jpg -content_image examples/inputs/brad_pitt.jpg -output_image profile.png -model_file models/nin_imagenet_conv.caffemodel -proto_file models/train_val.prototxt -gpu 0 -backend clnn -num_iterations 1000 -seed 123 -content_layers relu0,relu3,relu7,relu12 -style_layers relu0,relu3,relu7,relu12 -content_weight 10 -style_weight 1000 -image_size 512 -optimizer adam</code></p><p><code>-gpu -1</code> 表示没有显卡运行</p><h1 id="GPU模式下运行"><a href="#GPU模式下运行" class="headerlink" title="GPU模式下运行"></a>GPU模式下运行</h1><p>博主有气无力，硬件太烂，显卡还不是NAVID的，只是搜罗了几篇，供以后赞考<br><a href="http://www.jianshu.com/p/e1f9126846ff" target="_blank" rel="noopener">深度学习neural-style环境搭建 | 简书</a></p>]]></content>
      
      <categories>
          
          <category> 神经网络风 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 神经网络风格画 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA随机数生成 | Math.random()方法 | 随机生成int、double类型</title>
      <link href="/2017/04/08/2017-04-08-JAVA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/"/>
      <url>/2017/04/08/2017-04-08-JAVA%E9%9A%8F%E6%9C%BA%E6%95%B0%E7%94%9F%E6%88%90/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Math-random"><a href="#Math-random" class="headerlink" title="Math.random()"></a>Math.random()</h1><p>a pseudorandom double greater than or equal to 0.0 and less than 1.0.<br>即返回一个[0,1)的double类型的随机数</p><a id="more"></a><p><code>以下情况 |　y&gt;x</code></p><h1 id="double随机数"><a href="#double随机数" class="headerlink" title="double随机数"></a>double随机数</h1><h2 id="要获取一个-x-y-的double类型的随机数-左闭右开"><a href="#要获取一个-x-y-的double类型的随机数-左闭右开" class="headerlink" title="要获取一个[x,y)的double类型的随机数 | 左闭右开"></a>要获取一个[x,y)的double类型的随机数 | 左闭右开</h2><p><code>double d = x + Math.random() * (y - x);</code></p><h2 id="要获取一个-x-y-的double类型的随机数-左开右闭"><a href="#要获取一个-x-y-的double类型的随机数-左开右闭" class="headerlink" title="要获取一个(x,y]的double类型的随机数 | 左开右闭"></a>要获取一个(x,y]的double类型的随机数 | 左开右闭</h2><p><code>double d = y - Math.random() * (y - x);</code></p><h2 id="要获取一个-x-y-的double类型的随机数-左闭右闭"><a href="#要获取一个-x-y-的double类型的随机数-左闭右闭" class="headerlink" title="要获取一个[x,y]的double类型的随机数 | 左闭右闭"></a>要获取一个[x,y]的double类型的随机数 | 左闭右闭</h2><p><code>double d = x + Math.random() * y % (y - x + 1);</code></p><h2 id="要获取一个-x-y-的double类型的随机数-左开右开"><a href="#要获取一个-x-y-的double类型的随机数-左开右开" class="headerlink" title="要获取一个(x,y)的double类型的随机数 | 左开右开"></a>要获取一个(x,y)的double类型的随机数 | 左开右开</h2><p><code>double d = (y - Math.random()) % y;</code></p><h1 id="int随机数"><a href="#int随机数" class="headerlink" title="int随机数"></a>int随机数</h1><h2 id="要获取一个-x-y-的int类型的随机数-左闭右开"><a href="#要获取一个-x-y-的int类型的随机数-左闭右开" class="headerlink" title="要获取一个[x,y)的int类型的随机数 | 左闭右开"></a>要获取一个[x,y)的int类型的随机数 | 左闭右开</h2><p><code>int d = x + (int)(Math.random() * (y - x));</code></p><h2 id="要获取一个-x-y-的int类型的随机数-左开右闭"><a href="#要获取一个-x-y-的int类型的随机数-左开右闭" class="headerlink" title="要获取一个(x,y]的int类型的随机数 | 左开右闭"></a>要获取一个(x,y]的int类型的随机数 | 左开右闭</h2><p><code>int d = y - (int)(Math.random() * (y - x));</code></p><h2 id="要获取一个-x-y-的int类型的随机数-左闭右闭"><a href="#要获取一个-x-y-的int类型的随机数-左闭右闭" class="headerlink" title="要获取一个[x,y]的int类型的随机数 | 左闭右闭"></a>要获取一个[x,y]的int类型的随机数 | 左闭右闭</h2><p><code>int i = x + (int)(Math.random() * (y - x + 1));</code></p><h2 id="要获取一个-x-y-的int类型的随机数-左开右开"><a href="#要获取一个-x-y-的int类型的随机数-左开右开" class="headerlink" title="要获取一个(x,y)的int类型的随机数 | 左开右开"></a>要获取一个(x,y)的int类型的随机数 | 左开右开</h2><p><code>int d = (int)((y - Math.random()) % y);</code></p><h1 id="注意1"><a href="#注意1" class="headerlink" title="注意1"></a>注意1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Random r = new Random();</span><br><span class="line">double rs = r.nextDouble();</span><br><span class="line">int in = r.nextInt(500);</span><br></pre></td></tr></table></figure><p>提供另一种解决思路</p><h1 id="注意2"><a href="#注意2" class="headerlink" title="注意2"></a>注意2</h1><p><code>Math</code>类中有一<code>floor(double a)</code>方法<br><code>public static double floor(double a)</code><br>返回最大的（最接近正无穷大）double 值，该值小于等于参数，并等于某个整数。</p><p>所以对于<strong>要获取一个[x,y]的double类型的随机数 | 左闭右闭</strong>时候<br>可以采用以下解决思路：<br><code>Double.valueOf( x + Math.floor(random.nextDouble() * y % (y - x + 1));</code></p>]]></content>
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sublime Text 3|空间安装及快捷键指南</title>
      <link href="/2017/04/06/2017-04-06-Sublime-Text-3%E7%A9%BA%E9%97%B4%E5%AE%89%E8%A3%85%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%8C%87%E5%8D%97/"/>
      <url>/2017/04/06/2017-04-06-Sublime-Text-3%E7%A9%BA%E9%97%B4%E5%AE%89%E8%A3%85%E5%8F%8A%E5%BF%AB%E6%8D%B7%E9%94%AE%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Sublime-Text-3"><a href="#Sublime-Text-3" class="headerlink" title="Sublime Text 3"></a>Sublime Text 3</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主第一个使用的文本编辑器是ultraedit，在学习JAVA基础的时候手打代码，在此之前一直用的是windows自带的文本编辑框。</p><p>经历一点时间后发现Notepad++，我想这个软件是人尽皆知的吧，但是在前端开发的时候，出现很多问题，虽说支持很多格式代码，但是对于前端操作，博主表示Notepad++不是最高效的工具，广而不精，而且有点丑~这是我对Notepad++的印象，遂一直没有在电脑上安装。</p><p>一次在逛前端素材网站的时候看到这样一篇文章，属于前端的知识库<br><a href="http://www.5iweb.com.cn/nivo/599.html" target="_blank" rel="noopener">前端优化不完全指南</a><br>这篇文章到现在我还不时翻出来看看，原作是个前端大神，受益匪浅。里边提到了Sublime Text。</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime Text</a><br>什么问题不懂的可以直接追踪溯源，翻看官方网站，不必在博主这里寻求答案，其实这篇文章就是 Sublime Text 3 相信其他的读者也可以自行搜索学习。</p><h1 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h1><h2 id="控制台安装package-control"><a href="#控制台安装package-control" class="headerlink" title="控制台安装package control"></a>控制台安装package control</h2><p><code>Ctrl + ~</code> 调出控制台<br>不同版本的Sublime需要输入不同代码安装 <code>package control</code><br>Text3代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os;</span><br><span class="line">pf = &apos;Package Control.sublime-package&apos;;</span><br><span class="line">ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) );</span><br><span class="line">open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</span><br></pre></td></tr></table></figure><h2 id="安装控件"><a href="#安装控件" class="headerlink" title="安装控件"></a>安装控件</h2><p><code>preferences</code>—&gt;<code>package control</code>—&gt;<code>Install Package</code><br><code>Ctrl+Shift+P</code>调出命令面板—&gt;输入install<br>支持在线搜索匹配</p><h2 id="删除控件"><a href="#删除控件" class="headerlink" title="删除控件"></a>删除控件</h2><p><code>preferences</code>—&gt;<code>package control</code>—&gt;<code>Remove Package</code><br><code>Ctrl+Shift+P</code>调出命令面板—&gt;输入remove</p><hr><h3 id="Emmet-大名鼎鼎的，立刻生成对应的-HTML-结构或者-CSS-代码"><a href="#Emmet-大名鼎鼎的，立刻生成对应的-HTML-结构或者-CSS-代码" class="headerlink" title="Emmet | 大名鼎鼎的，立刻生成对应的 HTML 结构或者 CSS 代码"></a>Emmet | 大名鼎鼎的，立刻生成对应的 HTML 结构或者 CSS 代码</h3><p>按照 Emmet 语法写出来的语句，然后用 Emmet 编译一下<code>Ctrl+E</code>，急速生成html结构<br><a href="https://github.com/sergeche/emmet-sublime" target="_blank" rel="noopener">github | Emmet</a><br><a href="http://blog.wpjam.com/m/emmet-grammar/" target="_blank" rel="noopener">使用 Emmet 生成 HTML 的语法详解</a></p><h3 id="JsFormat-js格式化"><a href="#JsFormat-js格式化" class="headerlink" title="JsFormat | js格式化"></a>JsFormat | js格式化</h3><h3 id="CSScomb-Css属性排序"><a href="#CSScomb-Css属性排序" class="headerlink" title="CSScomb | Css属性排序"></a>CSScomb | Css属性排序</h3><h3 id="Sublime-CodeIntel-代码提示"><a href="#Sublime-CodeIntel-代码提示" class="headerlink" title="Sublime CodeIntel  | 代码提示"></a>Sublime CodeIntel  | 代码提示</h3><h3 id="ColorPicker-调色板"><a href="#ColorPicker-调色板" class="headerlink" title="ColorPicker | 调色板"></a>ColorPicker | 调色板</h3><hr><h1 id="菜单栏汉化指南"><a href="#菜单栏汉化指南" class="headerlink" title="菜单栏汉化指南"></a>菜单栏汉化指南</h1><p>1、<code>preferences</code>—&gt;<code>Browse Packages</code>进入文件管理器<br>2、返回上一级文件目录进入<code>Installed Packages</code>文件夹<br>3、将汉化文件放入<br><a href="https://www.phpsong.com/431.html" target="_blank" rel="noopener">3步汉化sublime text3</a></p><h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><p><a href="http://blog.jobbole.com/82527/" target="_blank" rel="noopener">Gif多图：我常用的 16 个 Sublime Text 快捷键</a><br><a href="http://www.cnblogs.com/lanxuezaipiao/p/4151095.html" target="_blank" rel="noopener">sublime Text 3实用功能和常用快捷键收集</a></p><p><a href="https://github.com/jikeytang/sublime-text" target="_blank" rel="noopener">github牛人总结sublime-text</a></p>]]></content>
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
            <tag> 技术 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原装Win8本改装Win7不完全指南</title>
      <link href="/2017/03/23/2017-03-23-%E5%8E%9F%E8%A3%85Win8%E6%9C%AC%E6%94%B9%E8%A3%85Win7%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2017/03/23/2017-03-23-%E5%8E%9F%E8%A3%85Win8%E6%9C%AC%E6%94%B9%E8%A3%85Win7%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博主笔记本在重装系统前，电脑将近200款软件，服务有将近100来个。博主学软件的时候接触软件比较杂，对后台一些东西没有深入研究和调控。入手电脑的时候配置并不高，前一阵子开机花了三分钟。狠心重装系统。<br>08年的时候，有自己试过重装系统。当时的操作十分简单：软件制作驱动u盘-&gt;吧.GHO文件导入u盘-&gt;进入BIOS-&gt;设置U盘为第一启动方式-&gt;进入winPE系统-&gt;傻瓜式一键安装。</p><a id="more"></a><h1 id="电脑安装操作系统方式发展-以Windows为例"><a href="#电脑安装操作系统方式发展-以Windows为例" class="headerlink" title="电脑安装操作系统方式发展[以Windows为例]"></a>电脑安装操作系统方式发展[以Windows为例]</h1><h2 id="光驱安装"><a href="#光驱安装" class="headerlink" title="光驱安装"></a>光驱安装</h2><p>年代久远初期，没有大容量存储移动截止，硬盘局限性比较大。操作系统大多安装至光盘中，以光驱读写形式实现操作系统安装。</p><h2 id="u盘安装"><a href="#u盘安装" class="headerlink" title="u盘安装"></a>u盘安装</h2><p>大容量可移动便携式u盘的出现，奠定了新式安装系统的方法。非UEFI+GMB模式下安装Win8以前的版本</p><h2 id="UEFI-u盘安装"><a href="#UEFI-u盘安装" class="headerlink" title="UEFI u盘安装"></a>UEFI u盘安装</h2><p>UEFI+GPD模式下安装Win8及以后的操作系统</p><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="UEFI（Unified-Extensible-Firmware-Interface）"><a href="#UEFI（Unified-Extensible-Firmware-Interface）" class="headerlink" title="UEFI（Unified Extensible Firmware Interface）"></a>UEFI（Unified Extensible Firmware Interface）</h2><p>统一可扩展固件接口（Unified Extensible Firmware Interface, UEFI）是一种个人电脑系统规格，用来定义操作系统与系统固件之间的软件界面，作为BIOS的替代方案。可扩展固件接口负责加电自检（POST）、连系操作系统以及提供连接操作系统与硬件的接口。</p><h2 id="全局唯一标识分区表（GUID-Partition-Table，缩写：GPT）"><a href="#全局唯一标识分区表（GUID-Partition-Table，缩写：GPT）" class="headerlink" title="全局唯一标识分区表（GUID Partition Table，缩写：GPT）"></a>全局唯一标识分区表（GUID Partition Table，缩写：GPT）</h2><p>值得注意的是，一种突破传统MBR（主引导记录）磁盘分区结构限制的GUID（全局唯一标志符）磁盘分区系统将在UEFI规范中被引入。MBR结构磁盘只允许存在4个主分区，而这种新结构却不受限制，分区类型也改由GUID来表示。它是可扩展固件接口（EFI）标准（被Intel用于替代个人计算机的BIOS）。</p><h2 id="主引导记录（扇区）（Master-Boot-Record，缩写：MBR）"><a href="#主引导记录（扇区）（Master-Boot-Record，缩写：MBR）" class="headerlink" title="主引导记录（扇区）（Master Boot Record，缩写：MBR）"></a>主引导记录（扇区）（Master Boot Record，缩写：MBR）</h2><p>是计算机开机后访问硬盘时所必须要读取的首个扇区，它在硬盘上的三维地址为（柱面，磁头，扇区）＝（0，0，1）。在深入讨论主引导扇区内部结构的时候，有时也将其开头的446字节内容特指为“主引导记录”（MBR），其后是4个16字节的“磁盘分区表”（DPT），以及2字节的结束标志（55AA）。因此，在使用“主引导记录”（MBR）这个术语的时候，需要根据具体情况判断其到底是指整个主引导扇区，还是主引导扇区的前446字节。<br>从主引导记录的结构可以知道，它仅仅包含一个64个字节的硬盘分区表。由于每个分区信息需要16个字节，所以对于采用MBR型分区结构的硬盘，最多只能识别4个主要分区（Primary partition）。所以对于一个采用此种分区结构的硬盘来说，想要得到4个以上的主要分区是不可能的。这里就需要引出扩展分区了。扩展分区也是主要分区的一种，但它与主分区的不同在于理论上可以划分为无数个逻辑分区</p><h2 id="MBR分区表与GPT分区表的关系"><a href="#MBR分区表与GPT分区表的关系" class="headerlink" title="MBR分区表与GPT分区表的关系"></a>MBR分区表与GPT分区表的关系</h2><p>与支持最大卷为2 TB（Terabytes）并且每个磁盘最多有4个主分区（或3个主分区，1个扩展分区和无限制的逻辑驱动器）的MBR磁盘分区的样式相比，GPT磁盘分区样式支持最大卷为128 EB（Exabytes）并且每磁盘的分区数没有上限，只受到操作系统限制（由于分区表本身需要占用一定空间，最初规划硬盘分区时，留给分区表的空间决定了最多可以有多少个分区，IA-64版Windows限制最多有128个分区，这也是EFI标准规定的分区表的最小尺寸）。与MBR分区的磁盘不同，至关重要的平台操作数据位于分区，而不是位于非分区或隐藏扇区。另外，GPT分区磁盘有备份分区表来提高分区数据结构的完整性。</p><h2 id="BIOS（Basic-Input-Output-System的缩写、中文：基本输入输出系统）"><a href="#BIOS（Basic-Input-Output-System的缩写、中文：基本输入输出系统）" class="headerlink" title="BIOS（Basic Input/Output System的缩写、中文：基本输入输出系统）"></a>BIOS（Basic Input/Output System的缩写、中文：基本输入输出系统）</h2><h3 id="引导电脑原理"><a href="#引导电脑原理" class="headerlink" title="引导电脑原理"></a>引导电脑原理</h3><p>当电脑的电源打开，BIOS就会由主板上的闪存（flash memory）运行，并将芯片组和存储器子系统初始化。BIOS会把自己从闪存中，解压缩到系统的主存；并且从那边开始运行。PC的BIOS代码也包含诊断功能，以保证某些重要硬件组件，像是键盘、磁盘设备、输出输入端口等等，可以正常运作且正确地初始化。</p><h2 id="GHO"><a href="#GHO" class="headerlink" title="GHO"></a>GHO</h2><p>Gho是Ghost工具软件的镜像文件存放扩展名，Gho文件中是使用Ghost软件备份的硬盘分区或整个硬盘的所有文件信息。*.gho文件可以直接安装系统，并不需要解压。</p><h2 id="ISO"><a href="#ISO" class="headerlink" title="ISO"></a>ISO</h2><p>ISO映像是一种光盘的存档文件，是磁盘映像的类型之一，数据由一张光盘的每个扇区组成，这包括光盘的文件系统。ISO映像文件通常采用文件扩展名.iso。名称ISO取自用于CD-ROM介质的ISO 9660文件系统，但ISO映像也可包含DVD和蓝光光盘使用的UDF（ISO/IEC 13346）文件系统。</p><h2 id="WinPE"><a href="#WinPE" class="headerlink" title="WinPE"></a>WinPE</h2><p>Windows Preinstallation Environment（Windows PE），Windows预安装环境，是带有有限服务的最小Win32子系统，基于以保护模式运行的Windows XP Professional及以上内核。<br>u盘装系统的核心，需要进入外部小型系统对本机硬盘进行操作，小系统写大系统，目前市面上有很多制作u盘驱动封装winPE，系统内部有小型软件，用于系统操作。</p><h2 id="CSM"><a href="#CSM" class="headerlink" title="CSM"></a>CSM</h2><p>CSM（兼容性支持模块）是BIOS上Boot选项里的一个下拉子项目（一些老的主板上没有此选项），与Secure Boot（安全启动）是并列项。CSM开启使得可以支持UEFI启动和非UEFI启动。若是需要启动传统MBR设备，则需开启CSM。关闭CSM则变成纯UEFI启动，且完全支持安全启动。Secure Boot（安全启动），安全启动仅适用于使用UEFI启动的操作系统。在笔记本的BIOS里，这里更多的是使用Enabled（打开）和Disabled（关闭）两个选项。在电脑自带Windows 8的情况下，Secure Boot（安全启动）默认是Enabled（打开）。从而使得CSM（兼容性支持模块）又默认是Disabled（关闭），进而导致电脑不能启动不完全支持UEFI的设备。要使得电脑能启动不完全支持UEFI的设备，就必须关闭Secure Boot，然后打开CSM。</p><h1 id="博主遇见问题"><a href="#博主遇见问题" class="headerlink" title="博主遇见问题"></a>博主遇见问题</h1><p>在这里博主报下自己的电脑型号：<br>华硕VM590Z原装win8系统，标注电脑制造日期为2015年7月。<br><code>BIOS version 2.15.1236 | 2014</code><br>最初原装Win8系统，后升级到Win10。在写这篇博客的四天前的一个上午，博主心血来潮想要换成win7，后保存电脑资料后直接低格硬盘，改磁盘扇道，后来接着三天心力交瘁的情况，win7装后卡死在正在进入系统界面，后改到win10以后出现蓝屏现象。</p><h2 id="新版可扩展固件接口UEFI（Unified-Extensible-Firmware-Interface）"><a href="#新版可扩展固件接口UEFI（Unified-Extensible-Firmware-Interface）" class="headerlink" title="新版可扩展固件接口UEFI（Unified Extensible Firmware Interface）"></a>新版可扩展固件接口UEFI（Unified Extensible Firmware Interface）</h2><p>进入很早之前的驱动盘制作主页，大白菜、老毛桃都是当年傻瓜式装机的案例。发现主页多了一个UEFI版驱动制作器，抱着试一试和很简单的态度下载了UEFI版本。后来进入PE的方式都变了，不用更改BIOS控件，按Esc就进入选择系统界面。不得不说这是以后发展趋势，BIOS将会在更新换代后逐渐被淘汰。</p><h2 id="预装Win8的机子默认都是UFEI-BIOS"><a href="#预装Win8的机子默认都是UFEI-BIOS" class="headerlink" title="预装Win8的机子默认都是UFEI BIOS"></a>预装Win8的机子默认都是UFEI BIOS</h2><p>为了限制用户在品牌机上安装其他系统，微软在UFEI BIOS中设定了一个“安全引导”模式，在BIOS中把Secure Boot设置为Disabled，才可以从u盘/光驱启动电脑。</p><h2 id="尝试Win10后出现蓝屏卡死无限重启现象"><a href="#尝试Win10后出现蓝屏卡死无限重启现象" class="headerlink" title="尝试Win10后出现蓝屏卡死无限重启现象"></a>尝试Win10后出现蓝屏卡死无限重启现象</h2><p><code>终止代码PAGE FAULT IN NONPAGED AREA失败的操作HP79212.sys</code></p><h3 id="网传1：电脑虚拟内存更改"><a href="#网传1：电脑虚拟内存更改" class="headerlink" title="网传1：电脑虚拟内存更改"></a>网传1：电脑虚拟内存更改</h3><p><a href="http://www.xitonghe.com/jiaocheng/Windows10-8964.html" target="_blank" rel="noopener">调节虚拟内存更改Win10蓝屏</a></p><h3 id="网传2：卸载显卡"><a href="#网传2：卸载显卡" class="headerlink" title="网传2：卸载显卡"></a>网传2：卸载显卡</h3><p>win10系统兼容性不行，主要是显卡驱动问题。<br>进入安全模式后进入设备管理器，卸载显卡即可。那么问题来了，难道我的显卡不用了吗？这个需要驱动厂商找到和目前win10匹配的驱动程序，这个是比较蛋疼的，感觉小白玩win10好伤。</p><h3 id="网传3：来自微软工程师的教程？"><a href="#网传3：来自微软工程师的教程？" class="headerlink" title="网传3：来自微软工程师的教程？"></a>网传3：来自微软工程师的教程？</h3><p>安全模式下，把C:\windows\system32\drivers文件夹里的peckp.sys文件重命名为peckp.sys.dak。重启电脑。<br><a href="http://tieba.baidu.com/p/3937816666" target="_blank" rel="noopener">来自百度贴吧——Page fault in nonpaged area蓝屏解决</a></p><h2 id="Win7安装程序：“Windows-无法安装到这个磁盘。选中的磁盘具有MBR分区表”"><a href="#Win7安装程序：“Windows-无法安装到这个磁盘。选中的磁盘具有MBR分区表”" class="headerlink" title="Win7安装程序：“Windows 无法安装到这个磁盘。选中的磁盘具有MBR分区表”"></a>Win7安装程序：“Windows 无法安装到这个磁盘。选中的磁盘具有MBR分区表”</h2><p>博主电脑BIOS中没有设置从u盘启动选项，也就是说无法通过BIOS+MBR模式下安装，只能从UEFI模式下启动，但是安装win7时会出现以下两点情况：<br><a href="http://blog.sina.com.cn/s/blog_a6079ee00101mlfv.html" target="_blank" rel="noopener">解决无法安装问题</a></p><h2 id="重装win7后卡死在-windows正在更新-安装程序正在更新注册表设置"><a href="#重装win7后卡死在-windows正在更新-安装程序正在更新注册表设置" class="headerlink" title="重装win7后卡死在[windows正在更新]|[安装程序正在更新注册表设置]"></a>重装win7后卡死在[windows正在更新]|[安装程序正在更新注册表设置]</h2><p>1.BIOS+MBR分区下进行<br>2.若为UEFI模式下，调节BIOS下CSM设置为yes<br>！！！<br>在这里解决了博主遇见的问题，进入UEFI模式下磁盘依旧为GPD，成功安装win7</p><h2 id="UEFI模式下安装Win7"><a href="#UEFI模式下安装Win7" class="headerlink" title="UEFI模式下安装Win7"></a>UEFI模式下安装Win7</h2><p><a href="http://www.xitonghe.com/jiaocheng/anzhuang-1667.html" target="_blank" rel="noopener">这里写链接内容</a></p>]]></content>
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 硬件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.57-6174问题-数学黑洞</title>
      <link href="/2017/03/07/2017-03-07-%E5%8D%97%E9%98%B3OJ-No.57-6174%E9%97%AE%E9%A2%98%E6%95%B0%E5%AD%A6%E9%BB%91%E6%B4%9E/"/>
      <url>/2017/03/07/2017-03-07-%E5%8D%97%E9%98%B3OJ-No.57-6174%E9%97%AE%E9%A2%98%E6%95%B0%E5%AD%A6%E9%BB%91%E6%B4%9E/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-57"><a href="#南阳OJ-No-57" class="headerlink" title="南阳OJ-No.57"></a>南阳OJ-No.57</h1><p>时间限制1000ms，内存限制65535KB</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>假设你有一个各位数字互不相同的四位数，把所有的数字从大到小排序后得到a,从小到大后得到b,然后用a-b替换原来这个数，并且继续操作。例如，从1234出发，依次可以得到4321-1234=3087、8730-378=8352、8532-2358=6174，又回到了它自己！现在要你写一个程序来判断一个四位数经过多少次这样的操作能出现循环，并且求出操作的次数。</p><p>比如输入1234执行顺序是1234-&gt;3087-&gt;8352-&gt;6174-&gt;6174,输出是4</p><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>第一行输入n,代表有n组测试数据。<br>接下来n行每行都写一个各位数字互不相同的四位数</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>经过多少次上面描述的操作才能出现循环</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>1<br>1234</p></blockquote><p>#样例输出</p><blockquote><p>4</p></blockquote><hr><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><p>时间 10，内存61</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner cin = new Scanner(System.in);</span><br><span class="line">    public static int N, count =0, num, num1, num2;</span><br><span class="line">    public static int[] a = new int[4];</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    N = cin.nextInt(); </span><br><span class="line">    while(N-- != 0) &#123;</span><br><span class="line">    count = 0;   </span><br><span class="line">    num = cin.nextInt();</span><br><span class="line">    do &#123;</span><br><span class="line">    for(int i=0; i&lt;4; i++) &#123;</span><br><span class="line">    a[i] = num % 10;</span><br><span class="line">    num = num/10;</span><br><span class="line">    &#125;</span><br><span class="line">    Arrays.sort(a);   </span><br><span class="line">    num1 = a[0] + a[1]*10 + a[2]*100 + a[3]*1000;</span><br><span class="line">    num2 = a[0]*1000 + a[1]*100 + a[2]*10 + a[3]; </span><br><span class="line">    num = num1 - num2;    </span><br><span class="line">    count ++;</span><br><span class="line">    &#125; while(num != 6174);</span><br><span class="line">    System.out.println(count+1);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p>时间 4，内存240</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int N, num, num1, num2;</span><br><span class="line">  int count =0;</span><br><span class="line">  int a[4];</span><br><span class="line">  </span><br><span class="line">  cin &gt;&gt; N;</span><br><span class="line">  while(N--)</span><br><span class="line">  &#123;</span><br><span class="line">    count=0;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">      for(int i=0; i&lt;4; i++)</span><br><span class="line">      &#123;</span><br><span class="line">        a[i]=num%10;</span><br><span class="line">        num=num/10;</span><br><span class="line">      &#125;</span><br><span class="line">      sort(a,a+4);</span><br><span class="line">      num1 = a[0] + a[1]*10 + a[2]*100 + a[3]*1000;</span><br><span class="line">    num2 = a[0]*1000 + a[1]*100 + a[2]*10 + a[3]; </span><br><span class="line">    num = num1 - num2;    </span><br><span class="line">      count ++;</span><br><span class="line">    &#125;while(num!=6174);</span><br><span class="line">    cout &lt;&lt; count+1 &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>##C++中数组排序函数sort<br><a href="http://blog.csdn.net/liuzuyi200/article/details/8974326" target="_blank" rel="noopener">c++排序函数sort</a><br>include&lt; algorithm &gt;|头文件<br>Sort(start,end,排序方法)|函数模板|<br>时间复杂度为n*log2(n)，执行效率较高<br>（1）第一个是要排序的数组的起始地址。<br>（2）第二个是结束的地址（最后一位要排序的地址）。<br>（3）第三个参数是排序的方法，可以是从大到小也可是从小到大，还可以不写第三个参数，此时默认的排序方法是从小到大排序。</p></blockquote>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.56-阶乘因式分解-1</title>
      <link href="/2017/02/27/2017-02-27-%E5%8D%97%E9%98%B3OJ-No.56-%E9%98%B6%E4%B9%98%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3-1/"/>
      <url>/2017/02/27/2017-02-27-%E5%8D%97%E9%98%B3OJ-No.56-%E9%98%B6%E4%B9%98%E5%9B%A0%E5%BC%8F%E5%88%86%E8%A7%A3-1/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-34"><a href="#南阳OJ-No-34" class="headerlink" title="南阳OJ-No.34"></a>南阳OJ-No.34</h1><p>时间限制3000ms，内存限制65535KB，难度2</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>给定两个数m,n,其中m是一个素数。<br>将n（0&lt;=n&lt;=10000）的阶乘分解质因数，求其中有多少个m。</p><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>第一行是一个整数s（0 &lt; s &lt;= 100)，表示测试数据的组数<br>随后的s行, 每行有两个整数n，m。</p><a id="more"></a><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>输出m的个数。</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>2<br>100 5<br>16 2</p></blockquote><p>#样例输出</p><blockquote><p>24<br>15</p></blockquote><hr><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><p><code>时间32，内存246</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner cin = new Scanner(System.in);</span><br><span class="line">    public static int N, m, n, count, temp=0, j, i;</span><br><span class="line">    //count 用于计数，temp用于每阶运算，i用于外层循环，j用于内层循环</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    N = cin.nextInt();</span><br><span class="line">    for (i=0; i&lt;N; i++) &#123;</span><br><span class="line">    count = 0;</span><br><span class="line">    n = cin.nextInt();</span><br><span class="line">    m = cin.nextInt();</span><br><span class="line">    j = n;</span><br><span class="line">    temp = n;</span><br><span class="line">    </span><br><span class="line">    while (n != 0) &#123;</span><br><span class="line">    n = n/m;</span><br><span class="line">    count = count + n;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p>我就不写了=_=</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-34-韩信点兵</title>
      <link href="/2017/02/16/2017-02-16-%E5%8D%97%E9%98%B3OJ-No.34-%E9%9F%A9%E4%BF%A1%E7%82%B9%E5%85%B5-1/"/>
      <url>/2017/02/16/2017-02-16-%E5%8D%97%E9%98%B3OJ-No.34-%E9%9F%A9%E4%BF%A1%E7%82%B9%E5%85%B5-1/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-34"><a href="#南阳OJ-No-34" class="headerlink" title="南阳OJ-No.34"></a>南阳OJ-No.34</h1><p><code>时间限制3000ms，内存限制65535KB，**难度1**</code></p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>相传韩信才智过人，从不直接清点自己军队的人数，只要让士兵先后以三人一排、五人一排、七人一排地变换队形，而他每次只掠一眼队伍的排尾就知道总人数了。输入3个非负整数a,b,c ，表示每种队形排尾的人数（a&lt;3,b&lt;5,c&lt;7），输出总人数的最小值（或报告无解）。已知总人数不小于10，不超过100 。</p><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>输入3个非负整数a,b,c ，表示每种队形排尾的人数（a&lt;3,b&lt;5,c&lt;7）。例如,输入：2 4 5</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>输出总人数的最小值（或报告无解，即输出No answer）。实例，输出：89</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>2 1 6</p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h1><blockquote><p>41</p></blockquote><hr><h1 id="背景小故事"><a href="#背景小故事" class="headerlink" title="背景小故事"></a>背景小故事</h1><blockquote><p>韩信点兵的成语来源淮安民间传说：刘邦曾经问他：你觉得我可以带兵多少？韩信：最多十万。刘邦不解的问：那你呢？韩信自豪地说：越多越好，多多益善嘛！刘邦半开玩笑半认真的说：那我不是打不过你？韩信说：不，主公是驾驭将军的人才，不是驾驭士兵的，而将士们是专门训练士兵的。<br>淮安民间传说着一则故事——“韩信点兵”，其次有成语“韩信点兵，多多益善”。韩信带1500名兵士打仗，战死四五百人，站3人一排，多出2人；站5人一排，多出4人；站7人一排，多出6人。韩信马上说出人数：1049。</p></blockquote><hr><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h2 id="思路一："><a href="#思路一：" class="headerlink" title="思路一："></a>思路一：</h2><p>最终的所求数num一定是被3整除后余x，被5整除后余y，被7整除后余z，且10&lt;=num&lt;=100。所以便利条件寻找即可。</p><h2 id="思路二："><a href="#思路二：" class="headerlink" title="思路二："></a>思路二：</h2><p>条件归并：找到X,Y,Z三个数组，分别存放除以3余x的数，除以5余x的数，除以3余y的数。<br>定义新方法，输入两个数组，返回两数组中第一个相同的数。<br>先对X,Y进行方法运算得到m，构建数组W除以m余（3<em>5=15）<br>对W,Z进行方法运算得到n，则最终结果=n+x</em>y*z。</p><p>凡是用3个一数剩下的余数，将它用70去乘（因为70是5与7的倍数，而又是以3去除余1的数）；5个一数剩下的余数，将它用21去乘（因为21是3与7的倍数，又是以5去除余1的数）；7个一数剩下的余数，将它用15去乘（因为15是3与5的倍数，又是以7去除余1的数），将这些数加起来，若超过105，就减掉105，如果剩下来的数目还是比105大，就再减去105，直到得数比105小为止。</p><hr><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="思路一"><a href="#思路一" class="headerlink" title="思路一"></a>思路一</h2><p><code>时间20，内存61</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner cin = new Scanner(System.in);</span><br><span class="line">    public static int x, y, z, num;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    x = cin.nextInt();</span><br><span class="line">    y = cin.nextInt();</span><br><span class="line">    z = cin.nextInt();</span><br><span class="line">    </span><br><span class="line">    for (int i=10; i&lt;=100; i++) &#123;</span><br><span class="line">    if ((i-x)%3==0) &#123;</span><br><span class="line">    if ((i-y)%5==0) &#123;</span><br><span class="line">    if ((i-z)%7==0) &#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        break;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    num = i;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(num == 100) &#123;</span><br><span class="line">    System.out.println(&quot;No answer&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="思路一-1"><a href="#思路一-1" class="headerlink" title="思路一"></a>思路一</h2><p><code>时间0，内存240</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int x, y, z, num;</span><br><span class="line">  </span><br><span class="line">  cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">  </span><br><span class="line">  for (int i=10; i&lt;=100; i++) &#123;</span><br><span class="line">    if ((i-x)%3==0) &#123;</span><br><span class="line">      if ((i-y)%5==0) &#123;</span><br><span class="line">        if ((i-z)%7==0) &#123;</span><br><span class="line">          cout &lt;&lt; i;</span><br><span class="line">          break;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    num = i;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  if(num == 100) &#123;</span><br><span class="line">    cout &lt;&lt; &quot;No answer&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="思路二"><a href="#思路二" class="headerlink" title="思路二"></a>思路二</h2><p><code>时间4，内存240</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a,b,c;</span><br><span class="line">  cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">  int n=(a*70+b*21+c*15)%105;</span><br><span class="line">  if(n&gt;100||n&lt;10)</span><br><span class="line">    cout &lt;&lt; &quot;No answer&quot; &lt;&lt; endl;</span><br><span class="line">  else </span><br><span class="line">    cout &lt;&lt; n &lt;&lt; endl;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.31-5个数求最值</title>
      <link href="/2017/02/15/2017-02-15-%E5%8D%97%E9%98%B3OJ-No.31-5%E4%B8%AA%E6%95%B0%E6%B1%82%E6%9C%80%E5%80%BC/"/>
      <url>/2017/02/15/2017-02-15-%E5%8D%97%E9%98%B3OJ-No.31-5%E4%B8%AA%E6%95%B0%E6%B1%82%E6%9C%80%E5%80%BC/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-31"><a href="#南阳OJ-No-31" class="headerlink" title="南阳OJ-No.31"></a>南阳OJ-No.31</h1><p>时间限制3000ms，内存限制65535KB，<strong>难度1</strong></p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>设计一个从5个整数中取最小数和最大数的程序</p><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>输入只有一组测试数据，为五个不大于1万的正整数</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>输出两个数，第一个为这五个数中的最小值，第二个为这五个数中的最大值，两个数字以空格格开。</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>1 2 3 4 5</p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h1><blockquote><p>1 5</p></blockquote><hr><p>总的来说此题比较简单，方法较多<br>思路1：构建一个数组读取输入，然后用排序方法进行排序，具体效率就排序算法而言。<br>思路2：设置标记变量，最大值和最小值，对输入的数进行比较，大取更大，小取更小。</p><hr><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><blockquote><p>思路1，No.1- 希尔排序|其他排序方法类似，此处不再讨论<br><strong><code>时间3,内存61</code></strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner cin = new Scanner(System.in);</span><br><span class="line">    public static int[] num = new int[5];</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">    for (int i=0; i&lt;5; i++) &#123;</span><br><span class="line">    num[i] = cin.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    shellSort(num);</span><br><span class="line">    System.out.println(num[0] + &quot; &quot; + num[4]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void shellSort(int[] a) &#123;</span><br><span class="line">for (int d=a.length/2; d&gt;0; d/=2) &#123;</span><br><span class="line">for (int i=d; i&lt;a.length; i++) &#123;</span><br><span class="line">int temp = a[i], j = i - d;</span><br><span class="line"></span><br><span class="line">while (j &gt;= 0 &amp;&amp; temp &lt; a[j]) &#123;</span><br><span class="line">a[j+d] = a[j];</span><br><span class="line">j -= d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a[j+d] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思路2<br><strong><code>时间3,内存61</code></strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner cin = new Scanner(System.in);</span><br><span class="line">    public static int num, m, n;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">    num = cin.nextInt();</span><br><span class="line">m = n = num;</span><br><span class="line">    for (int i=0; i&lt;4; i++) &#123;</span><br><span class="line">    num = cin.nextInt();</span><br><span class="line">    </span><br><span class="line">    if (num &gt; m) &#123;</span><br><span class="line">    m = num;</span><br><span class="line">    continue;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    if(num &lt; n) &#123;</span><br><span class="line">    n = num;</span><br><span class="line">    continue;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(n + &quot; &quot; + m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p><strong><code>时间4,内存240</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int num, max, min;</span><br><span class="line">  cin &gt;&gt; num;</span><br><span class="line">  max = min = num;</span><br><span class="line">  </span><br><span class="line">  for(int i=0; i&lt;4; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    </span><br><span class="line">     if (num &gt; max)</span><br><span class="line">     &#123;</span><br><span class="line">        max = num;</span><br><span class="line">        continue;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if(num &lt; min)</span><br><span class="line">      &#123;</span><br><span class="line">        min = num;</span><br><span class="line">        continue;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  cout &lt;&lt; min &lt;&lt; &quot; &quot; &lt;&lt; max;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.33-蛇形填数</title>
      <link href="/2017/02/15/2017-02-15-%E5%8D%97%E9%98%B3OJ-No.33-%E8%9B%87%E5%BD%A2%E5%A1%AB%E6%95%B0/"/>
      <url>/2017/02/15/2017-02-15-%E5%8D%97%E9%98%B3OJ-No.33-%E8%9B%87%E5%BD%A2%E5%A1%AB%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-33"><a href="#南阳OJ-No-33" class="headerlink" title="南阳OJ-No.33"></a>南阳OJ-No.33</h1><p>时间限制3000ms,空间限制65535KB,<strong>难度3</strong></p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>在n<em>n方陈里填入1,2,…,n</em>n,要求填成蛇形。例如n=4时方阵为：</p><blockquote><p>10 11 12 1<br>9 16 13 2<br>8 15 14 3<br>7 6 5 4</p></blockquote><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>直接输入方陈的维数，即n的值。(n&lt;=100)</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>输出结果是蛇形方陈。</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>3</p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h1><blockquote><p>7 8 1<br>6 9 2<br>5 4 3</p></blockquote><hr><p>思路：4 连通问题<br>n=1，特殊情况<br>n&gt;2，<br>我先画出了n=2,3,4,5,6的蛇形数组进行观察，数组构建过程是从右上角的数字1开始，然后按照顺时针方向依次构建。方阵中每个格子相邻的都有四个格子。观察构建顺序，数字存放顺序为顺时针方向，即下、左、上、右，进行循环判断填充，注意判断数组下标不越界</p><hr><h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><p><code>时间83，内存1475</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner cin = new Scanner(System.in);</span><br><span class="line">    public static int N = cin.nextInt(), x = 0, y = N-1, count = 1;</span><br><span class="line">    public static int[][] num = new int[N][N];</span><br><span class="line">    </span><br><span class="line">    static &#123;</span><br><span class="line">    for (int x=0; x&lt;N; x++) &#123;</span><br><span class="line">    for (int y=0; y&lt;N; y++) &#123;</span><br><span class="line">    num[x][y] = 0;</span><br><span class="line">    &#125; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    num[x][y] = 1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void print(int[][] num) &#123;</span><br><span class="line">    for (int x=0; x&lt;N; x++) &#123;</span><br><span class="line">    for (int y=0; y&lt;N; y++) &#123;</span><br><span class="line">    System.out.print(num[x][y] + &quot; &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">    while(count &lt; N*N) &#123;</span><br><span class="line">    while(x&lt;N-1 &amp;&amp; num[x+1][y]==0)</span><br><span class="line">    num[++x][y] = ++count;</span><br><span class="line">    </span><br><span class="line">    while(y&gt;0 &amp;&amp; num[x][y-1]==0)</span><br><span class="line">    num[x][--y] = ++count;</span><br><span class="line">    </span><br><span class="line">    while(x&gt;0 &amp;&amp; num[x-1][y]==0)</span><br><span class="line">    num[--x][y] = ++count;</span><br><span class="line">    </span><br><span class="line">    while(y&lt;N-1 &amp;&amp; num[x][y+1]==0)</span><br><span class="line">    num[x][++y] = ++count;</span><br><span class="line">    &#125;</span><br><span class="line">    print(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个是在南阳OJ中扒出来的以为大神，不懂啊(⊙﹏⊙)<br><code>时间36，内存676</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int i,j,h = 0;</span><br><span class="line">short num = 1;</span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">short n = scanner.nextShort();</span><br><span class="line">short[][] array = new short[n][n];</span><br><span class="line">int hmax = (n+1)&gt;&gt;1;</span><br><span class="line">for ( h = 0; h &lt;= hmax; h++) &#123;</span><br><span class="line">if (h==hmax&amp;&amp;n%2!=0) &#123;</span><br><span class="line">array[n&gt;&gt;1][n&gt;&gt;1] = num;</span><br><span class="line">&#125;else &#123;</span><br><span class="line">for ( i =h; i &lt; n-1-h; i++) &#123;</span><br><span class="line">array[i][n-1-h]=num++;</span><br><span class="line">&#125;</span><br><span class="line">for ( i = n-1-h; i &gt;h ; i--) &#123;</span><br><span class="line">array[n-1-h][i]=num++;</span><br><span class="line">&#125;</span><br><span class="line">for ( i = n-1-h; i &gt;h ; i--) &#123;</span><br><span class="line">array[i][h]=num++;</span><br><span class="line">&#125;</span><br><span class="line">for ( i = h; i &lt; n-1-h; i++) &#123;</span><br><span class="line">array[h][i] = num++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">StringBuffer sb = new StringBuffer();</span><br><span class="line">for ( i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">for ( j = 0; j &lt; array[i].length; j++) &#123;</span><br><span class="line">sb.append(array[i][j]).append(&quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.print(sb);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p><code>时间4，内存240</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int N, x, y, count;</span><br><span class="line">  </span><br><span class="line">  cin &gt;&gt; N;</span><br><span class="line">  x = 0;</span><br><span class="line">  y = N-1;</span><br><span class="line">  count = 1;</span><br><span class="line">  </span><br><span class="line">  int num[N][N];</span><br><span class="line">  </span><br><span class="line">  for (int x=0; x&lt;N; x++) &#123;</span><br><span class="line">for (int y=0; y&lt;N; y++) &#123;</span><br><span class="line">num[x][y] = 0;</span><br><span class="line">&#125; </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  num[x][y] = 1;</span><br><span class="line">  </span><br><span class="line">  while(count &lt; N*N) &#123;</span><br><span class="line">while(x&lt;N-1 &amp;&amp; num[x+1][y]==0)</span><br><span class="line">num[++x][y] = ++count;</span><br><span class="line"></span><br><span class="line">while(y&gt;0 &amp;&amp; num[x][y-1]==0)</span><br><span class="line">num[x][--y] = ++count;</span><br><span class="line"></span><br><span class="line">while(x&gt;0 &amp;&amp; num[x-1][y]==0)</span><br><span class="line">num[--x][y] = ++count;</span><br><span class="line"></span><br><span class="line">while(y&lt;N-1 &amp;&amp; num[x][y+1]==0)</span><br><span class="line">num[x][++y] = ++count;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  for (int x=0; x&lt;N; x++) &#123;</span><br><span class="line">for (int y=0; y&lt;N; y++) &#123;</span><br><span class="line">cout &lt;&lt; num[x][y] &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.24-素数距离问题</title>
      <link href="/2017/02/12/2017-02-12-%E5%8D%97%E9%98%B3OJ-No.24-%E7%B4%A0%E6%95%B0%E8%B7%9D%E7%A6%BB%E9%97%AE%E9%A2%98/"/>
      <url>/2017/02/12/2017-02-12-%E5%8D%97%E9%98%B3OJ-No.24-%E7%B4%A0%E6%95%B0%E8%B7%9D%E7%A6%BB%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-22"><a href="#南阳OJ-No-22" class="headerlink" title="南阳OJ-No.22"></a>南阳OJ-No.22</h1><p>时间限制3000ms,内存限制65535KB</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>现在给出你一些数，要求你写出一个程序，输出这些整数相邻最近的素数，并输出其相距长度。如果左右有等距离长度素数，则输出左侧的值及相应距离。<br>如果输入的整数本身就是素数，则输出该素数本身，距离输出0</p><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>第一行给出测试数据组数N(0 &lt; N &lt;= 10000)<br>接下来的N行每行有一个整数M(0 &lt; M &lt; 1000000)</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>每行输出两个整数 A B.<br>其中A表示离相应测试数据最近的素数，B表示其间的距离。</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>3<br>6<br>8<br>10</p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h1><blockquote><p>5 1<br>7 1<br>11 1</p></blockquote><hr><p><a href="https://program-think.blogspot.com/2011/12/prime-algorithm-1.html" target="_blank" rel="noopener">求质数算法的 N 种境界[1] - 试除法和初级筛法</a></p><hr><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><blockquote><p>第一次思路是分别计算输入的n较大和较小相邻的素数，然后再计算距离。可惜超时了。我把求较大较小值的方法写到外边，网上java版本的很多是把方法写到内部的，需要两层for循环，时间复杂度为n^2。(本人的算法是一个递归方法，时间复杂度最高)。这里留一个备份算了。备注掉的代码中有上文提到的集中素数境界问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static Scanner cin = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">            int line = cin.nextInt();</span><br><span class="line">            int s, max, little, maxT, littleT;</span><br><span class="line"></span><br><span class="line">            while(line-- &gt;= 1) &#123;</span><br><span class="line">            s = cin.nextInt();</span><br><span class="line">            </span><br><span class="line">            if(isPrime(s)) &#123;</span><br><span class="line">            System.out.println(s + &quot; &quot; + 0);</span><br><span class="line">            continue;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            max = getMaxPrime(s);</span><br><span class="line">            little = getLittlePrime(s);</span><br><span class="line">            </span><br><span class="line">            maxT = max - s;</span><br><span class="line">            littleT = s - little;</span><br><span class="line">            </span><br><span class="line">            System.out.println(&quot;max:&quot; + max + &quot;,maxT:&quot; + maxT + &quot;;little:&quot; + little + &quot;,llittleT:&quot; + littleT);</span><br><span class="line">            </span><br><span class="line">            System.out.println(littleT&lt;=maxT?(little + &quot; &quot; + littleT):(max + &quot; &quot; + maxT));</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static int getMaxPrime(int x) &#123;</span><br><span class="line">    int temp = 0;</span><br><span class="line">    for (int i=x+1; i&lt;1000; i++) &#123;</span><br><span class="line">    if(isPrime(x)) &#123;</span><br><span class="line">    temp = x;</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static int getLittlePrime(int x) &#123;</span><br><span class="line">    int temp = 0;</span><br><span class="line">    for (int i=x-1; i&gt; 2; i--) &#123;</span><br><span class="line">    if(isPrime(x)) &#123;</span><br><span class="line">    temp = x;</span><br><span class="line">    break;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static boolean isPrime(int x) &#123;</span><br><span class="line">        if (x == 1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i=2; i&lt;x/2; i++) &#123;</span><br><span class="line">            if(x%i == 0) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    /*</span><br><span class="line">    public static boolean isPrime1(int x) &#123;</span><br><span class="line">        if (x == 1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i=2; i&lt;x/2; i++) &#123;</span><br><span class="line">            if(x%i == 0) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static boolean isPrime2(int x) &#123;</span><br><span class="line">        if (x == 1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (x % 2 == 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i=3; i&lt;x/2; i+=2) &#123;</span><br><span class="line">            if(x%i == 0) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static boolean isPrime3(int x) &#123;</span><br><span class="line">        if (x == 1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        for (int i=2; i&lt;(int)Math.sqrt((double)x); i++) &#123;</span><br><span class="line">            if(x%i == 0) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static boolean isPrime4(int x) &#123;</span><br><span class="line">        if (x == 1) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if (x % 2 == 0) &#123;</span><br><span class="line">        return false;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        for (int i=3; i&lt;(int)Math.sqrt((double)x); i+=2) &#123;</span><br><span class="line">            if(x%i == 0) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>后来看上文链接的讲解，决定采用筛选法，把素数全部列举出来。思想就是将1000000个数存进数组，用0和1表示，0表示此位置为非素数，1表示此位置为素数。需要注意的是边界问题。<br>情况1：向下寻找不到<br>情况2：输入999999朝上到最近的素质哪个，就是数组的上界。这里选1000010</p></blockquote><p><code>时间280,内存788</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static int[] primeArgs = new int[1000010];</span><br><span class="line">public static Scanner cin = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">static &#123;</span><br><span class="line">primeArgs[1] = 1;</span><br><span class="line"></span><br><span class="line">for (int i=2; i*i&lt;1000010; i++) &#123;</span><br><span class="line">if(primeArgs[i] == 0) &#123;</span><br><span class="line">for (int j=i*i; j&lt;1000010; j+=i) &#123;</span><br><span class="line">primeArgs[j] = 1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int N = cin.nextInt();</span><br><span class="line">int nUp, nDown;</span><br><span class="line"></span><br><span class="line">while(N-- &gt;0) &#123;</span><br><span class="line">int n = cin.nextInt();</span><br><span class="line"></span><br><span class="line">if(primeArgs[n] == 0) &#123;</span><br><span class="line">System.out.println(n + &quot; &quot; + 0);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">nUp = nDown = n;</span><br><span class="line"></span><br><span class="line">while (primeArgs[nUp] == 1) &#123;</span><br><span class="line">nUp ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">while (primeArgs[nDown] == 1 &amp;&amp; nDown &gt; 0) &#123;</span><br><span class="line">nDown --;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (nDown == 0) &#123;</span><br><span class="line">System.out.println(nUp + &quot; &quot; + (nUp - n));</span><br><span class="line">&#125; else if (nUp-n &gt;= n-nDown) &#123;</span><br><span class="line">System.out.println(nDown + &quot; &quot; + (n-nDown));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">System.out.println(nUp + &quot; &quot; + (nUp-n));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h1><blockquote><p>第一种方法是使用上述java代码的第一种方法</p></blockquote><p><code>时间256,内存240</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt; </span><br><span class="line">using namespace std;</span><br><span class="line">//0表示假，1/非0表真 </span><br><span class="line">int isPrime(int x)</span><br><span class="line">&#123;</span><br><span class="line">  if(x==1)</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">  for(int i=2; i*i&lt;=x; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    if(x%i==0)</span><br><span class="line">      return 0;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return 1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int N, num, numUp, numDown;</span><br><span class="line">  cin &gt;&gt; N;</span><br><span class="line">  </span><br><span class="line">  while(N--)</span><br><span class="line">  &#123;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    </span><br><span class="line">    if(isPrime(num))</span><br><span class="line">      cout &lt;&lt; num &lt;&lt; &quot; &quot; &lt;&lt; 0 &lt;&lt; endl;</span><br><span class="line">    else </span><br><span class="line">    &#123;</span><br><span class="line">      numUp = numDown = num;</span><br><span class="line">      </span><br><span class="line">      while(!isPrime(numUp))</span><br><span class="line">      &#123;</span><br><span class="line">        numUp ++; </span><br><span class="line">      &#125;  </span><br><span class="line">      </span><br><span class="line">      while((!isPrime(numDown)) &amp;&amp; numDown&gt;0)</span><br><span class="line">      &#123;</span><br><span class="line">        numDown --;</span><br><span class="line">      &#125;</span><br><span class="line">           </span><br><span class="line">      if(numDown == 0)</span><br><span class="line">        cout &lt;&lt; numUp &lt;&lt; &quot; &quot; &lt;&lt; numUp-num &lt;&lt; endl;</span><br><span class="line">      else if((numUp-num)&gt;=(num-numDown))</span><br><span class="line">        cout &lt;&lt; numDown &lt;&lt; &quot; &quot; &lt;&lt; num-numDown &lt;&lt; endl;</span><br><span class="line">      else</span><br><span class="line">        cout &lt;&lt; numUp &lt;&lt; &quot; &quot; &lt;&lt; numUp-num &lt;&lt; endl;</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>第二种方法是参照筛选的方法去计算，找到网上一个博客流传的c++方法<br><a href="http://m.blog.csdn.net/article/details?id=17200835" target="_blank" rel="noopener">NYOJ24 素数距离问题<br>发表于2013/12/8 15:19:09  2607人阅读</a><br>代码片段如下</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#define MAX 1000010</span><br><span class="line"></span><br><span class="line">int table[MAX];</span><br><span class="line">void buildPrimeTable()</span><br><span class="line">&#123; </span><br><span class="line">    table[1]=1;</span><br><span class="line">    for(int i=2;i*i&lt;MAX;i++)</span><br><span class="line">        if(!table[i])</span><br><span class="line">            for(int j=i*i;j&lt;MAX;j+=i)</span><br><span class="line">                table[j]=1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    buildPrimeTable();</span><br><span class="line">    int n,num,numUp,numDown;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    while(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;num);</span><br><span class="line">        if(table[num]==0)</span><br><span class="line">            printf(&quot;%d 0\n&quot;,num);</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            numUp=numDown=num;</span><br><span class="line">            while(table[numUp]!=0)</span><br><span class="line">                numUp++;</span><br><span class="line">            while(table[numDown]!=0&amp;&amp;numDown&gt;0)</span><br><span class="line">                numDown--;</span><br><span class="line">            if(numDown==0)</span><br><span class="line">                printf(&quot;%d %d\n&quot;,numUp,numUp-num);</span><br><span class="line">            else if(numUp-num&gt;=num-numDown)</span><br><span class="line">                printf(&quot;%d %d\n&quot;,numDown,num-numDown);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot;%d %d\n&quot;,numUp,numUp-num);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.22-素数求和问题</title>
      <link href="/2017/02/09/2017-02-09-%E5%8D%97%E9%98%B3OJ-No.22-%E7%B4%A0%E6%95%B0%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/"/>
      <url>/2017/02/09/2017-02-09-%E5%8D%97%E9%98%B3OJ-No.22-%E7%B4%A0%E6%95%B0%E6%B1%82%E5%92%8C%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-22"><a href="#南阳OJ-No-22" class="headerlink" title="南阳OJ-No.22"></a>南阳OJ-No.22</h1><p>时间限制3000ms，内存限制65535KB</p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>现在给你N个数（0 &lt; N &lt; 1000），现在要求你写出一个程序，找出这N个数中的所有素数，并求和。</p><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>第一行给出整数M(0 &lt; M &lt; 10)代表多少组测试数据<br>每组测试数据第一行给你N，代表该组测试数据的数量。<br>接下来的N个数为要测试的数据，每个数小于1000</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>每组测试数据结果占一行，输出给出的测试数据的所有素数和</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>3<br>5<br>1 2 3 4 5<br>8<br>11 12 13 14 15 16 17 18<br>10<br>21 22 23 24 25 26 27 28 29 30</p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h1><blockquote><p>10<br>41<br>52</p></blockquote><hr><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><p><code>时间135,内存1515</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static Scanner cin = new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws Exception&#123;</span><br><span class="line">int line = cin.nextInt();</span><br><span class="line">int sum;</span><br><span class="line">int[] s;</span><br><span class="line"></span><br><span class="line">while(line&gt;=1) &#123;</span><br><span class="line">s = getInt();</span><br><span class="line">sum = 0;</span><br><span class="line">for (int i=0; i&lt;s.length; i++) &#123;</span><br><span class="line">if(isPrime(s[i])) &#123;</span><br><span class="line">sum += s[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(sum);</span><br><span class="line">line --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int[] getInt() &#123;</span><br><span class="line">int x = cin.nextInt();</span><br><span class="line">int[] s = new int[x];</span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;s.length; i++) &#123;</span><br><span class="line">s[i] = cin.nextInt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isPrime(int x) &#123;</span><br><span class="line">if (x == 1) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (int i=2; i&lt;x; i++) &#123;</span><br><span class="line">if(x%i == 0) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>时间140,内存1523</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static Scanner cin = new Scanner(System.in);</span><br><span class="line">public static void main(String[] args) throws Exception&#123;</span><br><span class="line">int line=cin.nextInt();</span><br><span class="line">int sum;</span><br><span class="line">int[] s;</span><br><span class="line">while(line&gt;=1)&#123;</span><br><span class="line">s = getInt();</span><br><span class="line">sum = 0;</span><br><span class="line">for (int i=0; i&lt;s.length; i++)</span><br><span class="line">if(isPrime(s[i]))</span><br><span class="line">sum += s[i];</span><br><span class="line">System.out.println(sum);</span><br><span class="line">line --;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int[] getInt()&#123;</span><br><span class="line">int x = cin.nextInt();</span><br><span class="line">int[] s = new int[x];</span><br><span class="line">for(int i=0; i&lt;s.length; i++)</span><br><span class="line">s[i] = cin.nextInt();</span><br><span class="line">return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static boolean isPrime(int x)&#123;</span><br><span class="line">if (x == 1)</span><br><span class="line">return false;</span><br><span class="line">for (int i=2; i&lt;x; i++)</span><br><span class="line">if(x%i == 0)</span><br><span class="line">return false;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>仅仅把括号省略，以为更简洁，反而系统不情愿？？？注意书写规范</strong></p></blockquote><p><code>时间50,内存61</code><br>仅供参考<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">    public static int getInt() throws IOException&#123;</span><br><span class="line">        int i;</span><br><span class="line">        while((i = System.in.read()) &lt; 48 || i &gt; 57);</span><br><span class="line">        int temp = 0;</span><br><span class="line">        while(i &gt; 47 &amp;&amp; i &lt; 58)&#123;</span><br><span class="line">            temp = temp * 10 + i - 48;</span><br><span class="line">            i = System.in.read();</span><br><span class="line">        &#125;</span><br><span class="line">        return temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static boolean isPrime(int n)&#123;</span><br><span class="line">        if(n &lt; 2)</span><br><span class="line">            return false;</span><br><span class="line">        int len = (int)Math.sqrt(n) + 1;</span><br><span class="line">        for(int i = 2;i &lt; len; i++)</span><br><span class="line">            if(n%i == 0)</span><br><span class="line">                return false;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String args[]) throws IOException&#123;</span><br><span class="line">        int i, j, t, sum;</span><br><span class="line">        for (i = getInt(); i &gt; 0; i--) &#123;</span><br><span class="line">            sum = 0;</span><br><span class="line">            for(j = getInt(); j &gt; 0; j--)</span><br><span class="line">                if (isPrime(t = getInt()))</span><br><span class="line">                    sum += t;</span><br><span class="line">            System.out.println(sum);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><p><code>时间12,内存240</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt; </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">bool isPrime(int x)</span><br><span class="line">&#123;</span><br><span class="line">  if(x==1)</span><br><span class="line">    return false;</span><br><span class="line">    </span><br><span class="line">  for(int i=2; i&lt;x; i++)</span><br><span class="line">    if(x%i==0)</span><br><span class="line">      return false;</span><br><span class="line">      </span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int line, base, sum;</span><br><span class="line">  </span><br><span class="line">  cin &gt;&gt; line;</span><br><span class="line">  </span><br><span class="line">  while(line--)</span><br><span class="line">  &#123;</span><br><span class="line">    sum = 0;</span><br><span class="line">    cin &gt;&gt; base;</span><br><span class="line">    int s[base];</span><br><span class="line">    for(int i=0; i&lt;base; i++)</span><br><span class="line">      cin &gt;&gt; s[i];</span><br><span class="line">      </span><br><span class="line">    for(int i=0; i&lt;base; i++)</span><br><span class="line">      if(isPrime(s[i]))</span><br><span class="line">        sum += s[i];</span><br><span class="line">        </span><br><span class="line">    cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>时间4,内存240</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int prime(int n)</span><br><span class="line">&#123;</span><br><span class="line">    int a=2;</span><br><span class="line">    while(n&gt;=a)</span><br><span class="line">        if(!(n%a++))</span><br><span class="line">            break;</span><br><span class="line">    if(a==n+1&amp;&amp;n!=1)</span><br><span class="line">        return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,m;</span><br><span class="line">    int a[1024];</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    while(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        int sum=0;</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">        for(int i = 0;i&lt;m;++i)</span><br><span class="line">            scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">        for(int i = 0;i&lt;m;++i)</span><br><span class="line">            if(prime(a[i]))</span><br><span class="line">            sum+=a[i];</span><br><span class="line">        printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    &#125;</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>专利权申请</title>
      <link href="/2017/02/07/2017-02-07-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83/"/>
      <url>/2017/02/07/2017-02-07-%E7%9F%A5%E8%AF%86%E4%BA%A7%E6%9D%83/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="中国国家专利权官方网站"><a href="#中国国家专利权官方网站" class="headerlink" title="中国国家专利权官方网站"></a>中国国家专利权官方网站</h1><p><a href="http://www.sipo.gov.cn/" target="_blank" rel="noopener">中华人民共和国国家知识产权局</a></p><h1 id="专利分类"><a href="#专利分类" class="headerlink" title="专利分类"></a>专利分类</h1><blockquote><p><strong>发明专利</strong><br>是指对产品、方法或者其改进所提出的新的技术方案。</p></blockquote><blockquote><p><strong>实用新型专利</strong><br>是指对产品的形状、构造或者其结合所提出的适于实用的新的技术方案。</p></blockquote><blockquote><p><strong>外观设计专利</strong><br>是指对产品的形状、图案或者其结合以及色彩与形状、图案的结合所作出的富有美感并适于工业应用的新设计。</p></blockquote><a id="more"></a><p>（以上摘自 <a href="http://www.sipo.gov.cn/zhfwpt/zlsqzn/zlfssxzsczn/201508/t20150824_1164886.html" target="_blank" rel="noopener">中华人民共和国专利法（2008修正）</a>）</p><p><a href="http://zlsq.h.baike.com/article-666518.html" target="_blank" rel="noopener">实用新型专利和发明专利的区别</a></p><h1 id="申请部门安排"><a href="#申请部门安排" class="headerlink" title="申请部门安排"></a>申请部门安排</h1><blockquote><p>国务院专利行政部门负责管理全国的专利工作；统一受理和审查专利申请，依法授予专利权。<br>省、自治区、直辖市人民政府管理专利工作的部门负责本行政区域内的专利管理工作。</p></blockquote><p>（以上摘自 <a href="http://www.sipo.gov.cn/zhfwpt/zlsqzn/zlfssxzsczn/201508/t20150824_1164886.html" target="_blank" rel="noopener">中华人民共和国专利法（2008修正）</a>）</p><blockquote><p><strong>河南省申报专利官方网站</strong><br><a href="http://www.hnpatent.gov.cn/" target="_blank" rel="noopener">河南省知识产权局</a></p></blockquote><h1 id="专利权注意事项"><a href="#专利权注意事项" class="headerlink" title="专利权注意事项"></a>专利权注意事项</h1><blockquote><p><strong>合作完成专利权</strong><br>　　两个以上单位或者个人合作完成的发明创造、一个单位或者个人接受其他单位或者个人委托所完成的发明创造，除另有协议的以外，申请专利的权利属于完成或者共同完成的单位或者个人；申请被批准后，申请的单位或者个人为专利权人。<br><strong>同样的发明创造只能授予一项专利权</strong><br>　　同样的发明创造只能授予一项专利权。但是，同一申请人同日对同样的发明创造既申请实用新型专利又申请发明专利，先获得的实用新型专利权尚未终止，且申请人声明放弃该实用新型专利权的，可以授予发明专利权。<br><strong>专利权可以转让</strong><br><strong>国内国外专利申请规定</strong><br>　　任何单位或者个人将在中国完成的发明或者实用新型向外国申请专利的，应当事先报经国务院专利行政部门进行保密审查。保密审查的程序、期限等按照国务院的规定执行。<br>　　中国单位或者个人可以根据中华人民共和国参加的有关国际条约提出专利国际申请。申请人提出专利国际申请的，应当遵守前款规定。<br>　　国务院专利行政部门依照中华人民共和国参加的有关国际条约、本法和国务院有关规定处理专利国际申请。<br>　　对违反本条第一款规定向外国申请专利的发明或者实用新型，在中国申请专利的，不授予专利权。<br><strong>授予专利权的发明和实用新型，应当具备新颖性、创造性和实用性。</strong><br>　　新颖性，是指该发明或者实用新型不属于现有技术；也没有任何单位或者个人就同样的发明或者实用新型在申请日以前向国务院专利行政部门提出过申请，并记载在申请日以后公布的专利申请文件或者公告的专利文件中。<br>　　创造性，是指与现有技术相比，该发明具有突出的实质性特点和显著的进步，该实用新型具有实质性特点和进步。<br>　　实用性，是指该发明或者实用新型能够制造或者使用，并且能够产生积极效果。<br>　　本法所称现有技术，是指申请日以前在国内外为公众所知的技术。<br><strong>不丧失新颖性的规定</strong><br>　　申请专利的发明创造在申请日以前六个月内，有下列情形之一的，不丧失新颖性：<br>　　（一）在中国政府主办或者承认的国际展览会上首次展出的；<br>　　（二）在规定的学术会议或者技术会议上首次发表的；<br>　　（三）他人未经申请人同意而泄露其内容的。<br><strong>以下不授予专利权</strong><br>　　（一）科学发现；<br>　　（二）智力活动的规则和方法；<br>　　（三）疾病的诊断和治疗方法；<br>　　（四）动物和植物品种；<br>　　（五）用原子核变换方法获得的物质；<br>　　（六）对平面印刷品的图案、色彩或者二者的结合作出的主要起标识作用的设计。<br><strong>专利申请日期</strong><br>　　国务院专利行政部门收到专利申请文件之日为申请日。如果申请文件是邮寄的，以寄出的邮戳日为申请日。<br><strong>申请人优先权</strong><br>　　申请人自发明或者实用新型在外国第一次提出专利申请之日起十二个月内，或者自外观设计在外国第一次提出专利申请之日起六个月内，又在中国就相同主题提出专利申请的，依照该外国同中国签订的协议或者共同参加的国际条约，或者依照相互承认优先权的原则，可以享有优先权。<br>　　申请人自发明或者实用新型在中国第一次提出专利申请之日起十二个月内，又向国务院专利行政部门就相同主题提出专利申请的，可以享有优先权。<br>　　申请人要求优先权的，应当在申请的时候提出书面声明，并且在三个月内提交第一次提出的专利申请文件的副本；未提出书面声明或者逾期未提交专利申请文件副本的，视为未要求优先权。<br><strong>专利复查</strong><br>　　重点内容国务院专利行政部门设立专利复审委员会。专利申请人对国务院专利行政部门驳回申请的决定不服的，可以自收到通知之日起三个月内，向专利复审委员会请求复审。专利复审委员会复审后，作出决定，并通知专利申请人。<br><strong>专利期限</strong><br>　　发明专利权的期限为二十年，实用新型专利权和外观设计专利权的期限为十年，均自申请日起计算。<br><strong>专利需要缴费</strong><br>　　专利权人应当自被授予专利权的当年开始缴纳年费。<br>　　向国务院专利行政部门申请专利和办理其他手续，应当按照规定缴纳费用。</p></blockquote><p>（以上[<strong>非黑体</strong>文字]摘自<a href="http://www.sipo.gov.cn/zhfwpt/zlsqzn/zlfssxzsczn/201508/t20150824_1164886.html" target="_blank" rel="noopener">中华人民共和国专利法（2008修正）</a>）</p><h1 id="电子申请流程"><a href="#电子申请流程" class="headerlink" title="电子申请流程"></a>电子申请流程</h1><p><a href="http://www.cponline.gov.cn/" target="_blank" rel="noopener">中国专利电子申请网</a><br><a href="http://www.sipo.gov.cn/zhfwpt/zldzsq/" target="_blank" rel="noopener">专利电子申请介绍</a><br><a href="http://www.cponline.gov.cn/apply/953.jhtml" target="_blank" rel="noopener">电子申请使用流程简介</a></p><h1 id="书面申请流程（郑州代办处）"><a href="#书面申请流程（郑州代办处）" class="headerlink" title="书面申请流程（郑州代办处）"></a>书面申请流程（郑州代办处）</h1><p><a href="http://www.hnpatent.gov.cn/service/detail/3/7.shtml" target="_blank" rel="noopener">郑州代办处专利申请须知</a></p><p><img src="http://www.hnpatent.gov.cn/upload/img/60723_20161207163912890.png" alt="专利申请流程"></p><h2 id="文件准备"><a href="#文件准备" class="headerlink" title="文件准备"></a>文件准备</h2><p><a href="http://www.sipo.gov.cn/zhfwpt/zlsqzn/zlsqspcxjs/zlsqxgsxjs/" target="_blank" rel="noopener"><strong>专利申请相关事项介绍!!!</strong></a></p><h3 id="发明专利"><a href="#发明专利" class="headerlink" title="发明专利"></a>发明专利</h3><blockquote><p>发明专利请求书、说明书摘要(必要时应当提交摘要附图)、权利要求书、说明书(必要时应当提交说明书附图)。</p></blockquote><p>###实用新型专利</p><blockquote><p>实用新型专利请求书、说明书摘要及其摘要附图、权利要求书、说明书、说明书附图。</p></blockquote><p>###外观设计专利</p><blockquote><p>外观设计专利请求书、图片或者照片(要求保护色彩的，应当提交彩色图片或者照片)以及对该外观设计的简要说明。</p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><blockquote><p><strong>申请费用减缓</strong><br>　　申请人或者专利权人请求专利费用减缓的，应当提交费用减缓请求书，必要时还应附具有关证明文件。费用减缓请求书应当由全体申请人或专利权人签字或者盖章。<br>　　个人请求专利费用减缓的，应当在费用减缓请求书中如实填写本人的年收入情况，必要时应当根据专利局的要求，提供市级以上人民政府管理专利工作的部门出具的关于其经济困难情况的证明。<br>　　两个或者两个以上的个人共同请求专利费用减缓的，应当在费用减缓请求书中如实填写每个人的年收入情况，必要时应当根据专利局的要求，提供市级以上人民政府管理专利工作的部门出具的关于其经济困难情况的证明。<br>　　单位请求专利费用减缓的，应当在费用减缓请求书中，如实填写经济困难情况，并附具市级以上人民政府管理专利工作的部门出具的证明。<br>　　个人与单位共同请求专利费用减缓的，个人应当在费用减缓请求书中如实填写本人的年收入情况，单位应当如实填写经济困难情况，并附具市级以上人民政府管理专利工作的部门出具的证明。<br><strong>减缓金额</strong><br>　　个人以85%比例减缓。<br>　　两个以上的个人（含两个）或个人与单位共同申请专利的或一个单位请求减缓的按70%比例减缓。<br><strong>以下情况不审批减缓</strong><br>　　（1）未使用专利局制定的费用减缓请求书的；<br>　　（2）全体申请人或者专利权人未在费用减缓请求书中签字或者盖章的；<br>　　（3）提出费用减缓请求的单位或者个人未提供符合本办法第七条规定的证明的；<br>　　（4）申请人或者专利权人的个人年收入超过二万五千元人民币的；<br>　　（5）费用减缓请求书中未注明全体申请人或者专利权人的个人年收入的；<br>　　（6）申请人或者专利权人为两个以上单位的；<br>　　（7）费用减缓请求书中的申请人或者专利权人名称或者发明创造名称与专利请求书中的相应内容不一致的。</p></blockquote><p><a href="http://www.sipo.gov.cn/zcfg/flfg/zl/xzfg/201509/t20150902_1169597.html" target="_blank" rel="noopener"><strong>《专利法实施细则》</strong></a></p><blockquote><p><strong>细则第一百二十条</strong><br>　　各类申请文件应当打字或者印刷，字迹呈黑色，整齐清晰，并不得涂改。附图应当用制图工具和黑色墨水绘制，线条应当均匀清晰，并不得涂改。<br>　　请求书、说明书、权利要求书、附图和摘要应当分别用阿拉伯数字顺序编号。<br>　　申请文件的文字部分应当横向书写。纸张限于单面使用。<br><strong>细则第十八条</strong><br>　　发明或者实用新型的几幅附图应当按照“图1，图2，……”顺序编号排列。<br>　　发明或者实用新型说明书文字部分中未提及的附图标记不得在附图中出现，附图中未出现的附图标记不得在说明书文字部分中提及。申请文件中表示同一组成部分的附图标记应当一致。<br>　　附图中除必需的词语外，不应当含有其他注释。<br><strong>细则第十九条</strong><br>　　权利要求书应当记载发明或者实用新型的技术特征。<br>　　权利要求书有几项权利要求的，应当用阿拉伯数字顺序编号。<br>　　权利要求书中使用的科技术语应当与说明书中使用的科技术语一致，可以有化学式或者数学式，但是不得有插图。除绝对必要的外，不得使用“如说明书……部分所述”或者“如图……所示”的用语。<br>　　权利要求中的技术特征可以引用说明书附图中相应的标记，该标记应当放在相应的技术特征后并置于括号内，便于理解权利要求。附图标记不得解释为对权利要求的限制。 </p></blockquote><h2 id="专利缴费"><a href="#专利缴费" class="headerlink" title="专利缴费"></a>专利缴费</h2><blockquote><p><strong>缴费方式</strong><br>　　申请费以及其他费用都可以直接向专利局收费处或专利局代办处面交，或通过银行或邮局汇付。目前，银行采用电子划拨，邮局大部分采用电子汇兑方式。缴费人通过银行或邮局缴付专利费用时，应当在汇单上写明正确的申请号或者专利号，缴纳费用的名称可使用简称。缴费人应当要求银行或邮局工作人员在汇款附言栏中录入上述缴费信息，通过邮局汇款的，还应当要求邮局工作人员录入完整通讯地址，包括邮政编码，这些信息在以后的程序中是有重要作用的。费用不得寄到专利局受理处。</p></blockquote><p>缴费指南参考：<a href="http://www.hnpatent.gov.cn/service/detail/6/20.shtml" target="_blank" rel="noopener">河南知识产权局|专利缴费指南</a></p><p><a href="http://www.hnpatent.gov.cn/service/detail/7/27.shtml" target="_blank" rel="noopener">国家知识产权局专利收费标准一览表</a><br><a href="http://www.hnpatent.gov.cn/downFile/1934.pdf" target="_blank" rel="noopener">[下载]</a></p><h2 id="国家知识产权局专利局郑州代办处"><a href="#国家知识产权局专利局郑州代办处" class="headerlink" title="国家知识产权局专利局郑州代办处"></a>国家知识产权局专利局郑州代办处</h2><blockquote><p>电   　 话：0371-65977156<br>传　　真：0371-65978899<br>邮政编码：450000<br>通讯地址：郑州市花园路27号科技信息大厦附楼<br>开户银行：工商银行郑州市政二街支行<br>户　　名：国家知识产权局专利局郑州代办处<br>账　　号：1702129129249500757</p></blockquote><blockquote><p>##时间地点安排<br>　　面交：上午：8:30-11:30  下午：夏季3：00－6：00，冬季2：00－5：00(节假日除外)<br>　　寄交：郑州市金水区农业路东段28号报业大厦17楼1704房间<br>　　邮编：450003<br>　　电话：0371-65977156</p></blockquote>]]></content>
      
      <categories>
          
          <category> 知识产权 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识产权 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>欢迎使用Markdown编辑器写博客</title>
      <link href="/2017/02/07/2017-02-07-markdown%E7%BC%96%E8%BE%91%E5%99%A8%E6%B5%8B%E8%AF%95%E8%AF%AD%E6%B3%95/"/>
      <url>/2017/02/07/2017-02-07-markdown%E7%BC%96%E8%BE%91%E5%99%A8%E6%B5%8B%E8%AF%95%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器写博客"><a href="#欢迎使用Markdown编辑器写博客" class="headerlink" title="欢迎使用Markdown编辑器写博客"></a>欢迎使用Markdown编辑器写博客</h1><p>本Markdown编辑器使用<a href="https://github.com/benweet/stackedit" target="_blank" rel="noopener">StackEdit</a>修改而来，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong><em>LaTex</em>数学公式</strong></li><li><strong>UML序列图和流程图</strong></li><li><strong>离线写博客</strong></li><li><strong>导入导出Markdown文件</strong></li><li><strong>丰富的快捷键</strong></li></ul><a id="more"></a><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>加粗    <code>Ctrl + B</code> </li><li>斜体    <code>Ctrl + I</code> </li><li>引用    <code>Ctrl + Q</code></li><li>插入链接    <code>Ctrl + L</code></li><li>插入代码    <code>Ctrl + K</code></li><li>插入图片    <code>Ctrl + G</code></li><li>提升标题    <code>Ctrl + H</code></li><li>有序列表    <code>Ctrl + O</code></li><li>无序列表    <code>Ctrl + U</code></li><li>横线    <code>Ctrl + R</code></li><li>撤销    <code>Ctrl + Z</code></li><li>重做    <code>Ctrl + Y</code></li></ul><h2 id="Markdown及扩展"><a href="#Markdown及扩展" class="headerlink" title="Markdown及扩展"></a>Markdown及扩展</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank"> [ 维基百科 ]</a></p></blockquote><p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.csdn.net" target="_blank" rel="noopener">链接</a>等，详细语法参考帮助？。</p><p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href="https://github.com/jmcmanus/pagedown-extra" title="Pagedown Extra" target="_blank" rel="noopener">Github</a>.  </p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p><table><thead><tr><th>项目</th><th>价格</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 元</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 元</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 元</td><td style="text-align:center">234</td></tr></tbody></table><p>###定义列表</p><p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A<br>:   定义 B</p><p>项目３<br>:   定义 C</p><p>:   定义 D</p><pre><code>&gt; 定义D内容</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure></p><p>###脚注<br>生成一个脚注[^footnote].<br>[^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p><p>[TOC]</p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/" target="_blank" rel="noopener">math.stackexchange.com</a>.</p><ul><li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li><li><p>块级公式：</p><p> $    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p></li></ul><p>更多LaTex语法请参考 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">这儿</a>.</p><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><p>或者流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>序列图</strong> 语法，参考 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">这儿</a>,</li><li>关于 <strong>流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">这儿</a>.</li></ul><hr>]]></content>
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.13-Fibonacci数</title>
      <link href="/2017/02/03/2017-02-03-%E5%8D%97%E9%98%B3OJ-No.13-Fibonacci%E6%95%B0/"/>
      <url>/2017/02/03/2017-02-03-%E5%8D%97%E9%98%B3OJ-No.13-Fibonacci%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-13"><a href="#南阳OJ-No-13" class="headerlink" title="南阳OJ-No.13"></a>南阳OJ-No.13</h1><p><code>时间限制:3000ms,空间限制:65535KB</code></p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>无穷数列1，1，2，3，5，8，13，21，34，55…称为Fibonacci数列，它可以递归地定义为<br>F(n)=1 ………..(n=1或n=2)<br>F(n)=F(n-1)+F(n-2)…..(n&gt;2)<br>现要你来求第n个斐波纳奇数。（第1个、第二个都为1)</p><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>第一行是一个整数m(m&lt;5)表示共有m组测试数据<br>每次测试数据只有一行，且只有一个整形数n(n&lt;20)</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>对每组输入n，输出第n个Fibonacci数</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>3<br>1<br>3<br>5</p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h1><blockquote><p>1<br>2<br>5</p></blockquote><hr><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p><code>**时间46，内存311**</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner cin = new Scanner(System.in);</span><br><span class="line">int a = cin.nextInt();</span><br><span class="line">int temp;</span><br><span class="line"></span><br><span class="line">for (int n=0; n&lt;a; n++) &#123;</span><br><span class="line">temp = cin.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(Fibonacci(temp));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int Fibonacci(int n) &#123;</span><br><span class="line">if (n == 1) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else if (n == 2)&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return Fibonacci(n-1) + Fibonacci(n-2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>**时间25，内存311**</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner cin = new Scanner(System.in);</span><br><span class="line">int a = cin.nextInt();</span><br><span class="line">int temp;</span><br><span class="line"></span><br><span class="line">for (int n=0; n&lt;a; n++) &#123;</span><br><span class="line">temp = cin.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(Fibonacci(temp));</span><br><span class="line">&#125;</span><br><span class="line">/***/</span><br><span class="line">cin.close();</span><br><span class="line">/***/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int Fibonacci(int n) &#123;</span><br><span class="line">if (n == 1) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else if (n == 2)&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return Fibonacci(n-1) + Fibonacci(n-2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>主动关闭Scanner流会节省时间！！！</strong></p></blockquote><p><code>**时间24，内存311**</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main_13 &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner cin = new Scanner(System.in);</span><br><span class="line">int a = cin.nextInt();</span><br><span class="line">int temp;</span><br><span class="line"></span><br><span class="line">while (a&gt;0) &#123;</span><br><span class="line">temp = cin.nextInt();</span><br><span class="line"></span><br><span class="line">System.out.println(Fibonacci(temp));</span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cin.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static int Fibonacci(int n) &#123;</span><br><span class="line">if (n == 1) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;else if (n == 2)&#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">return Fibonacci(n-1) + Fibonacci(n-2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>将for改成while节省1时间！！！</strong></p></blockquote><p><code>**时间3，内存61**</code><br>依旧是用户名为 Bryan 的一大神给出的算法，投币看代码~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static Scanner cin=new Scanner(System.in);</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int line = 0;</span><br><span class="line">int number = cin.nextInt();</span><br><span class="line"></span><br><span class="line">for(int i = 0; i &lt; number; i++)&#123;</span><br><span class="line">line = cin.nextInt();</span><br><span class="line">System.out.println(f(line));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int f(int i)&#123;</span><br><span class="line">if (i &lt;= 2 &amp;&amp; i &gt;= 0 ) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">return f(i - 1) + f(i - 2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>将数据转换为 static 类型的重要性！！！</strong>（且Scanner主动关闭与否不影响时间）</p></blockquote><p><code>**时间1，内存61**</code><br>Google出来的算是最高效的算法了，2017.2.3标记下，看不懂~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">public static BufferedReader in = new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">public static void main(String[] args) throws IOException&#123;</span><br><span class="line">int lineNum = Main.readInt();</span><br><span class="line">int f1 = 1;</span><br><span class="line">int f2 = 1;</span><br><span class="line">int fn = 0;</span><br><span class="line">for(int i = 0; i &lt; lineNum; i++)&#123;</span><br><span class="line">int num = Main.readInt();</span><br><span class="line">if(num &lt;= 2)&#123;</span><br><span class="line">System.out.println(f1);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">f1 = 1;</span><br><span class="line">f2 = 1;</span><br><span class="line">for(int j = 3; j &lt;= num; j++)&#123;</span><br><span class="line">fn = f1 + f2;</span><br><span class="line">f1 = f2;</span><br><span class="line">f2 = fn;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(fn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">in.close();</span><br><span class="line">&#125;</span><br><span class="line">public static int readInt() throws IOException&#123;</span><br><span class="line">String str = in.readLine();</span><br><span class="line">int num = Integer.parseInt(str);</span><br><span class="line">return num;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><p><code>时间0，内存240</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt; </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int f(int i)</span><br><span class="line">&#123;</span><br><span class="line">if (i &lt;= 2 &amp;&amp; i &gt;= 0 ) &#123;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line">return f(i - 1) + f(i - 2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a;</span><br><span class="line">  cin &gt;&gt; a;</span><br><span class="line">  int temp;</span><br><span class="line">  </span><br><span class="line">  for(int i = 0; i &lt; a; i++)&#123;</span><br><span class="line">cin &gt;&gt; temp;</span><br><span class="line">cout &lt;&lt; f(temp) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.11-奇偶数分离</title>
      <link href="/2017/02/02/2017-02-02-%E5%8D%97%E9%98%B3OJ-No.11-%E5%A5%87%E5%81%B6%E6%95%B0%E5%88%86%E7%A6%BB/"/>
      <url>/2017/02/02/2017-02-02-%E5%8D%97%E9%98%B3OJ-No.11-%E5%A5%87%E5%81%B6%E6%95%B0%E5%88%86%E7%A6%BB/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-11"><a href="#南阳OJ-No-11" class="headerlink" title="南阳OJ-No.11"></a>南阳OJ-No.11</h1><p><code>时间限制：3000 ms  |  内存限制：65535 KB</code></p><h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>&nbsp;有一个整型偶数n(2&lt;= n &lt;=10000),你要做的是：先把1到n中的所有奇数从小到大输出，再把所有的偶数从小到大输出。</p><a id="more"></a><h1 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h1><p>第一行有一个整数i（2&lt;=i&lt;30)表示有 i 组测试数据；<br>每组有一个整型偶数n。</p><h1 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h1><p>第一行输出所有的奇数<br>第二行输出所有的偶数</p><h1 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h1><blockquote><p>2<br>10<br>14</p></blockquote><h1 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h1><blockquote><p>1 3 5 7 9<br>2 4 6 8 10</p><p>1 3 5 7 9 11<br>2 4 6 8 10 12</p></blockquote><hr><h2 id="java"><a href="#java" class="headerlink" title="java"></a>java</h2><p><code>时间124，内存1849</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/*2017.2.1</span><br><span class="line"> * JDK1.7</span><br><span class="line"> * 奇偶数分离</span><br><span class="line"> * */</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) throws Exception&#123;</span><br><span class="line">Scanner cin = new Scanner(System.in);</span><br><span class="line">int a = cin.nextInt();//a组数据</span><br><span class="line"></span><br><span class="line">while (a&gt;=1) &#123;//a组测试，则为a组循环</span><br><span class="line">int x = cin.nextInt();</span><br><span class="line"></span><br><span class="line">for (int n=1; n&lt;=x; n++) &#123;//遍历输出奇数</span><br><span class="line">if (n%2 !=0) &#123;</span><br><span class="line">System.out.print(n + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">for (int n=1; n&lt;=x; n++) &#123;//遍历输出偶数</span><br><span class="line">if (n%2 == 0) &#123;</span><br><span class="line">System.out.print(n + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>时间114，内存1849</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">/*2017.2.1</span><br><span class="line"> * JDK1.7</span><br><span class="line"> * 奇偶数分离</span><br><span class="line"> * */</span><br><span class="line">import java.util.Scanner;</span><br><span class="line">public class Main &#123;</span><br><span class="line">public static void main(String[] args) throws Exception&#123;</span><br><span class="line">Scanner cin = new Scanner(System.in);</span><br><span class="line">int a = cin.nextInt();//a组数据</span><br><span class="line"></span><br><span class="line">while (a&gt;=1) &#123;//a组测试，则为a组循环</span><br><span class="line">int x = cin.nextInt();</span><br><span class="line">int n = 1;</span><br><span class="line">while (n&lt;=x)</span><br><span class="line">&#123;</span><br><span class="line">if (n%2 !=0) &#123;</span><br><span class="line">System.out.print(n + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">n = 1;</span><br><span class="line">while (n&lt;=x) &#123;</span><br><span class="line">if (n%2 == 0) &#123;</span><br><span class="line">System.out.print(n + &quot; &quot;);</span><br><span class="line">&#125;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><b>while效率要比for循环高！！！！！</b></p></blockquote><p><code>时间58，内存1788</code></p><p>该解法来自网络，原文请参照<br><a href="blog.csdn.net/topwqp/article/details/8961727#">来自安德里亚的成长：奇偶数分离</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;  </span><br><span class="line">  </span><br><span class="line">public class Main &#123;  </span><br><span class="line">public static void main(String[] args) &#123;  </span><br><span class="line">int [] src = getInt();//读取输入</span><br><span class="line">    StringBuffer odds, evens;//odds用于存储奇数，evens用于存储偶数</span><br><span class="line">    </span><br><span class="line">    for(int j = 0; j &lt; src.length; j++) &#123;  </span><br><span class="line">        odds = new StringBuffer();</span><br><span class="line">        evens = new StringBuffer(); </span><br><span class="line">        </span><br><span class="line">    for(int i = 1; i &lt;= src[j]; i++) &#123;//一次遍历即可获得奇偶数分离  </span><br><span class="line">        if(isOdd(i)) &#123;  </span><br><span class="line">            odds.append(i+&quot; &quot;);  </span><br><span class="line">        &#125; else &#123;  </span><br><span class="line">            evens.append(i+&quot; &quot;);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    //输出结果</span><br><span class="line">    System.out.println(odds.toString());  </span><br><span class="line">    System.out.println(evens.toString());  </span><br><span class="line">    System.out.println();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">public static  int[] getInt() &#123;  </span><br><span class="line">    Scanner sc=new Scanner(System.in);  </span><br><span class="line">    int x=sc.nextInt();  </span><br><span class="line">    int[] s=new int[x];  </span><br><span class="line">    for(int i=0;i&lt;s.length;i++)&#123;  </span><br><span class="line">        s[i]=sc.nextInt();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    return s;  </span><br><span class="line">&#125;</span><br><span class="line">//判断是奇数  </span><br><span class="line">public static  boolean isOdd(int i) &#123;  </span><br><span class="line">    if(i % 2 != 0) return true;  </span><br><span class="line">    return false;  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>时间34，内存436</code><br>这个是在南阳OJ上通过结果里找的算是最优的算法了，投了一个币偷瞄了下源码，用户名Bryan，一个字，美！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line">public static Scanner cin = new Scanner(System.in);</span><br><span class="line">public static StringBuilder sb = new StringBuilder();</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int line = 0;</span><br><span class="line">int number = cin.nextInt();</span><br><span class="line"></span><br><span class="line">for(int i=0; i&lt;number; i++)&#123;</span><br><span class="line">line = cin.nextInt();</span><br><span class="line"></span><br><span class="line">for(int j=1; j&lt;=line; j+=2)&#123;</span><br><span class="line">sb.append(j).append(&apos; &apos;);</span><br><span class="line">&#125;</span><br><span class="line">sb.append(&apos;\n&apos;);</span><br><span class="line"></span><br><span class="line">for(int j = 2; j&lt;=line; j+=2)&#123;</span><br><span class="line">sb.append(j).append(&apos; &apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(sb);</span><br><span class="line">sb.delete(0, sb.length());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><p><code>时间4,内存240</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt; </span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  int a;  //记录循环次数</span><br><span class="line">  cin &gt;&gt; a;</span><br><span class="line">  </span><br><span class="line">  while(a&gt;=1)</span><br><span class="line">  &#123;</span><br><span class="line">    int x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    </span><br><span class="line">    for (int n=1; n&lt;=x; n++) &#123;  //遍历输出奇数</span><br><span class="line">      if (n%2 !=0) &#123;</span><br><span class="line">          cout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">    for (int n=1; n&lt;=x; n++) &#123;  //遍历输出偶数</span><br><span class="line">        if (n%2 == 0) &#123;</span><br><span class="line">            cout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    a--;</span><br><span class="line">  &#125; </span><br><span class="line">  </span><br><span class="line">  return 0; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>时间0，内存240</code><br>最优解法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"> int n;</span><br><span class="line"> scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line"> int a;</span><br><span class="line"> while(n--)</span><br><span class="line"> &#123;</span><br><span class="line">  scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">  for(int i=1;i&lt;=a;i+=2)</span><br><span class="line">   printf(&quot;%d &quot;,i);</span><br><span class="line">  puts(&quot;&quot;);</span><br><span class="line">  for(int i=2;i&lt;=a;i+=2)</span><br><span class="line">   printf(&quot;%d &quot;,i);</span><br><span class="line">  puts(&quot;&quot;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>南阳OJ-No.4-ASCII码排序</title>
      <link href="/2017/01/31/2017-01-31-%E5%8D%97%E9%98%B3OJ-No.4-ASCII%E7%A0%81%E6%8E%92%E5%BA%8F/"/>
      <url>/2017/01/31/2017-01-31-%E5%8D%97%E9%98%B3OJ-No.4-ASCII%E7%A0%81%E6%8E%92%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="南阳OJ-No-4"><a href="#南阳OJ-No-4" class="headerlink" title="南阳OJ-No.4"></a>南阳OJ-No.4</h1><p><code>时间限制3000ms，内存限制65535kb</code></p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>输入三个字符（可以重复）后，按各字符的ASCII码从小到大的顺序输出这三个字符。</p><a id="more"></a><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行输入一个数N,表示有N组测试数据。后面的N行输入多组数据，每组输入数据都是占一行，有三个字符组成，之间无空格。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每组输入数据，输出一行，字符中间用一个空格分开。</p><h2 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h2><blockquote><p>2<br>qwe<br>asd</p></blockquote><h2 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h2><blockquote><p>e q w<br>a d s</p></blockquote><hr><p><code>时间200,内存373</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">/*2017.1.31</span><br><span class="line"> * jdk1.7</span><br><span class="line"> * ASCII码排序</span><br><span class="line"> * */</span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class Main &#123;//程序入口</span><br><span class="line">public static void main(String[] args) throws Exception &#123;//应程序要求，OJ规范，抛出异常</span><br><span class="line">Scanner cin = new Scanner(System.in);//采用Scanner读取控制台</span><br><span class="line">int a = cin.nextInt();//记录数据组数</span><br><span class="line"></span><br><span class="line">for (int n=a; n&gt;=1; n--) &#123;//每组</span><br><span class="line">char m, v, p;//记录三个char字符</span><br><span class="line">String s1 = cin.next();//Scanner读入的是一个String</span><br><span class="line">//读取字符串中的字符</span><br><span class="line">m = s1.charAt(0);</span><br><span class="line">v = s1.charAt(1);</span><br><span class="line">p = s1.charAt(2);</span><br><span class="line"></span><br><span class="line">sort1(m, v, p);//方法调用</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//方法：输入三个字符（可以重复）后，按各字符的ASCII码从小到大的顺序输出这三个字符。</span><br><span class="line">public static void sort1(char a, char b, char c) &#123;</span><br><span class="line">char t1 = a;  //分别定义三个char变量用于记录形参传来的三个值</span><br><span class="line">char t2 = b;</span><br><span class="line">char t3 = c;</span><br><span class="line">char t; //临时变量</span><br><span class="line">//三个数字，按增序输出</span><br><span class="line">if (t1 &gt; t2) &#123; //如果第一个数大于第二个数，交换第一个数和第二个数 </span><br><span class="line">t = t1; //交换t1和t2 </span><br><span class="line">    t1 = t2;</span><br><span class="line">    t2 = t;</span><br><span class="line">&#125;</span><br><span class="line">  //此时第一个数一定比第二个数小 </span><br><span class="line">if(t3 &lt; t1)//若第三个数比t1小 </span><br><span class="line">System.out.println(t3 + &quot; &quot; + t1 + &quot; &quot; + t2 + &quot;\n&quot;);</span><br><span class="line">else if(t3 &gt; t2) //若第三个数比t2大 </span><br><span class="line">System.out.println(t1 + &quot; &quot; + t2 + &quot; &quot; + t3 + &quot;\n&quot;);</span><br><span class="line">else //第三个数介于t1和t2之间 </span><br><span class="line">System.out.println(t1 + &quot; &quot; + t3 + &quot; &quot; + t2 + &quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><code>时间4，内存240</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">void sort1(char a, char b, char c)  //输入三个字符，按字符的ASCII码从小到大的顺序输出这三个字符</span><br><span class="line">&#123;</span><br><span class="line">  char t1 = a;  //分别定义三个char变量用于记录形参传来的三个值</span><br><span class="line">  char t2 = b;</span><br><span class="line">  char t3 = c;</span><br><span class="line">  char t; //临时变量</span><br><span class="line">  //三个数字，按增序输出 </span><br><span class="line">  if (t1 &gt; t2)  //如果第一个数大于第二个数，交换第一个数和第二个数 </span><br><span class="line">  &#123;</span><br><span class="line">    t = t1; //交换t1和t2 </span><br><span class="line">    t1 = t2;</span><br><span class="line">    t2 = t;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //此时第一个数一定比第二个数小 </span><br><span class="line">  if(t3 &lt; t1) //若第三个数比t1小 </span><br><span class="line">    cout &lt;&lt; t3 &lt;&lt; &quot; &quot; &lt;&lt; t1 &lt;&lt; &quot; &quot; &lt;&lt; t2 &lt;&lt; endl; </span><br><span class="line">  else if(t3 &gt; t2) //若第三个数比t2大 </span><br><span class="line">    cout &lt;&lt; t1 &lt;&lt; &quot; &quot; &lt;&lt; t2 &lt;&lt; &quot; &quot; &lt;&lt; t3 &lt;&lt; endl;</span><br><span class="line">  else //第三个数介于t1和t2之间 </span><br><span class="line">    cout &lt;&lt; t1 &lt;&lt; &quot; &quot; &lt;&lt; t3 &lt;&lt; &quot; &quot; &lt;&lt; t2 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">int main()  //程序入口 </span><br><span class="line">&#123;</span><br><span class="line">  int a;  //记录循环次数 </span><br><span class="line">  </span><br><span class="line">  cin &gt;&gt; a;</span><br><span class="line">  for (int n=a; n&gt;=1; n--) </span><br><span class="line">  &#123;</span><br><span class="line">    char a,b,c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    sort1(a, b, c);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OJ练习题 </tag>
            
            <tag> 南阳OJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shadowsocks初识及VPN和VPS区别</title>
      <link href="/2017/01/30/2017-01-30-Shadowsocks%E5%88%9D%E8%AF%86%E5%8F%8AVPN%E5%92%8CVPS%E5%8C%BA%E5%88%AB/"/>
      <url>/2017/01/30/2017-01-30-Shadowsocks%E5%88%9D%E8%AF%86%E5%8F%8AVPN%E5%92%8CVPS%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><pre><code>博主第一次接触翻墙软件，有些概念简单记录下，以后有更深研究则更新该片。百度Shadowsocks这个关键词一直出不来，中文名称影梭，简称ss。无意间听说了这个软件，以前一直用的都是蓝灯一键翻墙，现在蓝灯收费了，只好换个软件玩了。目前身边有好多手机挂vpn逃流量的案例，出现了越来越多的付费翻墙软件。 下面是博主的一些对于Shadowsocks的一些简单理解。</code></pre><h1 id="VPN和VPS"><a href="#VPN和VPS" class="headerlink" title="VPN和VPS"></a>VPN和VPS</h1><h2 id="VPN"><a href="#VPN" class="headerlink" title="VPN"></a>VPN</h2><p><code>(Virtual Private Network|虚拟私人网络)</code><br>隧道协议包括<br><code>PPTP(Point to Point Protocol Tunnel Protocol)</code><br><code>L2TP(Layer 2 Tunnel Protocol)</code><br><code>OpenVPN</code><br>PPTP协议要比L2TP协议要安全</p><h2 id="VPS"><a href="#VPS" class="headerlink" title="VPS"></a>VPS</h2><p><code>(Virtual Private Server|虚拟专用服务器)</code><br>我的理解是分好多个主机进行虚拟模拟</p><h1 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h1><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>这是github上部署的一个开源项目，原作者<a href="https://github.com/Clowwindy" target="_blank" rel="noopener">Clowwindy</a>,原项目主页<a href="https://github.com/shadowsocks/shadowsocks" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks</a>。该项目原作者已经放弃更新，并从github主页删除。但是依旧有很多fork版本和其他人进行更新。</p><h2 id="关于Shadowsocks产生前"><a href="#关于Shadowsocks产生前" class="headerlink" title="关于Shadowsocks产生前"></a>关于Shadowsocks产生前</h2><p><a href="http://vc2tea.com/whats-shadowsocks/" target="_blank" rel="noopener">原文：写给非专业人士看的 Shadowsocks 简介</a></p><h2 id="原理及协议"><a href="#原理及协议" class="headerlink" title="原理及协议"></a>原理及协议</h2><p>从翻译名都能看出来，Shadowsocks用的是服务器交互，Socket5协议。运用VPS达到翻墙。并不太安全，只能传送http协议报文信息。（VPN是全部传输）</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>目前也有很多“互联网人才”看到了商机，通过销售流量方式赚了好大一笔。对于日常查阅资料，可以简单安装一个Shadowsocks软件，各大论坛转个遍，就能发现很多免费的节点账号。要是想开游戏，老实说，还是乖乖买个VPN算了，安全实在，注意下不同软件的隧道协议是不一样的。</p><h1 id="VPN推荐"><a href="#VPN推荐" class="headerlink" title="VPN推荐"></a>VPN推荐</h1><p>这不是广告<br><a href="https://www.goldenfrog.biz/vyprvpn" target="_blank" rel="noopener">VyprVpn</a><br><a href="https://www.express-vpn.store/" target="_blank" rel="noopener">ExpressVpn</a><br><a href="https://www.purevpn.com/" target="_blank" rel="noopener">purevpn</a><br>下面俩要翻墙<br><a href="https://www.hidemyass.com/" target="_blank" rel="noopener">hidemyass</a><br><a href="https://strongvpn.com/" target="_blank" rel="noopener">strongvpn</a></p>]]></content>
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shadowsocks </tag>
            
            <tag> VPN </tag>
            
            <tag> VPS </tag>
            
            <tag> 翻墙 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>二进制四进制八进制十六进制之间转换关系及浅谈文字在计算机中表示</title>
      <link href="/2016/06/19/2016-06-19-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9B%9B%E8%BF%9B%E5%88%B6%E5%85%AB%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB%E5%8F%8A%E6%B5%85%E8%B0%88%E6%96%87%E5%AD%97%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E8%A1%A8%E7%A4%BA/"/>
      <url>/2016/06/19/2016-06-19-%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%9B%9B%E8%BF%9B%E5%88%B6%E5%85%AB%E8%BF%9B%E5%88%B6%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB%E5%8F%8A%E6%B5%85%E8%B0%88%E6%96%87%E5%AD%97%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E8%A1%A8%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h2 id="计数制："><a href="#计数制：" class="headerlink" title="计数制："></a>计数制：</h2><p>是指用一组固定的符号和统一的规则来计数的方法。按进位的方式计数的数制，成为进位计数制，简称进位制。</p><a id="more"></a><h2 id="不同进制的特性："><a href="#不同进制的特性：" class="headerlink" title="不同进制的特性："></a>不同进制的特性：</h2><ul><li><p>1.R进制，数码符号都从0到R-1。</p></li><li><p>2.同一数码，放在不同位置，含义不同。</p></li><li><p>3.逢R进1。</p></li></ul><p>不同进制两个基本概念：基数和权。</p><h2 id="基数：同数码。"><a href="#基数：同数码。" class="headerlink" title="基数：同数码。"></a>基数：同数码。</h2><h2 id="权：数码数值-该数码-与数位有关的常数，这个常数叫“位权”，简称“权”。"><a href="#权：数码数值-该数码-与数位有关的常数，这个常数叫“位权”，简称“权”。" class="headerlink" title="权：数码数值=该数码*与数位有关的常数，这个常数叫“位权”，简称“权”。"></a>权：数码数值=该数码*与数位有关的常数，这个常数叫“位权”，简称“权”。</h2><p>  例：十进制数1234。数码1的权=10^3；数码2的权=10^2；数码3的权=10^1；数码4的权=10^0。</p><p>任何一个进位计数制的数都可以表示成“按位加权求和”的多项式形式。</p><p>常用进制间的对应关系表</p><h2 id="十进制数-二进制数-八进制数-十六进制数"><a href="#十进制数-二进制数-八进制数-十六进制数" class="headerlink" title="十进制数 二进制数 八进制数 十六进制数"></a>十进制数 二进制数 八进制数 十六进制数</h2><p>​    0 00 0</p><p>​    1 11 1</p><p>​    2 10   2   2</p><p>​    3   11 3 3</p><p>​    4 1004 4</p><p>​    5 1015   5</p><p>​    6 110   6 6</p><p>​    7   111        7             7</p><p>​    8 100010           8</p><p>​    9 1001 11             9</p><p>   10  1010        12A</p><p>   11 1011 13 B</p><p>   12 1100 14         C</p><p>   13 1101 15         D</p><p>   14 1110 16 E</p><p>   15 1111 17          F</p><h2 id="不同进制（二、八、十、十六）转换"><a href="#不同进制（二、八、十、十六）转换" class="headerlink" title="不同进制（二、八、十、十六）转换"></a>不同进制（二、八、十、十六）转换</h2><ul><li>基本思想：借十转换、小数点为中心、大向小1变多、小变大多变1</li></ul><h3 id="十to二、八、十六"><a href="#十to二、八、十六" class="headerlink" title="十to二、八、十六"></a>十to二、八、十六</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><p>方法一：10除以2/4/8/16取余</p><p>十to二快算：13=1+0+4+8=（1011）2</p><h4 id="小数"><a href="#小数" class="headerlink" title="小数"></a>小数</h4><p>小数部分连续乘以2/4/8/16直到结果无小数，取每次结果的整数部分从签到后组成小数点后的数码。</p><p>例：将十进制数0.625分别转换为二进制，八进制和十六进制</p><p>二进制：0.625<em>2=1.2501.250</em>2=0.5000.5*2=1.0000.101</p><p>八进制：0.625*8=5.0000.5</p><p>十六进制：0.625*16=10.0000.A</p><h3 id="二、八、十六to十"><a href="#二、八、十六to十" class="headerlink" title="二、八、十六to十"></a>二、八、十六to十</h3><p>-规则：按位权表示法展开求和</p><p>例：将（100011.01101）2、（675.351）8、（AE.8F）16 转化为十进制数</p><p>（100011.01101）2=1<em>2^5+0</em>2^4+0<em>2^3+0</em>2^2+1<em>2^1+1</em>2^0+0<em>2^-1+1</em>2^-2+1<em>2^-3+0</em>2^-4+1*2^-5=35</p><p>（675.351）8=6<em>8^2+7</em>8^1+5<em>8^0+3</em>8^-1+5<em>8^-2+1</em>8^-3=445</p><p>（AE.8F）16=10<em>16^1+14</em>16^0+8<em>16^-1+15</em>16^-2=174</p><h3 id="二to八"><a href="#二to八" class="headerlink" title="二to八"></a>二to八</h3><p>因为2^3=8，所以二进制中，三个连续数码可以化为一个八进制数码。</p><p>方法：以小数点为基准点想两边三个数码为一组划分（不够补0），然后将每组化为8进制下数码（先化为十进制然后对应进制对应关系表转化为8进制）。</p><p>例：将二进制数（1001110.10101）转化为八进制数。</p><p>分组 001 001 110.101 010</p><p>​    1     1      6  .   5     2</p><p>116.52</p><h3 id="二to十六"><a href="#二to十六" class="headerlink" title="二to十六"></a>二to十六</h3><p>因为2^4=8，所以二进制中，四个连续数码可以化为一个十六进制数码。</p><p>方法：以小数点为基准点想两边四个数码为一组划分（不够补0），然后将每组化为16进制下数码（先化为十进制然后对应进制对应关系表转化为16进制）。</p><p>例：将二进制数（1001110.10101）转化为十六进制数。</p><p>分组 0100 1110 . 1010 1000</p><p>​     4 E   .    A         8</p><p>4E.A8</p><p>5.八to二</p><p>方法：将每位八进制数用3位二进制数替换，按原有顺序排列，去掉两端多余0。</p><p>例：将八进制数（116.52）8转换为二进制数</p><p>116.52</p><p>001 001 110 .101 010</p><p>（116.52）8=（1001110.10101）2</p><h3 id="十六to二"><a href="#十六to二" class="headerlink" title="十六to二"></a>十六to二</h3><p>方法：将每位十六进制数用4位二进制数替换，按原有顺序排列，去掉两端多余0。</p><p>例：将十六进制数（4E.A8）16转换为二进制数</p><p>4E.A8</p><p>0100 1110 . 1010 1000</p><p>(4E.A8)16=(1001110.10101)2</p><h2 id="二进制数的运算"><a href="#二进制数的运算" class="headerlink" title="二进制数的运算"></a>二进制数的运算</h2><h3 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h3><h4 id="加法运算规则"><a href="#加法运算规则" class="headerlink" title="加法运算规则"></a>加法运算规则</h4><p>0+0=0</p><p>0+1=1+0=1</p><p>1+1=10（向高位进位）</p><h4 id="减法运算规则"><a href="#减法运算规则" class="headerlink" title="减法运算规则"></a>减法运算规则</h4><p>0-0=1-1=0</p><p>1-0=1</p><p>0-1=1（向高位错位）</p><h4 id="乘法运算规则"><a href="#乘法运算规则" class="headerlink" title="乘法运算规则"></a>乘法运算规则</h4><p>0*0=0</p><p>0<em>1=1</em>0=0</p><p>1*1=1</p><h4 id="除法运算规则"><a href="#除法运算规则" class="headerlink" title="除法运算规则"></a>除法运算规则</h4><p>0/1=0（1/0无意义）</p><p>1/1=1</p><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><h4 id="或运算规则-∨"><a href="#或运算规则-∨" class="headerlink" title="或运算规则   ∨"></a>或运算规则   ∨</h4><p>有1必1</p><h4 id="与运算规则-∧"><a href="#与运算规则-∧" class="headerlink" title="与运算规则    ∧"></a>与运算规则    ∧</h4><p>有0必有0</p><h4 id="非运算规则"><a href="#非运算规则" class="headerlink" title="非运算规则"></a>非运算规则</h4><p>0=1</p><p>1=0</p><h4 id="异或-⊕"><a href="#异或-⊕" class="headerlink" title="异或    ⊕"></a>异或    ⊕</h4><p>同为0</p><p>异为1</p><p>文字在计算机中表示方法</p><p>位（bit）存储最小单位  0或1</p><p>字节（Byte）基本单位   8个bit构成1个字节（1B=8bits）</p><p>1KB=2^10B=1024B</p><p>1MB=2^20B=1024KB</p><p>1GB=2^30B=1024MB</p><p>1TB=2^40B=1024GB</p><p>bit&lt;Bety&lt;KB&lt;MB&lt;GB&lt;TB&lt;PB&lt;EB&lt;ZB&lt;YB&lt;DB&lt;NB</p><h2 id="英文字母的表示"><a href="#英文字母的表示" class="headerlink" title="英文字母的表示"></a>英文字母的表示</h2><p>ASCII 7位二进制表示每个字符，128（2^7）个</p><p>扩展ASCII 8位二进制表示每个字符，（2^8）</p><p>EBCDID </p><p>Unicode 16位二进制表示每个字符  (2^16)  支持多语言</p><h2 id="中文汉字表示"><a href="#中文汉字表示" class="headerlink" title="中文汉字表示"></a>中文汉字表示</h2><p>1980《信息交换用汉字编码字符集——基本集》，国标GB2312-80</p><p>16字节为一个汉字，每个字节只用低7位  128<em>128，但ASCII中控制代码，不作为汉字代码（128-34=94）</em>（128-34=94）=8836个，7445个汉字和图形符号；</p><p>由94个区和94个位。区号和位号构成区位码。</p><p>区位码→国标码</p><p>例：“德”区位码2134</p><p>高位字节=（21）（十进制）+20H(16 进制)=15H+20H=35H（H 标记表示）</p><p>地位字节=（34）（十进制）+20H(16进制)=22H+20H=42H</p><p>“德”国标码：3542H</p><p>国标码→j机内码（国标中每个字节最高改为1）</p><p>例：接上</p><p>（3542）H=（0011 0101 0100 0010）B</p><p>机内码：</p><p>（1011 0101 1100 0010）B=（B5C2）H</p>]]></content>
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
