<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HibisciDai</title>
  
  <subtitle>Waiting/Patience/Trusting/Times All Takes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hibiscidai.com/"/>
  <updated>2018-07-06T08:23:43.256Z</updated>
  <id>http://hibiscidai.com/</id>
  
  <author>
    <name>HibisciDai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>text-RSS</title>
    <link href="http://hibiscidai.com/2018/07/06/text-RSS/"/>
    <id>http://hibiscidai.com/2018/07/06/text-RSS/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2018-07-06T08:23:43.256Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/06/text-RSS/博客RSS订阅.png" alt="博客RSS订阅"></p><p>博客RSS订阅，使用插件 <code>hexo-generator-feed</code></p><a id="more"></a><h1 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h1><h2 id="本地仓库支持"><a href="#本地仓库支持" class="headerlink" title="本地仓库支持"></a>本地仓库支持</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><h3 id="添加根目录配置"><a href="#添加根目录配置" class="headerlink" title="添加根目录配置"></a>添加根目录配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: http://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">RSS订阅</span></span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line"><span class="meta">#</span><span class="bash">Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure><h3 id="更新主题配置"><a href="#更新主题配置" class="headerlink" title="更新主题配置"></a>更新主题配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h2 id="订阅RSS"><a href="#订阅RSS" class="headerlink" title="订阅RSS"></a>订阅RSS</h2><h3 id="Chrome-RSS-插件"><a href="#Chrome-RSS-插件" class="headerlink" title="Chrome RSS 插件"></a>Chrome RSS 插件</h3><p>Chrome浏览器下载RSS插件</p><h3 id="自定义格式扩展"><a href="#自定义格式扩展" class="headerlink" title="自定义格式扩展"></a>自定义格式扩展</h3><p>添加插件后，由于插件本身只提供几个官方的订阅，所以你需要做一个Feedly格式的扩展</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.feedly.com/home#subscription/feed/%s</span><br></pre></td></tr></table></figure><blockquote><p>只有当该网页有Google检测得到的RSS源时，网址栏上才会出现按钮</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/u011303443/article/details/52333695" target="_blank" rel="noopener">hexo博客安装RSS插件</a></p><p><a href="https://blog.csdn.net/u014491743/article/details/51284102" target="_blank" rel="noopener">一分钟教你用Chrome的RSS来订阅博客</a></p>]]></content>
    
    <summary type="html">
    
      text-RSS
    
    </summary>
    
      <category term="前端" scheme="http://hibiscidai.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="测试" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="hexo" scheme="http://hibiscidai.com/tags/hexo/"/>
    
      <category term="博客搭建过程" scheme="http://hibiscidai.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SwiftPlaygrounds初识及九宫格最优策略</title>
    <link href="http://hibiscidai.com/2018/07/04/2018-07-04-Playgrounds%E6%8E%A5%E8%A7%A6%E5%8F%8A%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%9C%80%E4%BC%98%E7%AD%96%E7%95%A5/"/>
    <id>http://hibiscidai.com/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/</id>
    <published>2018-07-03T16:00:00.000Z</published>
    <updated>2018-07-04T04:45:40.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/SwiftPlaygrounds初识及九宫格最优策略.png" alt="SwiftPlaygrounds初识及九宫格最优策略"></p><p>SwiftPlaygrounds初识及九宫格最优策略</p><p>官方介绍：<a href="https://www.apple.com/swift/playgrounds/" target="_blank" rel="noopener">Swift Playgrounds</a></p><a id="more"></a><p>[TOC]</p><h1 id="SwiftPlaygrounds初识及九宫格最优策略"><a href="#SwiftPlaygrounds初识及九宫格最优策略" class="headerlink" title="SwiftPlaygrounds初识及九宫格最优策略"></a>SwiftPlaygrounds初识及九宫格最优策略</h1><h1 id="SwiftPlaygrounds初识"><a href="#SwiftPlaygrounds初识" class="headerlink" title="SwiftPlaygrounds初识"></a>SwiftPlaygrounds初识</h1><p><code>Playgrounds</code> 是App Store 内一款开放性的编程学习类应用程序。</p><p>包含一整套Apple设计的课程，友好的界面操控。</p><p>简单说下我的见解</p><ul><li>卡通风格，增加学习兴趣。</li><li>对于编程语言基础语法，例如，循环、函数、遍历、数组等类比引导式学习方式易于接受，适合0基础。</li><li>输入方式改变，易于操作。在IPAD上不需要键盘可以进行简单编程。通过触控操作及快捷代码提示进行编程。效率甚至比键盘还要高。</li></ul><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo1.jpg" alt="demo1"></p><h1 id="九宫格最优策略"><a href="#九宫格最优策略" class="headerlink" title="九宫格最优策略"></a>九宫格最优策略</h1><p>对于一个九宫格在中心位置如何使用循环方法走过周围格子并回到原点</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>不使用循环：</p><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo4.jpg" alt="demo4"></p><p>使用循环：</p><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo3.jpg" alt="demo3"></p><h2 id="策略分析"><a href="#策略分析" class="headerlink" title="策略分析"></a>策略分析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">func <span class="title">checkTile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> isOnCloseSwitch &#123;</span><br><span class="line">        toggleSwwitch()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> isOnGem &#123;</span><br><span class="line">        collectGem()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="number">1</span> .. <span class="number">4</span> &#123;</span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">    turnLeft()</span><br><span class="line">    </span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">    turnLeft()</span><br><span class="line">    </span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">    turnLeft()</span><br><span class="line">    </span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只考虑移动和转向分别为一个时间复杂度</p><table><thead><tr><th></th><th>移动时间</th><th>转向时间</th></tr></thead><tbody><tr><td>使用循环</td><td>16</td><td>12</td></tr><tr><td>不使用循环</td><td>10</td><td>6</td></tr></tbody></table><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>快速演示：</p><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo2.gif" alt="demo2"></p><p>单步骤视频演示：</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo2.mp4"},"danmaku":{"id":"someid","api":"https://api.prprpr.me/dplayer/","addition":["/some.json"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);player.on("loadstart",function(){console.log("loadstart")})})()</script> ]]></content>
    
    <summary type="html">
    
      SwiftPlaygrounds初识及九宫格最优策略
    
    </summary>
    
      <category term="课外扩展" scheme="http://hibiscidai.com/categories/%E8%AF%BE%E5%A4%96%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="算法" scheme="http://hibiscidai.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AppleDeveloper" scheme="http://hibiscidai.com/tags/AppleDeveloper/"/>
    
      <category term="SwiftPlaygrounds" scheme="http://hibiscidai.com/tags/SwiftPlaygrounds/"/>
    
  </entry>
  
  <entry>
    <title>text-media</title>
    <link href="http://hibiscidai.com/2018/07/04/text-media/"/>
    <id>http://hibiscidai.com/2018/07/04/text-media/</id>
    <published>2018-07-03T16:00:00.000Z</published>
    <updated>2018-07-04T04:57:14.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/04/text-media/博客音频视频问题.png" alt="博客音频视频问题"></p><p>博客框架音频视频管理难题，使用插件 <code>MoePlayer/hexo-tag-dplayer</code> 及 <code>MoePlayer/hexo-tag-aplayer</code></p><a id="more"></a><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">MoePlayer/hexo-tag-dplayer</a></p><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">MoePlayer/hexo-tag-aplayer</a></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;http://7xq131.com1.z0.glb.clouddn.com/Preparation.mp3&quot; &quot;autoplay&quot; %&#125;</span><br></pre></td></tr></table></figure><p>如下：</p>        <div id="aplayer-rdWTusBO" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-rdWTusBO"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "Caffeine",              author: "Jeff Williams",              url: "http://7xq131.com1.z0.glb.clouddn.com/Preparation.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><p>点击分享网易云音乐，生成链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://music.163.com/song/xxx?userid=xxx</span><br></pre></td></tr></table></figure><p>可以获取歌曲号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">frameborder=&quot;no&quot;</span><br><span class="line">border=&quot;0&quot;</span><br><span class="line">marginwidth=&quot;0&quot;</span><br><span class="line">marginheight=&quot;0&quot;</span><br><span class="line">width=330</span><br><span class="line">height=86</span><br><span class="line">src=&quot;//music.163.com/outchain/player?type=2&amp;id=xxx&amp;auto=1&amp;height=66&quot;</span><br><span class="line">&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>更改id</p><p>如下：</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=590883&auto=1&height=66"></iframe><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=http://player.youku.com/player.php/sid/XMjc0MzExOTM2/v.swf&quot;</span><br><span class="line">&quot;api=http://dplayer.daoapp.io&quot;</span><br><span class="line">&quot;pic=http://vthumb.ykimg.com/05420408526754C26A0A487F140EE9DE&quot;</span><br><span class="line">&quot;id=9E2E3368B56CDBB4&quot;</span><br><span class="line">&quot;loop=yes&quot;</span><br><span class="line">&quot;theme=#FADFA3&quot;</span><br><span class="line">&quot;autoplay=false&quot;</span><br><span class="line">&quot;token=tokendemo&quot; </span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% dplayer</span><br><span class="line">&quot;url=some.mp4&quot;</span><br><span class="line">&quot;id=someid&quot;</span><br><span class="line">&quot;api=博客音频视频问题.png&quot;</span><br><span class="line">&quot;addition=/some.json&quot;</span><br><span class="line">&apos;code=player.on(&quot;loadstart&quot;,function()&#123;console.log(&quot;loadstart&quot;)&#125;)&apos;</span><br><span class="line">&quot;autoplay&quot; %&#125;</span><br></pre></td></tr></table></figure><p>如下：<br><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","loop":true,"video":{"url":"/2018/07/04/text-media/demo2.mp4","pic":"博客音频视频问题.png"},"danmaku":{"id":"9E2E3368B56CDBB4","api":"http://dplayer.daoapp.io","token":"tokendemo"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></p><h2 id="优酷"><a href="#优酷" class="headerlink" title="优酷"></a>优酷</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&apos;http://player.youku.com/player.php/sid/XMjc0MzExOTM2/v.swf&apos; </span><br><span class="line">allowFullScreen=&apos;true&apos;</span><br><span class="line">quality=&apos;high&apos;</span><br><span class="line">width=&apos;480&apos;</span><br><span class="line">height=&apos;400&apos;</span><br><span class="line">align=&apos;middle&apos;</span><br><span class="line">allowScriptAccess=&apos;always&apos;</span><br><span class="line">type=&apos;application/x-shockwave-flash&apos;&gt;</span><br><span class="line">&lt;/embed&gt;</span><br></pre></td></tr></table></figure><p>如下：</p><embed src="http://player.youku.com/player.php/sid/XMjc0MzExOTM2/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"><br>]]></content>
    
    <summary type="html">
    
      测试hexo插入picture的标签
    
    </summary>
    
      <category term="前端" scheme="http://hibiscidai.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="测试" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="hexo" scheme="http://hibiscidai.com/tags/hexo/"/>
    
      <category term="博客搭建过程" scheme="http://hibiscidai.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式小结</title>
    <link href="http://hibiscidai.com/2018/07/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B0%8F%E7%BB%93/"/>
    <id>http://hibiscidai.com/2018/07/03/设计模式小结/</id>
    <published>2018-07-02T16:00:00.000Z</published>
    <updated>2018-07-03T06:30:32.233Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/03/设计模式小结/设计模式小结.png" alt="设计模式小结"></p><p>设计模式小结</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式小结"><a href="#设计模式小结" class="headerlink" title="设计模式小结"></a>设计模式小结</h1><h2 id="设计模式之间关系"><a href="#设计模式之间关系" class="headerlink" title="设计模式之间关系"></a>设计模式之间关系</h2><p><img src="/2018/07/03/设计模式小结/设计模式之间关系-1.png" alt="设计模式之间关系-1"></p><p><img src="/2018/07/03/设计模式小结/设计模式之间关系-2.jpg" alt="设计模式之间关系-2"></p><h2 id="类之间主要关系图"><a href="#类之间主要关系图" class="headerlink" title="类之间主要关系图"></a>类之间主要关系图</h2><p><img src="/2018/07/03/设计模式小结/主要类关系.png" alt="主要类关系"></p><h2 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h2><ul><li>单一职责原则（Single Responsibility Principle）<br>一个类只有一个职责。</li><li>开闭原则（Open Close Principle）<br>对扩展开放对更改封闭。</li><li>里氏代换原则（Liskov Substitution Principle）<br>子类替换掉父类,后程序正常运行且结果跟预测相同才能允许继。</li><li>依赖倒转原则（Dependence Inversion Principle）<br>针对接口编程，不针对实现编；高层不依赖底层，依赖抽象。</li><li>接口隔离原则（Interface Segregation Principle）<br>客户端不应该依赖它不需要的方法，类间的依赖关系应建立在最小的接口上。</li><li>合成/聚合复用原则（Composite Reuse Principle）<br>构造函数中出现其他类/类使用调用其他类。</li><li>迪米特原则（Demeter Principle）<br>不要和陌生人说话，最少知识原则。</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><blockquote><p>创建对象的同时隐藏创建逻辑的方式，不使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p></blockquote><ul><li>单例模式（Singleton Pattern）<br>一个类仅有一个实例，并提供一个访问它的全局访问点。</li><li>工厂模式（Factory Pattern）<br>定义一个用于创建对象的接口，让子类决定实例化哪个类，一个类的创建延迟到其子类，这个类叫工厂。</li><li>抽象工厂模式（Abstract Factory Pattern）<br>提供一个创建一系列相关或者相关依赖对象的接口，而不需指定他们具体的类。</li><li>建造者模式（Builder Pattern）<br>将一个复杂对象的创建与表示分离，使得同样的创建过程可用不同的表示。</li><li>原型模式（Prototype Pattern）<br>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</li></ul><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><blockquote><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p></blockquote><ul><li>适配器模式（Adapter Pattern）<br>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li>桥接模式（Bridge Pattern）<br>把抽象化与实现化解耦，提供两者之间的桥接结构，使二者可以独立变化。</li><li>组合模式（Composite Pattern）<br>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</li><li>装饰器模式（Decorator Pattern）<br>动态地给一个对象添加一些额外的职责。就增加功能来说装饰器模式相比生成子类更为灵活。</li><li>外观模式（Facade Pattern）<br>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li><li>享元模式（Flyweight Pattern）<br>运用共享技术有效地支持大量细粒度的对象。</li><li>代理模式（Proxy Pattern）<br>为其他独享提供一种代理以控制对这个对象的访问。</li></ul><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><blockquote><p>特别关注对象之间的通信</p></blockquote><ul><li>职责链模式（Chain of Responsibility Pattern）<br>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理它位置。</li><li>命令模式（Command Pattern）<br>将一个请求封装为一个对象，从而使你可用不用的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</li><li>解释器模式（Interpreter Pattern）<br>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</li><li>中介者模式（Mediator Pattern）<br>用一个对象来封装一系列的对象交互，中介者使各对象直间不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</li><li>备忘录模式（Memento Pattern）<br>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</li><li>观察者模式（Observer Pattern）<br>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。</li><li>状态模式（State Pattern）<br>允许对象在内部状态发生改变时改变它的行为，对象看起来好像是修改了它的子类。</li><li>策略模式（Strategy Pattern）<br>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</li><li>模板模式（Template Pattern）<br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li>迭代器模式（Iterator Pattern）<br>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</li><li>空对象模式（Null Object Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><h2 id="J2EE模式"><a href="#J2EE模式" class="headerlink" title="J2EE模式"></a>J2EE模式</h2><ul><li>MVC 模式（MVC Pattern）</li><li>业务代表模式（Business Delegate Pattern）</li><li>组合实体模式（Composite Entity Pattern）</li><li>数据访问对象模式（Data Access Object Pattern）</li><li>前端控制器模式（Front Controller Pattern）</li><li>拦截过滤器模式（Intercepting Filter Pattern）</li><li>服务定位器模式（Service Locator Pattern）</li><li>传输对象模式（Transfer Object Pattern）</li></ul>]]></content>
    
    <summary type="html">
    
      设计模式小结
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-23-迭代器模式</title>
    <link href="http://hibiscidai.com/2018/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-23-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://hibiscidai.com/2018/06/13/设计模式-23-迭代器/</id>
    <published>2018-06-12T16:00:00.000Z</published>
    <updated>2018-07-02T15:34:32.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/06/13/设计模式-23-迭代器/设计模式23.png" alt="设计模式23"></p><p>设计模式-23-迭代器模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-23-迭代器模式"><a href="#设计模式-23-迭代器模式" class="headerlink" title="设计模式-23-迭代器模式"></a>设计模式-23-迭代器模式</h1><h1 id="迭代器模式-Iterator-Pattern"><a href="#迭代器模式-Iterator-Pattern" class="headerlink" title="迭代器模式(Iterator Pattern)"></a>迭代器模式(Iterator Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>不同的方式来遍历整个整合对象。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>遍历一个聚合对象。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>定义接口：hasNext, next。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>把在元素之间游走的责任交给迭代器，而不是聚合对象。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>JAVA 中的 iterator。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>它支持以不同的方式遍历一个聚合对象。</li><li>迭代器简化了聚合类。</li><li>在同一个聚合上可以有多个遍历。</li><li>在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>需要为聚合对象提供多种遍历方式。</li><li>为遍历不同的聚合结构提供一个统一的接口。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>模拟数组迭代</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/06/13/设计模式-23-迭代器/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern23.iterator.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameRepository</span> <span class="keyword">implements</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String names[] = &#123; <span class="string">"Robert"</span>, <span class="string">"John"</span>, <span class="string">"Jalie"</span>, <span class="string">"Lora"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NameIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NameIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; names.length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line"><span class="keyword">return</span> names[index++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">NameRepository nr = <span class="keyword">new</span> NameRepository();</span><br><span class="line"><span class="keyword">for</span> (Iterator it = nr.getIterator(); it.hasNext();) &#123;</span><br><span class="line">String name = (String) it.next();</span><br><span class="line">System.out.println(<span class="string">"name : "</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name : Robert</span><br><span class="line">name : John</span><br><span class="line">name : Jalie</span><br><span class="line">name : Lora</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-23-迭代器模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-22-模板方法</title>
    <link href="http://hibiscidai.com/2018/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-22-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    <id>http://hibiscidai.com/2018/06/11/设计模式-22-模板方法/</id>
    <published>2018-06-10T16:00:00.000Z</published>
    <updated>2018-07-02T15:17:53.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/06/11/设计模式-22-模板方法/设计模式22.png" alt="设计模式22"></p><p>设计模式-22-模板方法</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-22-模板方法"><a href="#设计模式-22-模板方法" class="headerlink" title="设计模式-22-模板方法"></a>设计模式-22-模板方法</h1><h1 id="模板方法-Template-Method"><a href="#模板方法-Template-Method" class="headerlink" title="模板方法(Template Method)"></a>模板方法(Template Method)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>一些方法通用，却在每一个子类都重新写了这一方法。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>有一些通用的方法。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在抽象类实现，其他步骤在子类实现。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将这些通用算法抽象出来。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。</li><li>西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。</li><li>spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>封装不变部分，扩展可变部分。</li><li>提取公共代码，便于维护。</li><li>行为由父类控制，子类实现。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>有多个子类共有的方法，且逻辑相同。</li><li>重要的、复杂的方法，可以考虑作为模板方法。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>一般模板方法都加上 final 关键词。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>旅行有选择走路的方式和路上吃什么干粮有很多选择。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern22.template.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏</span></span><br><span class="line">initialize();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始游戏</span></span><br><span class="line">startPlay();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束游戏</span></span><br><span class="line">endPlay();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cricket</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cricket Game Finished!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cricket Game Initialized! Start playing."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cricket Game Started. Enjoy the game!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Football Game Finished!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Football Game Initialized! Start playing."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Football Game Started. Enjoy the game!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Game game = <span class="keyword">new</span> Cricket();</span><br><span class="line">game.play();</span><br><span class="line">System.out.println();</span><br><span class="line">game = <span class="keyword">new</span> Football();</span><br><span class="line">game.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cricket Game Initialized! Start playing.</span><br><span class="line">Cricket Game Started. Enjoy the game!</span><br><span class="line">Cricket Game Finished!</span><br><span class="line"></span><br><span class="line">Football Game Initialized! Start playing.</span><br><span class="line">Football Game Started. Enjoy the game!</span><br><span class="line">Football Game Finished!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-22-模板方法
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-21-策略模式</title>
    <link href="http://hibiscidai.com/2018/06/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-21-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/06/06/设计模式-21-策略模式/</id>
    <published>2018-06-05T16:00:00.000Z</published>
    <updated>2018-07-02T15:05:52.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/06/06/设计模式-21-策略模式/设计模式21.png" alt="设计模式21"></p><p>设计模式-21-策略模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-21-策略模式"><a href="#设计模式-21-策略模式" class="headerlink" title="设计模式-21-策略模式"></a>设计模式-21-策略模式</h1><h1 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式(Strategy Pattern)"></a>策略模式(Strategy Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p><blockquote><p>define a finallu or a lgorithed,encapsulate each owe,and make them interchangeable,strategy lets the algorithm vary independently from cilents that use it.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>实现同一个接口。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将这些算法封装成一个一个的类，任意地替换。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>诸葛亮的锦囊妙计，每一个锦囊就是一个策略。</li><li>旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。</li><li>JAVA AWT 中的 LayoutManager。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>算法可以自由切换。</li><li>避免使用多重条件判断。</li><li>扩展性良好。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>策略类会增多。</li><li>所有策略类都需要对外暴露。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li><li>一个系统需要动态地在几种算法中选择一种。</li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>旅行有选择走路的方式和路上吃什么干粮有很多选择。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/06/06/设计模式-21-策略模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern21.strategy.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Train</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一张火车票"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃的火车餐"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirPlan</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一张飞机票"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃的飞机餐"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一辆单车"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自备食餐"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Travel</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ITravelStrategy st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSt</span><span class="params">(ITravelStrategy st)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.st = st;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">st.buyTicket();</span><br><span class="line">st.otherOper();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Travel t = <span class="keyword">new</span> Travel();</span><br><span class="line">t.setSt(<span class="keyword">new</span> AirPlan());</span><br><span class="line">t.go();</span><br><span class="line">t.setSt(<span class="keyword">new</span> Train());</span><br><span class="line">t.go();</span><br><span class="line">t.setSt(<span class="keyword">new</span> Bicycle());</span><br><span class="line">t.go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一张飞机票</span><br><span class="line">吃的飞机餐</span><br><span class="line">一张火车票</span><br><span class="line">吃的火车餐</span><br><span class="line">一辆单车</span><br><span class="line">自备食餐</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-21-策略模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-20-状态模式</title>
    <link href="http://hibiscidai.com/2018/05/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-20-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/30/设计模式-20-状态模式/</id>
    <published>2018-05-29T16:00:00.000Z</published>
    <updated>2018-07-02T14:42:19.719Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/30/设计模式-20-状态模式/设计模式20.png" alt="设计模式20"></p><p>设计模式-20-状态模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-20-状态模式"><a href="#设计模式-20-状态模式" class="headerlink" title="设计模式-20-状态模式"></a>设计模式-20-状态模式</h1><h1 id="状态模式-State-Pattern"><a href="#状态模式-State-Pattern" class="headerlink" title="状态模式(State Pattern)"></a>状态模式(State Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>允许对象在内部状态发生改变时改变它的行为，对象看起来好像是修改了它的子类。</p><blockquote><p>allow an object to alter its behavior when its internal state changes</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>代码中包含大量与对象状态有关的条件语句。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将各种具体的状态类抽象出来。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>打篮球的时候运动员可以有正常状态、不正常状态和超常状态。</li><li>曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>封装了转换规则。 </li><li>枚举可能的状态，在枚举状态之前需要确定状态种类。 </li><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 </li><li>状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>行为随状态改变而改变的场景。 </li><li>条件、分支语句的代替者。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/30/设计模式-20-状态模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern20.state.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlowDown</span> <span class="keyword">extends</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"减速"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeedUp</span> <span class="keyword">extends</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加速"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenSpeed</span> <span class="keyword">extends</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"匀速"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoMaticDrive</span> </span>&#123;</span><br><span class="line">SlowDown sd = <span class="keyword">new</span> SlowDown();</span><br><span class="line">EvenSpeed es = <span class="keyword">new</span> EvenSpeed();</span><br><span class="line">SpeedUp su = <span class="keyword">new</span> SpeedUp();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roodBlackTrue</span><span class="params">(RunState rs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rs.getClass() == SlowDown.class) &#123;</span><br><span class="line">sd.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == EvenSpeed.class) &#123;</span><br><span class="line">es.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == SpeedUp.class) &#123;</span><br><span class="line">su.handle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roodBlackFalse</span><span class="params">(RunState rs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rs.getClass() == SlowDown.class) &#123;</span><br><span class="line">sd.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == EvenSpeed.class) &#123;</span><br><span class="line">es.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == SpeedUp.class) &#123;</span><br><span class="line">su.handle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AutoMaticDrive ad = <span class="keyword">new</span> AutoMaticDrive();</span><br><span class="line">ad.roodBlackTrue(<span class="keyword">new</span> SpeedUp());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加速</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-20-状态模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-19-观察者模式</title>
    <link href="http://hibiscidai.com/2018/05/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-19-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/28/设计模式-19-观察者模式/</id>
    <published>2018-05-27T16:00:00.000Z</published>
    <updated>2018-07-02T14:20:18.004Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/28/设计模式-19-观察者模式/设计模式19.png" alt="设计模式19"></p><p>设计模式-19-观察者模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-19-观察者模式"><a href="#设计模式-19-观察者模式" class="headerlink" title="设计模式-19-观察者模式"></a>设计模式-19-观察者模式</h1><h1 id="观察者模式-Observer-Pattern"><a href="#观察者模式-Observer-Pattern" class="headerlink" title="观察者模式(Observer Pattern)"></a>观察者模式(Observer Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。</p><blockquote><p>define one-to-many dependency between objects so that when one objects changes state,all its dependents are notified and updated automatically.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在抽象类里有一个 ArrayList 存放观察者们。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>使用面向对象技术，可以将这种依赖关系弱化。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。</li><li>西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>观察者和被观察者是抽象耦合的。 </li><li>建立一套触发机制。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li><li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。<br>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>JAVA 中已经有了对观察者模式的支持类。</li><li>避免循环引用。</li><li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>教室里老师一来，学生会表现不同反应。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/28/设计模式-19-观察者模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern19.observer.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroodCast</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Chat&gt; chats = <span class="keyword">new</span> ArrayList&lt;Chat&gt;();</span><br><span class="line">String listenState;</span><br><span class="line"></span><br><span class="line">BroodCast() &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"flower"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"stone"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"grosss"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Chat c)</span> </span>&#123;</span><br><span class="line">chats.add(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListenState</span><span class="params">(String listenState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listenState = listenState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BroadCast : "</span> + listenState);</span><br><span class="line"><span class="keyword">for</span> (Chat c : chats) &#123;</span><br><span class="line">c.update();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Chat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="string">"good good study, day day up!"</span>;</span><br><span class="line">System.out.println(name + <span class="string">" : "</span> + state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BroodCast b = <span class="keyword">new</span> BroodCast();</span><br><span class="line">b.setListenState(<span class="string">"the teacher is coming"</span>);</span><br><span class="line">b.notifyed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BroadCast : the teacher is coming</span><br><span class="line">flower : good good study, day day up!</span><br><span class="line">stone : good good study, day day up!</span><br><span class="line">grosss : good good study, day day up!</span><br></pre></td></tr></table></figure><h2 id="案例1-优化"><a href="#案例1-优化" class="headerlink" title="案例1-优化"></a>案例1-优化</h2><p>针对上述例子进行优化，添加高层接口。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/28/设计模式-19-观察者模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern19.observer.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INotifier</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(INoStudier ns)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(INoStudier ns)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INoStudier</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroodCast</span> <span class="keyword">implements</span> <span class="title">INotifier</span> </span>&#123;</span><br><span class="line">ArrayList&lt;INoStudier&gt; nss = <span class="keyword">new</span> ArrayList&lt;INoStudier&gt;();</span><br><span class="line">String listenState;</span><br><span class="line"></span><br><span class="line">BroodCast() &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"flower"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"stone"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"grosss"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListenState</span><span class="params">(String listenState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listenState = listenState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BroadCast : "</span> + listenState);</span><br><span class="line"><span class="keyword">for</span> (INoStudier c : nss) &#123;</span><br><span class="line">c.update();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(INoStudier ns)</span> </span>&#123;</span><br><span class="line">nss.add(ns);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(INoStudier ns)</span> </span>&#123;</span><br><span class="line">nss.remove(ns);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat</span> <span class="keyword">implements</span> <span class="title">INoStudier</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Chat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="string">"good good study, day day up!"</span>;</span><br><span class="line">System.out.println(name + <span class="string">" : "</span> + state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-19-观察者模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-18-备忘录模式</title>
    <link href="http://hibiscidai.com/2018/05/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-18-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/23/设计模式-18-备忘录模式/</id>
    <published>2018-05-22T16:00:00.000Z</published>
    <updated>2018-06-30T03:07:05.038Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/23/设计模式-18-备忘录模式/设计模式18.png" alt="设计模式18"></p><p>设计模式-18-备忘录模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-18-备忘录模式"><a href="#设计模式-18-备忘录模式" class="headerlink" title="设计模式-18-备忘录模式"></a>设计模式-18-备忘录模式</h1><h1 id="备忘录模式-Memento-Pattern"><a href="#备忘录模式-Memento-Pattern" class="headerlink" title="备忘录模式(Memento Pattern)"></a>备忘录模式(Memento Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><blockquote><p>without violating encapsulation,capture an object’s internal state so that the object can be returned to this state later,promote under to full object status.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，类似”后悔药”。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>客户不与备忘录类耦合，与备忘录管理类耦合。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>通过一个备忘录类专门存储对象状态。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>后悔药。</li><li>打游戏时的存档。</li><li>Windows 里的 ctri + z。</li><li>IE 中的后退。 </li><li>数据库的事务管理。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 </li><li>实现了信息的封装，使得用户不需要关心状态的保存细节。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>需要保存/恢复数据的相关状态场景。</li><li>提供一个可回滚的操作。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>为了符合迪米特原则，还要增加一个管理备忘录的类。</li><li>为了节约内存，可使用原型模式+备忘录模式。</li></ul><p>创建备份点，需要时候恢复。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>回到过去：<br>有个男孩，有一天遇到一个女孩，状态特别好，相处中，吵架，冷战……想回到那天与女孩相遇的状态。</p><p>第一次优化：Main方法调用<br>第二次优化：新建备忘录类<br>第三次优化：新建另一个类来管理备忘录</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/23/设计模式-18-备忘录模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern18.memento.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line">String myState;</span><br><span class="line"></span><br><span class="line"><span class="function">Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Memento(myState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">myState = memento.myState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">Memento memento;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CareTaker</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.memento = memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.memento = memento;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">String myState;</span><br><span class="line"></span><br><span class="line">Memento(String myState) &#123;</span><br><span class="line"><span class="keyword">this</span>.myState = myState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Boy boy = <span class="keyword">new</span> Boy(); <span class="comment">// first boy</span></span><br><span class="line">boy.myState = <span class="string">"super!!"</span>;</span><br><span class="line">CareTaker c = <span class="keyword">new</span> CareTaker(boy.createMemento());<span class="comment">// make memories</span></span><br><span class="line">boy.myState = <span class="string">"terrible!!"</span>;</span><br><span class="line">boy.restoreMemento(c.getMemento());</span><br><span class="line">System.out.println(boy.myState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super!!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-18-备忘录模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-17-中介者模式</title>
    <link href="http://hibiscidai.com/2018/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-17-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/21/设计模式-17-中介者模式/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2018-06-30T02:45:08.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/21/设计模式-17-中介者模式/设计模式17.png" alt="设计模式17"></p><p>设计模式-17-中介者模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-17-中介者模式"><a href="#设计模式-17-中介者模式" class="headerlink" title="设计模式-17-中介者模式"></a>设计模式-17-中介者模式</h1><h1 id="中介者模式-Mediator-Pattern"><a href="#中介者模式-Mediator-Pattern" class="headerlink" title="中介者模式(Mediator Pattern)"></a>中介者模式(Mediator Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>用一个对象来封装一系列的对象交互，中介者使各对象直间不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p><blockquote><p>define on  object that encapsulates how a set of objects interact,mediator promotes loose coaping from each other,and it lets you vary their interaction independently.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>多个类相互耦合，形成了网状结构。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>对象 Colleague 之间的通信封装到一个类中单独处理。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将上述网状结构分离为星型结构。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。</li><li>机场调度系统。</li><li>MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低了类的复杂度，将一对多转化成了一对一。</li><li>各个类之间的解耦。 </li><li>符合迪米特原则。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>中介者会庞大，变得复杂难以维护。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 </li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>不应当在职责混乱的时候使用。</p><h2 id="相关模式"><a href="#相关模式" class="headerlink" title="相关模式"></a>相关模式</h2><ul><li>外观模式(Facade)<br>它对一个对象子系统进行抽象，从而提供一个更为方便的接口。协议单向，由Facade对这个子系统类提出请求，反之不行，但该模式提供各类对象不支持或不能支持的写作行为，协议为多向的。</li><li>中介者模式(Mediator)<br>抽象已有类的一些功能，对同事之间的任意通讯进行抽象，通常晋中不属于任何单个对象的功能，知道中介者并与它通信而不是直接与其他同类对象通信。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>Sea : flood -&gt; Sky : fallMoon , LifeForm : transform; 海洋海啸-天空满月-生物灭绝<br>LifeForm : dieOut -&gt; Sea : driedUp , Sky : gray; 生物灭绝-海洋干枯-天空变灰<br>Sky : sunny -&gt; Sea : evaporate , LifeForm : grow; 天空晴-海洋蒸发-生物生长</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/21/设计模式-17-中介者模式/案例1.png" alt="案例1"></p><p>原类图：</p><p><img src="/2018/05/21/设计模式-17-中介者模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern17.mediator.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concreate</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">excute</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">Sky sky = <span class="keyword">new</span> Sky();</span><br><span class="line">Sea sea = <span class="keyword">new</span> Sea();</span><br><span class="line">LifeForm lf = <span class="keyword">new</span> LifeForm();</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"f"</span>: <span class="comment">// 接收到 Sea:flood()</span></span><br><span class="line">sky.fullMood();</span><br><span class="line">lf.transForm();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"s"</span>: <span class="comment">// 接收到Sky:sunny()</span></span><br><span class="line">sea.eraporate();</span><br><span class="line">lf.grow();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"d"</span>: <span class="comment">// 接收到LifeForm:dieOut()</span></span><br><span class="line">sky.gray();</span><br><span class="line">sea.diredup();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line">Mediator m = <span class="keyword">new</span> Concreate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sky</span> <span class="keyword">extends</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sunny</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"晴朗"</span>);</span><br><span class="line">m.excute(<span class="string">"s"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fullMood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"满月"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"灰暗"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sea</span> <span class="keyword">extends</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"涨潮"</span>);</span><br><span class="line">m.excute(<span class="string">"f"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">diredup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"干枯"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eraporate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"蒸发"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeForm</span> <span class="keyword">extends</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"生物变形"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"生物生长"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dieOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"生物灭绝"</span>);</span><br><span class="line">m.excute(<span class="string">"d"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sky s = <span class="keyword">new</span> Sky();</span><br><span class="line">s.sunny();</span><br><span class="line">Sea h = <span class="keyword">new</span> Sea();</span><br><span class="line">h.flood();</span><br><span class="line">LifeForm l = <span class="keyword">new</span> LifeForm();</span><br><span class="line">l.dieOut();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">晴朗</span><br><span class="line">蒸发</span><br><span class="line">生物生长</span><br><span class="line">涨潮</span><br><span class="line">满月</span><br><span class="line">生物变形</span><br><span class="line">生物灭绝</span><br><span class="line">灰暗</span><br><span class="line">干枯</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-17-中介者模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-16-解释器模式</title>
    <link href="http://hibiscidai.com/2018/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-16-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/16/设计模式-16-解释器模式/</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2018-06-27T15:09:09.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/16/设计模式-16-解释器模式/设计模式16.png" alt="设计模式16"></p><p>设计模式-16-解释器模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-16-解释器模式"><a href="#设计模式-16-解释器模式" class="headerlink" title="设计模式-16-解释器模式"></a>设计模式-16-解释器模式</h1><h1 id="解释器模式-Interprter-Pattern"><a href="#解释器模式-Interprter-Pattern" class="headerlink" title="解释器模式(Interprter Pattern)"></a>解释器模式(Interprter Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p><blockquote><p>given a language,define a representation for its grammer along with an interpreter that uses the representation to interpet sentences in the language.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>对于一些固定文法构建一个解释句子的解释器。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>构件语法树，定义终结符与非终结符。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>编译器、运算表达式计算。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>可扩展性比较好，灵活。</li><li>增加了新的解释表达式的方式。</li><li>易于实现简单文法。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>可利用场景比较少。</li><li>对于复杂的文法比较难维护。</li><li>解释器模式会引起类膨胀。 </li><li>解释器模式采用递归调用方法。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。</li><li>一些重复出现的问题可以用一种简单的语言来进行表达。</li><li>一个简单语法需要解释的场景。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>乐章有乐调和谱子，计算机存储用数字对应音符</p><p>in music notation.<br>we define 01 for L0,02 for MID,03 for HI.<br>“do re mo fa sol la xi” used to represent 1 2 3 4 5 6 7<br>use the representation to interpret this sentence：“0 1 3 1 2 3 1 2 3 5 3”</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/16/设计模式-16-解释器模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern16.interprter.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NotationInterpreter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Interpreter</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">String myNumNotation;</span><br><span class="line">String myScale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberNotation</span> <span class="keyword">extends</span> <span class="title">NotationInterpreter</span> </span>&#123;</span><br><span class="line">Hashtable&lt;String, String&gt; nns = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">NumberNotation() &#123;</span><br><span class="line">nns.put(<span class="string">"1"</span>, <span class="string">"do"</span>);</span><br><span class="line">nns.put(<span class="string">"2"</span>, <span class="string">"re"</span>);</span><br><span class="line">nns.put(<span class="string">"3"</span>, <span class="string">"mi"</span>);</span><br><span class="line">nns.put(<span class="string">"4"</span>, <span class="string">"fa"</span>);</span><br><span class="line">nns.put(<span class="string">"5"</span>, <span class="string">"sol"</span>);</span><br><span class="line">nns.put(<span class="string">"6"</span>, <span class="string">"la"</span>);</span><br><span class="line">nns.put(<span class="string">"7"</span>, <span class="string">"xi"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interpreter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">String s = context.myNumNotation;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">String subs = s.substring(i, i + <span class="number">1</span>);</span><br><span class="line">String r = nns.get(subs).toString();</span><br><span class="line">System.out.println(r);</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scale</span> <span class="keyword">extends</span> <span class="title">NotationInterpreter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interpreter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">String scale = context.myScale;</span><br><span class="line"><span class="keyword">switch</span> (scale) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"01"</span>:</span><br><span class="line">System.out.println(<span class="string">"L0"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"02"</span>:</span><br><span class="line">System.out.println(<span class="string">"MID"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"03"</span>:</span><br><span class="line">System.out.println(<span class="string">"HI"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Context c = <span class="keyword">new</span> Context();</span><br><span class="line">c.myNumNotation = <span class="string">"312312353"</span>;</span><br><span class="line">c.myScale = <span class="string">"01"</span>;</span><br><span class="line"></span><br><span class="line">Scale s = <span class="keyword">new</span> Scale();</span><br><span class="line">s.Interpreter(c);</span><br><span class="line"></span><br><span class="line">NumberNotation nn = <span class="keyword">new</span> NumberNotation();</span><br><span class="line">nn.Interpreter(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">L0</span><br><span class="line">mi</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">re</span><br><span class="line"></span><br><span class="line">mi</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">re</span><br><span class="line"></span><br><span class="line">mi</span><br><span class="line"></span><br><span class="line">sol</span><br><span class="line"></span><br><span class="line">mi</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>【菜鸟教程】我们将创建一个接口 Expression 和实现了 Expression 接口的实体类。定义作为上下文中主要解释器的 TerminalExpression 类。其他的类 OrExpression、AndExpression 用于创建组合式表达式。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="http://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg" alt="案例2"></p>]]></content>
    
    <summary type="html">
    
      设计模式-16-解释器模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-15-命令模式</title>
    <link href="http://hibiscidai.com/2018/05/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-15-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/14/设计模式-15-命令模式/</id>
    <published>2018-05-13T16:00:00.000Z</published>
    <updated>2018-06-27T14:08:47.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/14/设计模式-15-命令模式/设计模式15.png" alt="设计模式15"></p><p>设计模式-15-命令模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-15-命令模式"><a href="#设计模式-15-命令模式" class="headerlink" title="设计模式-15-命令模式"></a>设计模式-15-命令模式</h1><h1 id="命令模式-Command-Pattern"><a href="#命令模式-Command-Pattern" class="headerlink" title="命令模式(Command Pattern)"></a>命令模式(Command Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>将一个请求封装为一个对象，从而使你可用不用的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p><blockquote><p>Encopsulate a request in object<br>allow the parameter ization of chents with different requests<br>allow saring the requests in a queue</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>行为请求者与行为实现者通常是一种紧耦合的关系，如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>将一组行为抽象为对象、松耦合。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>定义三个角色：</p><ul><li>received 真正的命令执行对象 </li><li>Command </li><li>invoker 使用命令对象的入口</li></ul><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>通过调用者调用接受者执行命令<br>顺序：调用者→接受者→命令。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低了系统耦合度。</li><li>新的命令可以很容易添加到系统中去。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>使用命令模式可能会导致某些系统有过多的具体命令类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>认为是命令的地方都可以使用命令模式，比如：</p><ul><li>GUI 中每一个按钮都是一条命令。</li><li>模拟 CMD。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>去餐厅点餐</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/14/设计模式-15-命令模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern15.command.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeatCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吱吱吱-肉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CakeCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"香喷喷-蛋糕"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Command&gt; cmds = <span class="keyword">new</span> ArrayList&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.add(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.remove(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Command c : cmds) &#123;</span><br><span class="line">c.makeFood();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Waiter w = <span class="keyword">new</span> Waiter();</span><br><span class="line"></span><br><span class="line">Command m1 = <span class="keyword">new</span> MeatCommand();</span><br><span class="line">Command m2 = <span class="keyword">new</span> MeatCommand();</span><br><span class="line">Command m3 = <span class="keyword">new</span> MeatCommand();</span><br><span class="line">Command c1 = <span class="keyword">new</span> CakeCommand();</span><br><span class="line"></span><br><span class="line">w.addCommand(m1);</span><br><span class="line">w.addCommand(m2);</span><br><span class="line">w.addCommand(m3);</span><br><span class="line">w.addCommand(c1);</span><br><span class="line"></span><br><span class="line">w.delete(m3);</span><br><span class="line"></span><br><span class="line">w.notifyed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">吱吱吱-肉</span><br><span class="line">吱吱吱-肉</span><br><span class="line">香喷喷-蛋糕</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>数据库有 insert 、 delete、update、select命令<br>完成程序，希望可以实现批量操作和撤销功能</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/14/设计模式-15-命令模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern15.command.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"插入"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"更新"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"查询"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCommands</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Command&gt; cmds = <span class="keyword">new</span> ArrayList&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.add(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.remove(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Command c : cmds) &#123;</span><br><span class="line">c.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DBCommands cmds = <span class="keyword">new</span> DBCommands();</span><br><span class="line"></span><br><span class="line">InsertCommand ic = <span class="keyword">new</span> InsertCommand();</span><br><span class="line">DeleteCommand dc = <span class="keyword">new</span> DeleteCommand();</span><br><span class="line">UpdateCommand uc = <span class="keyword">new</span> UpdateCommand();</span><br><span class="line">SelectCommand sc = <span class="keyword">new</span> SelectCommand();</span><br><span class="line"></span><br><span class="line">cmds.addCommand(ic);</span><br><span class="line">cmds.addCommand(dc);</span><br><span class="line">cmds.addCommand(uc);</span><br><span class="line">cmds.addCommand(sc);</span><br><span class="line"></span><br><span class="line">cmds.notifyed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">插入</span><br><span class="line">删除</span><br><span class="line">更新</span><br><span class="line">查询</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-15-命令模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-14-职责链模式</title>
    <link href="http://hibiscidai.com/2018/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-14-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/09/设计模式-14-职责链模式/</id>
    <published>2018-05-08T16:00:00.000Z</published>
    <updated>2018-07-03T06:12:13.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/09/设计模式-14-职责链模式/设计模式14.png" alt="设计模式14"></p><p>设计模式-14-职责链模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-14-职责链模式"><a href="#设计模式-14-职责链模式" class="headerlink" title="设计模式-14-职责链模式"></a>设计模式-14-职责链模式</h1><h1 id="职责链模式-Chain-of-Responsibility-Pattern"><a href="#职责链模式-Chain-of-Responsibility-Pattern" class="headerlink" title="职责链模式(Chain of Responsibility Pattern)"></a>职责链模式(Chain of Responsibility Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理它位置。</p><blockquote><p>the object become parts of a chain and the request is sent from one object to another across the chain until one of the object will handle it.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>在处理消息的时候以过滤很多道。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>拦截的类都实现统一接口。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>红楼梦中的”击鼓传花”。 </li><li>JS 中的事件冒泡。</li><li>JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低耦合度。它将请求的发送者和接收者解耦。</li><li>简化了对象。使得对象不需要知道链的结构。</li><li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 </li><li>增加新的请求处理类很方便。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>不能保证请求一定被接收。 </li><li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。</li><li>可能不容易观察运行时的特征，有碍于除错。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。</li><li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 </li><li>可动态指定一组对象处理请求。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>针对新来的职务，要把责任链断开才可以修改代码，所以将调用谁在处理这个职责转移到他们的父类上随意调用子类（开闭原则）。<br>传递（单一职责原则）：第一联系人、确定上下级关系。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>小男孩修电脑，大人修车，超人修星星</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/09/设计模式-14-职责链模式/案例1.png" alt="案例1"></p><p>修改后类图：</p><p><img src="/2018/05/09/设计模式-14-职责链模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern14.chainofresponsibility.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"i can handle it - Boy"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Adult a = <span class="keyword">new</span> Adult();</span><br><span class="line">a.handle(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adult</span> <span class="keyword">extends</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"i can handle it - Adult"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">SuperMan s = <span class="keyword">new</span> SuperMan();</span><br><span class="line">s.handle(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"i can handle it - SuperMan"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Boy b = <span class="keyword">new</span> Boy();</span><br><span class="line">b.handle(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i can handle it - Adult</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>针对上述案例进行改进，增加订单。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/09/设计模式-14-职责链模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern14.chainofresponsibility.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> AbstractRepairMan ar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuper</span><span class="params">(AbstractRepairMan ar)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ar = ar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Boy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Adult</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//SuperMan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepairOrder</span> </span>&#123;</span><br><span class="line">Boy b = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">RepairOrder() &#123;</span><br><span class="line">Adult a = <span class="keyword">new</span> Adult();</span><br><span class="line">b.setSuper(a);</span><br><span class="line">a.setSuper(<span class="keyword">new</span> SuperMan());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractRepairMan <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RepairOrder ro = <span class="keyword">new</span> RepairOrder();</span><br><span class="line">ro.getFirst().handle(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i can handle it - Adult</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-14-职责链模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="http://hibiscidai.com/2018/05/08/2018-5-8-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://hibiscidai.com/2018/05/08/2018-5-8-Spring学习笔记/</id>
    <published>2018-05-07T16:00:00.000Z</published>
    <updated>2018-07-04T03:04:51.454Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/Spring学习笔记封面.jpg" alt="Spring学习笔记封面"></p><p>Spring，轻量级JavaEE解决方案，是众多优秀设计模式的整合，学习笔记</p><a id="more"></a><p>[TOC]</p><h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>轻量级JavaEE解决方案，是众多优秀设计模式的整合</p><h2 id="设计模式（公式）"><a href="#设计模式（公式）" class="headerlink" title="设计模式（公式）"></a>设计模式（公式）</h2><p>解决一些特定问题的经典代码</p><h3 id="Spring框架中主要的设计模式"><a href="#Spring框架中主要的设计模式" class="headerlink" title="Spring框架中主要的设计模式"></a>Spring框架中主要的设计模式</h3><p>工厂<br>代理<br>模板</p><h2 id="工厂模式简介"><a href="#工厂模式简介" class="headerlink" title="工厂模式简介"></a>工厂模式简介</h2><ul><li>作用：生产对象</li><li>耦合：代码之间具有强关联性</li><li>好处：解耦合</li><li>工厂设计思路：建立一个工厂类，有工厂类负责对象的创建</li></ul><h1 id="Spring开发步骤（通过工厂设计模式创建对象）"><a href="#Spring开发步骤（通过工厂设计模式创建对象）" class="headerlink" title="Spring开发步骤（通过工厂设计模式创建对象）"></a>Spring开发步骤（通过工厂设计模式创建对象）</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>引入jar包</p><h2 id="引入Spring配置文件"><a href="#引入Spring配置文件" class="headerlink" title="引入Spring配置文件"></a>引入Spring配置文件</h2><p>放置位置随意，命名随意，默认 <code>ApplicationContext.xml</code> </p><h2 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h2><p>ApplicationContext(工厂)</p><blockquote><p>重量级资源，内存多，功能强，一个应用只创建一个，线程安全</p></blockquote><h3 id="接口的实现类"><a href="#接口的实现类" class="headerlink" title="接口的实现类"></a>接口的实现类</h3><ul><li><p>ClassPathXmlApplicationContext（非Web环境）</p></li><li><p>WebXmlApplicationContext（Web环境）</p></li></ul><h1 id="Srping工厂的开发步骤"><a href="#Srping工厂的开发步骤" class="headerlink" title="Srping工厂的开发步骤"></a>Srping工厂的开发步骤</h1><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过Spring的工厂类创建对象"><a href="#通过Spring的工厂类创建对象" class="headerlink" title="通过Spring的工厂类创建对象"></a>通过Spring的工厂类创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过Spring工厂创建UserServiceImpl对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建工厂</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//利用工厂创建对象</span></span><br><span class="line">    UserService us = (UserService)ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line">    </span><br><span class="line">    us.register();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring工厂创建对象的原理"><a href="#Spring工厂创建对象的原理" class="headerlink" title="Spring工厂创建对象的原理"></a>Spring工厂创建对象的原理</h1><ol><li>读取配置文件</li><li>获得全限定名</li><li>通过反射获取对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"全限定名"</span>);</span><br><span class="line">clazz.newInstance();<span class="comment">//创建对象</span></span><br></pre></td></tr></table></figure><h1 id="注入（Injection）"><a href="#注入（Injection）" class="headerlink" title="注入（Injection）"></a>注入（Injection）</h1><p>通过Spring的配置文件为对象的成员变量赋值</p><h2 id="Set注入"><a href="#Set注入" class="headerlink" title="Set注入"></a>Set注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>通过Spring工厂创建对象</li><li>调用兑现给的set方法通过配置文件映射进行设值</li></ol><blockquote><p>配置文件中 <code>&lt; property name=&quot;id&quot; &gt;</code> 属性要和类的成员变量名对应，并一定要在类中书写setter和getter方法</p></blockquote><h3 id="JDK类型成员变量"><a href="#JDK类型成员变量" class="headerlink" title="JDK类型成员变量"></a>JDK类型成员变量</h3><p>现有 <code>User</code> 类<br>类结构如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] tels;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; s = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, String&gt; m = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line"><span class="keyword">private</span> Properties p = <span class="keyword">new</span> Properties(); <span class="comment">// 特殊的Map 键值都是String类型</span></span><br><span class="line"><span class="comment">//setter与getter方法</span></span><br><span class="line"><span class="comment">//toString方法</span></span><br><span class="line"><span class="comment">//无参有参构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/User类结构.jpg" alt="User类结构"></p><h4 id="8种基本类型及String类型"><a href="#8种基本类型及String类型" class="headerlink" title="8种基本类型及String类型"></a>8种基本类型及String类型</h4><p>在配置文件中声明如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数组类型的成员变量"><a href="#数组类型的成员变量" class="headerlink" title="数组类型的成员变量"></a>数组类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tels"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List类型的成员变量"><a href="#List类型的成员变量" class="headerlink" title="List类型的成员变量"></a>List类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"l"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaohei<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaohua<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaobai<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaowb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Set类型的成员变量"><a href="#Set类型的成员变量" class="headerlink" title="Set类型的成员变量"></a>Set类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Set成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"s"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Map类型的成员变量"><a href="#Map类型的成员变量" class="headerlink" title="Map类型的成员变量"></a>Map类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"m"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Properties类型的成员变量"><a href="#Properties类型的成员变量" class="headerlink" title="Properties类型的成员变量"></a>Properties类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Propertis类型的成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自建（自定义）类型注入成员变量"><a href="#自建（自定义）类型注入成员变量" class="headerlink" title="自建（自定义）类型注入成员变量"></a>自建（自定义）类型注入成员变量</h4><p>对于三层架构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dao</span><br><span class="line">daoImpl</span><br><span class="line">service</span><br><span class="line">serviceImpl</span><br></pre></td></tr></table></figure><p><code>service</code> 层引用 <code>dao</code> 层作为成员变量</p><h5 id="书写创建对象的类"><a href="#书写创建对象的类" class="headerlink" title="书写创建对象的类"></a>书写创建对象的类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//setter和getter方法</span></span><br><span class="line"><span class="comment">//实现接口方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在Spring配置中配置对应的-lt-bean-gt-标签"><a href="#在Spring配置中配置对应的-lt-bean-gt-标签" class="headerlink" title="在Spring配置中配置对应的 &lt; bean &gt; 标签"></a>在Spring配置中配置对应的 &lt; bean &gt; 标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置UserDAOIMpl的Bean标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.dao.UserDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置该类的信息 UserServiceImpl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 成员变量定义引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在目标实体类中定义成员变量，并且在配置文件中进行引入</p></blockquote><h5 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动注入，在spring配置文件中查询该成员变量指向的实际类型（通过类型） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过成员变量的名字，匹配spring配置文件中的bean标签的id值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="构造方法注入（了解）"><a href="#构造方法注入（了解）" class="headerlink" title="构造方法注入（了解）"></a>构造方法注入（了解）</h2><p>spring通过构造方法完成对于成员变量的赋值</p><p>前提：提供有参构造</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p>以类 <code>Account</code> 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set和get方法</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提供有参构造"><a href="#提供有参构造" class="headerlink" title="提供有参构造"></a>提供有参构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Integer id, Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring的配置文件配置"><a href="#spring的配置文件配置" class="headerlink" title="spring的配置文件配置"></a>spring的配置文件配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.Account"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量进行构造方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>有参构造中的成员变量的个数与顺序和构造注入时保持一致</p></blockquote><h3 id="构造方法可以重载"><a href="#构造方法可以重载" class="headerlink" title="构造方法可以重载"></a>构造方法可以重载</h3><ul><li><p>如果构造方法中，参数的个数不同时，通过  <code>&lt; contructor-arg &gt;</code> 标签的数量进行区分</p></li><li><p>如果构造方法的个数相同时，通过 <code>&lt; Contructor-arg type=&quot;&quot; &gt;</code>  通过参数类型区分</p></li></ul><h1 id="IOC与DI概念"><a href="#IOC与DI概念" class="headerlink" title="IOC与DI概念"></a>IOC与DI概念</h1><h2 id="IOC-Inversion-of-Control-反转控制"><a href="#IOC-Inversion-of-Control-反转控制" class="headerlink" title="IOC (Inversion  of Control) 反转控制"></a>IOC (Inversion  of Control) 反转控制</h2><ul><li><p>控制<br>对于成员变量的控制权</p></li><li><p>反转<br>把对于成员变量赋值的控制权从代码中转移到配置文件中完成</p></li></ul><p>例如 <code>UserServiceImpl</code></p><ul><li>使用前声明方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用后声明方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud;</span><br><span class="line"><span class="comment">//set和get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中进行set注入，把成员变量的赋值控制权从代码中转移到配置文件中</p><h2 id="DI-dependency-injection-依赖注入"><a href="#DI-dependency-injection-依赖注入" class="headerlink" title="DI (dependency  injection) 依赖注入"></a>DI (dependency  injection) 依赖注入</h2><p>当一个类型需要使用另一个类型时，就意味着他依赖另一个类型，那么就可以把另一个类型作为成员变量通过Spring的配置文件进行赋值。</p><p>解耦合</p><p>上<code>构造方法注入</code>例中已说明</p><h1 id="FactoryBean（接口）"><a href="#FactoryBean（接口）" class="headerlink" title="FactoryBean（接口）"></a>FactoryBean（接口）</h1><p>有些简单对象可以通过 <code>new</code> 的方式直接创建<br>复杂对象不能通过new对象创建，例如 <code>SqlSessionFactory</code></p><p>作用：在Spring的工厂中创建复杂对象</p><h2 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="该复杂类实现-FactoryBean-接口"><a href="#该复杂类实现-FactoryBean-接口" class="headerlink" title="该复杂类实现 FactoryBean 接口"></a>该复杂类实现 FactoryBean 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line"><span class="comment">// 作用：用于书写创建复杂对象的代码，并把创建的复杂对象作为方法的返回值返回</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建连接对象</span></span><br><span class="line"><span class="comment">// 加载驱动</span></span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.OracleDriver"</span>);</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回创建的复杂对象的类对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getObjectType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Connection.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制复杂对象的创建次数，根据对象的特点进行返回</span></span><br><span class="line"><span class="comment">// true:Spring工厂只会创建一次该复杂对象</span></span><br><span class="line"><span class="comment">// false:每一次调用Spring工厂 Spring都会创建新的复杂对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring配置文件中配置"><a href="#Spring配置文件中配置" class="headerlink" title="Spring配置文件中配置"></a>Spring配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置创建复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.factory.ConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工厂</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">// 创建Connection对象 注意：直接返回 所要创建的复杂对象</span></span><br><span class="line">Connection conn = (Connection) ac.getBean(<span class="string">"conn"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过bean标签的id值，直接创建对象时，拿到的是复杂对象<br>如果想要拿到原始对象，则需要在Spring创建对象时加上 <code>&amp;</code> 号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory cf = (ConnectionFactory) ac.getBean(<span class="string">"&amp;conn"</span>);</span><br><span class="line">System.out.println(cf);</span><br></pre></td></tr></table></figure><h3 id="控制简单对象的创建次数"><a href="#控制简单对象的创建次数" class="headerlink" title="控制简单对象的创建次数"></a>控制简单对象的创建次数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">scope</span>=<span class="string">"singleton|prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>singleton</code> 默认，简单对象只会被创建一次。<br><code>prototype</code> 简单对象每次使用时都会创建新的对象。</p><h1 id="Spring工厂的高级特性"><a href="#Spring工厂的高级特性" class="headerlink" title="Spring工厂的高级特性"></a>Spring工厂的高级特性</h1><h2 id="工厂创建对象的生命周期"><a href="#工厂创建对象的生命周期" class="headerlink" title="工厂创建对象的生命周期"></a>工厂创建对象的生命周期</h2><p>工厂被创建，对象被创建<br>工厂被关闭，对象被销毁</p><h2 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h2><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><p>对象中任意定义一个初始化方法·。Spring会在这个对象创建之后，自动调用初始化方法的功能。</p><h3 id="destroy-method"><a href="#destroy-method" class="headerlink" title="destroy-method"></a>destroy-method</h3><p>对象中任意定义一个销毁方法。Spring会在这个对销毁之前调用销毁方法。</p><p>在<code>Account</code>类中声明方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.Account"</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量进行构造方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置信息参数化"><a href="#配置信息参数化" class="headerlink" title="配置信息参数化"></a>配置信息参数化</h2><p>作用：把Spring配置文件中，需要修改的jdbc相关参数，提取到一个小的专一化的配置文件中</p><p>好处：利于后续的维护</p><h3 id="开发步骤-2"><a href="#开发步骤-2" class="headerlink" title="开发步骤"></a>开发步骤</h3><h4 id="准备小配置文件"><a href="#准备小配置文件" class="headerlink" title="准备小配置文件"></a>准备小配置文件</h4><p>创建文件 <code>jdbc.properties</code> 文件要以 <code>.properties</code> 结尾</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverclassname=oracle.jdbc.OracleDriver</span><br><span class="line">url=jdbc:oracle:thin:@localhost:1521:xe</span><br><span class="line">name=hr</span><br><span class="line">password=hr</span><br></pre></td></tr></table></figure><h4 id="与spring配置文件整合"><a href="#与spring配置文件整合" class="headerlink" title="与spring配置文件整合"></a>与spring配置文件整合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用Context标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过Context标签读取对应的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"/jdbc.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其中，引入context标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context-3.2.xsd</span><br></pre></td></tr></table></figure><h4 id="通过占位符替换Spring配置文件中的内容"><a href="#通过占位符替换Spring配置文件中的内容" class="headerlink" title="通过占位符替换Spring配置文件中的内容"></a>通过占位符替换Spring配置文件中的内容</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置创建复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.factory.ConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Set注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverclassname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;driverclassname&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;url&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP-Aspect-Oriented-Program-面向切面编程"><a href="#AOP-Aspect-Oriented-Program-面向切面编程" class="headerlink" title="AOP(Aspect Oriented Program) | 面向切面编程"></a>AOP(Aspect Oriented Program) | 面向切面编程</h1><h2 id="静态代理设计模式（Proxy）"><a href="#静态代理设计模式（Proxy）" class="headerlink" title="静态代理设计模式（Proxy）"></a>静态代理设计模式（Proxy）</h2><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/静态代理设计模式.png" alt="静态代理设计模式"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>原始对象（目标对象）</li></ul><p>只做核心功能</p><ul><li>原始方法</li></ul><p>原始对象中的方法，只做核心功能</p><ul><li>额外功能</li></ul><p>事务  日志  性能</p><ul><li>代理对象</li></ul><p>原始对象+额外功能+与原始对象实现相同的接口</p><ul><li>好处</li></ul><p>利于维护</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>学习源码<a href="https://github.com/HibisciDai/TestSpring" target="_blank" rel="noopener">HibisciDai/TestSpring</a></p>]]></content>
    
    <summary type="html">
    
      Spring学习笔记
    
    </summary>
    
      <category term="后台" scheme="http://hibiscidai.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Spring" scheme="http://hibiscidai.com/tags/Spring/"/>
    
      <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-13-代理模式</title>
    <link href="http://hibiscidai.com/2018/04/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-13-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/04/28/设计模式-13-代理模式/</id>
    <published>2018-04-27T16:00:00.000Z</published>
    <updated>2018-06-25T09:01:57.180Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/28/设计模式-13-代理模式/设计模式13.png" alt="设计模式13"></p><p>设计模式-13-代理模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-13-代理模式"><a href="#设计模式-13-代理模式" class="headerlink" title="设计模式-13-代理模式"></a>设计模式-13-代理模式</h1><h1 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式(Proxy Pattern)"></a>代理模式(Proxy Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>为其他独享提供一种代理以控制对这个对象的访问。</p><blockquote><p>The Intent of the pattern is to provide a surrogate or placeholder foran object to control access to.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>想在访问一个类时做一些控制。<br>例如权限。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>实现与被代理类组合。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>增加中间层</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>Windows 里面的快捷方式。 </li><li>猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 </li><li>买火车票不一定在火车站买，也可以去代售点。</li><li>一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。</li><li>spring aop。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>职责清晰。</li><li>高扩展性。 </li><li>智能化。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 </li><li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>按职责来划分，通常有以下使用场景： </p><ul><li>远程代理。 </li><li>虚拟代理。</li><li>Copy-on-Write 代理。</li><li>保护（Protect or Access）代理。</li><li>Cache代理。</li><li>防火墙（Firewall）代理。</li><li>同步化（Synchronization）代理。</li><li>智能引用（Smart Reference）代理。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</li><li>和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li><li>和外观模式的区别：外观模式是封装了子类的全部，代理模式是针对于一个对象来说。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>对于word文档，图片不滚动就加载不出来</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/28/设计模式-13-代理模式/案例1.png" alt="案例1"></p><p>修改后类图：</p><p><img src="/2018/04/28/设计模式-13-代理模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Text t = <span class="keyword">new</span> Text();</span><br><span class="line">t.show();</span><br><span class="line">ProxyPic p = <span class="keyword">new</span> ProxyPic();</span><br><span class="line">p.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pic.focus()) &#123;</span><br><span class="line">        Pic p = <span class="keyword">new</span> Pic();</span><br><span class="line">        p.show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//a place holder for pic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>我们将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/28/设计模式-13-代理模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern13.proxy.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">loadFromDisk(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Displaying "</span> + fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Loading "</span> + fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> RealImage realImage;</span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (realImage == <span class="keyword">null</span>) &#123;</span><br><span class="line">realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">&#125;</span><br><span class="line">realImage.display();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Image image = <span class="keyword">new</span> ProxyImage(<span class="string">"test_10mb.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">image.display();</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line"><span class="comment">// 图像将无法从磁盘加载</span></span><br><span class="line">image.display();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loading test_10mb.jpg</span><br><span class="line">Displaying test_10mb.jpg</span><br><span class="line"></span><br><span class="line">Displaying test_10mb.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-13-代理模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-12-享元模式</title>
    <link href="http://hibiscidai.com/2018/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-12-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/04/25/设计模式-12-享元模式/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-06-22T15:07:07.680Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/25/设计模式-12-享元模式/设计模式12.png" alt="设计模式12"></p><p>设计模式-12-享元模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-12-享元模式"><a href="#设计模式-12-享元模式" class="headerlink" title="设计模式-12-享元模式"></a>设计模式-12-享元模式</h1><h1 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式(Flyweight Pattern)"></a>享元模式(Flyweight Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>运用共享技术有效地支持大量细粒度的对象。</p><blockquote><p>The Intent of this pattern is to use sharing to a large number of objects that have part of their internal state in common whaere the other part of state can vary.</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构方式。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>系统中有大量对象。 </li><li>这些对象消耗大量内存。</li><li>这些对象的状态大部分可以外部化。</li><li>这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。</li><li>系统不依赖于这些对象身份，这些对象是不可分辨的。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>用 HashMap 存储这些对象。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 </li><li>数据库的数据池。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>大大减少对象的创建，降低系统的内存，使效率提高。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>系统有大量相似对象。</li><li>需要缓冲池的场景。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>注意划分外部状态和内部状态，否则可能会引起线程安全问题。</li><li>这些类必须有一个工厂对象加以控制。</li><li>常和compostie（组合）模式结合</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>构建一个森林，里边有大量的河流、草、树木及其他大粒度对象。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/25/设计模式-12-享元模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern12.flyweight.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">River</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一条"</span> + size + <span class="string">"米长的河"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gress</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一课"</span> + size + <span class="string">"米高的草"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一课"</span> + size + <span class="string">"米高的树"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line">Hashtable&lt;String, Forest&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Forest&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">poolAdd(<span class="string">"river"</span>, <span class="keyword">new</span> River());</span><br><span class="line">poolAdd(<span class="string">"tree"</span>, <span class="keyword">new</span> Tree());</span><br><span class="line">poolAdd(<span class="string">"gress"</span>, <span class="keyword">new</span> Gress());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poolAdd</span><span class="params">(String key, Forest forest)</span> </span>&#123;</span><br><span class="line">pool.put(key, forest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Forest <span class="title">getFlyWeight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!pool.contains(key)) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有这个对象，请先添加！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (Forest) pool.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>军队士兵的例子</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/25/设计模式-12-享元模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern12.flyweight.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Color</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Color</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> height;</span><br><span class="line">Color skinColor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solider</span> <span class="keyword">extends</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"士兵，高："</span> + height + <span class="string">",肤色"</span> + skinColor.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninja</span> <span class="keyword">extends</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"忍者，高："</span> + height + <span class="string">",肤色"</span> + skinColor.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Hashtable&lt;String, Enemy&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Enemy&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">pool.put(<span class="string">"solider"</span>, <span class="keyword">new</span> Solider());</span><br><span class="line">pool.put(<span class="string">"ninja"</span>, <span class="keyword">new</span> Ninja());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">poolAdd(<span class="string">"solider"</span>, <span class="keyword">new</span> Solider());</span><br><span class="line">poolAdd(<span class="string">"ninja"</span>, <span class="keyword">new</span> Ninja());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poolAdd</span><span class="params">(String key, Enemy e)</span> </span>&#123;</span><br><span class="line">pool.put(key, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Enemy <span class="title">getFlyWeight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!pool.contains(key)) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有这个对象，请先添加！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (Enemy) pool.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><p>详见 菜鸟教程</p><p><img src="/2018/04/25/设计模式-12-享元模式/案例3.jpg" alt="案例3"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>享元类应为接口而不是抽象类，否则无法获取。前两个案例有问题。</p><p>Hashtable 声明方式应该注意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashtable&lt;String, Forest&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Forest&gt;();<span class="comment">//正确</span></span><br><span class="line">Hashtable pool = <span class="keyword">new</span> Hashtable();<span class="comment">//不报错，不规范</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-12-享元模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-11-外观模式</title>
    <link href="http://hibiscidai.com/2018/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-11-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/04/23/设计模式-11-外观模式/</id>
    <published>2018-04-22T16:00:00.000Z</published>
    <updated>2018-06-21T14:33:06.540Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/23/设计模式-11-外观模式/设计模式11.png" alt="设计模式11"></p><p>设计模式-11-外观模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-11-外观模式"><a href="#设计模式-11-外观模式" class="headerlink" title="设计模式-11-外观模式"></a>设计模式-11-外观模式</h1><h1 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式(Facade Pattern)"></a>外观模式(Facade Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式，向现有系统提供添加了一个接口，来隐藏系统的复杂性。<br>这种模式涉及了一个单一的类，提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。</li><li>定义系统的入口。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>客户端不与系统耦合，外观类与系统耦合。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。</li><li>JAVA 的三层开发模式。</li><li>电脑的例子更形象：<br>电脑整机是CUP、内存、硬盘的外观。有了外观以后，启动电脑和关闭电脑都简化了。<br>启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘<br>关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>减少系统相互依赖。</li><li>提高灵活性。</li><li>提高了安全性。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>为复杂的模块或子系统提供外界访问的模块。</li><li>子系统相对独立。</li><li>预防低水平人员带来的风险。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>抽象工厂模式，可代替其模式隐藏细节。</li><li>单例模式中，Facade对象常为Singleton模式</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>模拟一个取钱过程</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/23/设计模式-11-外观模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern11.facade.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NingLi</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fetchAndCarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"搬"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoBai</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">install</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"安装"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doraemon</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"结算"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">protect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"保护"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Other</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">NingLi nl = <span class="keyword">new</span> NingLi();</span><br><span class="line">XiaoBai xb = <span class="keyword">new</span> XiaoBai();</span><br><span class="line">Doraemon dn = <span class="keyword">new</span> Doraemon();</span><br><span class="line">SuperMan sm = <span class="keyword">new</span> SuperMan();</span><br><span class="line">Other o = <span class="keyword">new</span> Other();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">nl.fetchAndCarry();</span><br><span class="line">sm.protect();</span><br><span class="line">dn.account();</span><br><span class="line">o.other();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">installSoftWare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">xb.install();</span><br><span class="line">dn.account();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">f.DrawMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">搬</span><br><span class="line">保护</span><br><span class="line">结算</span><br><span class="line">其他</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>投影仪放电影有很多操作，现在需要提供一个方便看电影的类。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/23/设计模式-11-外观模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern11.facade.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Projector</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Projector-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Projector-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-放入"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-拿出"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-播放"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DVD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-播放"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Light-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Light-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Projector p;</span><br><span class="line"><span class="keyword">private</span> CD c;</span><br><span class="line"><span class="keyword">private</span> DVD d;</span><br><span class="line"><span class="keyword">private</span> Light l;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p = <span class="keyword">new</span> Projector();</span><br><span class="line">c = <span class="keyword">new</span> CD();</span><br><span class="line">d = <span class="keyword">new</span> DVD();</span><br><span class="line">l = <span class="keyword">new</span> Light();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p.up();</span><br><span class="line">l.off();</span><br><span class="line">d.on();</span><br><span class="line">c.on();</span><br><span class="line">c.play();</span><br><span class="line">d.play();</span><br><span class="line">d.off();</span><br><span class="line">c.off();</span><br><span class="line">l.on();</span><br><span class="line">p.down();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Movie m = <span class="keyword">new</span> Movie();</span><br><span class="line">m.watch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Projector-开</span><br><span class="line">Light-关</span><br><span class="line">DVD-开</span><br><span class="line">CD-放入</span><br><span class="line">CD-播放</span><br><span class="line">DVD-播放</span><br><span class="line">DVD-关</span><br><span class="line">CD-拿出</span><br><span class="line">Light-开</span><br><span class="line">Projector-关</span><br></pre></td></tr></table></figure><h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><p>详见 菜鸟教程</p><p><img src="/2018/04/23/设计模式-11-外观模式/案例3.jpg" alt="案例3"></p>]]></content>
    
    <summary type="html">
    
      设计模式-11-外观模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mongodb学习笔记</title>
    <link href="http://hibiscidai.com/2018/04/21/2018-4-21-Mongodb%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://hibiscidai.com/2018/04/21/2018-4-21-Mongodb学习笔记/</id>
    <published>2018-04-20T16:00:00.000Z</published>
    <updated>2018-07-04T03:05:22.333Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB学习笔记封面.jpg" alt="MongoDB学习笔记封面"></p><p>MongoDB，NoSql非关系型数据库，大数据基础课程，学习笔记</p><a id="more"></a><p>[TOC]</p><h1 id="NoSQL简介"><a href="#NoSQL简介" class="headerlink" title="NoSQL简介"></a>NoSQL简介</h1><p>NoSQL(NoSQL = Not Only SQL )，意即”不仅仅是SQL”。<br>传统数据由关系数据库管理系统（RDBMS）来处理。</p><h2 id="关系型数据库遵循ACID原则"><a href="#关系型数据库遵循ACID原则" class="headerlink" title="关系型数据库遵循ACID原则"></a>关系型数据库遵循ACID原则</h2><ul><li>A (Atomicity) 原子性</li></ul><p>原子性很容易理解，也就是说事务里的所有操作要么全部做完，要么都不做，事务成功的条件是事务里的所有操作都成功，只要有一个操作失败，整个事务就失败，需要回滚。<br>比如银行转账，从A账户转100元至B账户，分为两个步骤：1）从A账户取100元；2）存入100元至B账户。这两步要么一起完成，要么一起不完成，如果只完成第一步，第二步失败，钱会莫名其妙少了100元。</p><ul><li>C (Consistency) 一致性</li></ul><p>一致性也比较容易理解，也就是说数据库要一直处于一致的状态，事务的运行不会改变数据库原本的一致性约束。</p><p>例如现有完整性约束a+b=10，如果一个事务改变了a，那么必须得改变b，使得事务结束后依然满足a+b=10，否则事务失败。</p><ul><li>I (Isolation) 独立性</li></ul><p>所谓的独立性是指并发的事务之间不会互相影响，如果一个事务要访问的数据正在被另外一个事务修改，只要另外一个事务未提交，它所访问的数据就不受未提交事务的影响。</p><p>比如现在有个交易是从A账户转100元至B账户，在这个交易还未完成的情况下，如果此时B查询自己的账户，是看不到新增加的100元的。</p><ul><li>D (Durability) 持久性</li></ul><p>持久性是指一旦事务提交后，它所做的修改将会永久的保存在数据库上，即使出现宕机也不会丢失。</p><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><p>分布式系统（distributed system）由多台计算机和通信的软件组件通过计算机网络连接（本地网络或广域网）组成。<br>分布式系统是建立在网络之上的软件系统。</p><h3 id="分布式计算的优点"><a href="#分布式计算的优点" class="headerlink" title="分布式计算的优点"></a>分布式计算的优点</h3><ul><li>可靠性（容错） </li></ul><p>分布式计算系统中的一个重要的优点是可靠性。一台服务器的系统崩溃并不影响到其余的服务器。</p><ul><li>可扩展性</li></ul><p>在分布式计算系统可以根据需要增加更多的机器。</p><ul><li>资源共享</li></ul><p>共享数据是必不可少的应用，如银行，预订系统。</p><ul><li>灵活性</li></ul><p>由于该系统是非常灵活的，它很容易安装，实施和调试新的服务。</p><ul><li>更快的速度</li></ul><p>分布式计算系统可以有多台计算机的计算能力，使得它比其他系统有更快的处理速度。</p><ul><li>开放系统</li></ul><p>由于它是开放的系统，本地或者远程都可以访问到该服务。</p><ul><li>更高的性能</li></ul><p>相较于集中式计算机网络集群可以提供更高的性能（及更好的性价比）。</p><h3 id="分布式计算的缺点"><a href="#分布式计算的缺点" class="headerlink" title="分布式计算的缺点"></a>分布式计算的缺点</h3><ul><li>故障排除</li></ul><p>故障排除和诊断问题。</p><ul><li>软件</li></ul><p>更少的软件支持是分布式计算系统的主要缺点。</p><ul><li>网络</li></ul><p>网络基础设施的问题，包括：传输问题，高负载，信息丢失等。</p><ul><li>安全性</li></ul><p>开放系统的特性让分布式计算系统存在着数据的安全性和共享的风险等问题。</p><h2 id="什么是NoSQL"><a href="#什么是NoSQL" class="headerlink" title="什么是NoSQL"></a>什么是NoSQL</h2><p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p><p>NoSQL用于超大规模数据的存储。（例如谷歌或Facebook每天为他们的用户收集万亿比特的数据）。这些类型的数据存储不需要固定的模式，无需多余操作就可以横向扩展。</p><h2 id="RDBMS-vs-NoSQL"><a href="#RDBMS-vs-NoSQL" class="headerlink" title="RDBMS vs NoSQL"></a>RDBMS vs NoSQL</h2><h3 id="RDBMS"><a href="#RDBMS" class="headerlink" title="RDBMS"></a>RDBMS</h3><ul><li>高度组织化结构化数据 </li><li>结构化查询语言（SQL） (SQL) </li><li>数据和关系都存储在单独的表中。 </li><li>数据操纵语言，数据定义语言 </li><li>严格的一致性</li><li>基础事务</li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul><li>代表着不仅仅是SQL</li><li>没有声明性查询语言</li><li>没有预定义的模式</li><li>键 - 值对存储，列存储，文档存储，图形数据库</li><li>最终一致性，而非ACID属性</li><li>非结构化和不可预知的数据</li><li>CAP定理 </li><li>高性能，高可用性和可伸缩性</li></ul><h2 id="CAP定理"><a href="#CAP定理" class="headerlink" title="CAP定理"></a>CAP定理</h2><p>在计算机科学中, CAP定理（CAP theorem）, 又被称作 布鲁尔定理（Brewer’s theorem）, 它指出对于一个分布式计算系统来说，不可能同时满足以下三点:</p><ul><li>一致性(Consistency) (所有节点在同一时间具有相同的数据)</li><li>可用性(Availability) (保证每个请求不管成功或者失败都有响应)</li><li>分隔容忍(Partition tolerance) (系统中任意信息的丢失或失败不会影响系统的继续运作)</li></ul><p>根据 CAP 原理将 NoSQL 数据库分成了满足 CA 原则、满足 CP 原则和满足 AP 原则三 大类：</p><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/cap-theoram-image.png" alt="cap-theoram"></p><ul><li>CA<br>单点集群，满足一致性，可用性的系统，通常在可扩展性上不太强大。</li><li>CP<br>满足一致性，分区容忍性的系统，通常性能不是特别高。</li><li>AP<br>满足可用性，分区容忍性的系统，通常可能对一致性要求低一些。</li></ul><h2 id="NoSQL的优点-缺点"><a href="#NoSQL的优点-缺点" class="headerlink" title="NoSQL的优点/缺点"></a>NoSQL的优点/缺点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>高可扩展性</li><li>分布式计算</li><li>低成本</li><li>架构的灵活性，半结构化数据</li><li>没有复杂的关系</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>没有标准化</li><li>有限的查询功能（到目前为止）</li><li>最终一致是不直观的程序</li></ul><h2 id="流行的NoSql"><a href="#流行的NoSql" class="headerlink" title="流行的NoSql"></a>流行的NoSql</h2><p>SSDB</p><h1 id="大数据前言"><a href="#大数据前言" class="headerlink" title="大数据前言"></a>大数据前言</h1><h2 id="大数据概念"><a href="#大数据概念" class="headerlink" title="大数据概念"></a>大数据概念</h2><p>“大数据”(big  data)是一个体量特别大,数据类别特别大的数据集。</p><h2 id="大数据特点"><a href="#大数据特点" class="headerlink" title="大数据特点"></a>大数据特点</h2><ul><li>容量（Volume）：  数据的大小决定所考虑的数据的价值和潜在的信息</li><li>种类（Variety）： 数据类型的多样性</li><li>速度（Velocity）：指获得数据的速度</li><li>真实性（Veracity）：数据的质量 </li><li>价值（Value）：合理运用大数据，以低成本创造高价值</li></ul><h2 id="大数据应用场景"><a href="#大数据应用场景" class="headerlink" title="大数据应用场景"></a>大数据应用场景</h2><ul><li>医疗大数据  看病更高效</li><li>零售大数据  最懂消费者</li><li>电商大数据      精准营销法宝</li><li>农牧大数据      量化生产</li><li>交通大数据      畅通出行</li><li>教育大数据      因材施教</li><li>环保大数据      对抗PM2.5</li><li>食品大数据      舌尖上的安全</li></ul><h1 id="集群（群集）Cluster"><a href="#集群（群集）Cluster" class="headerlink" title="集群（群集）Cluster"></a>集群（群集）Cluster</h1><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/集群总述.png" alt="集群总述"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>多台计算机（服务器），一起对外提供服务</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>更加可靠（Hight Avaliable 高可用）</li><li>解决单机硬件的物理上限</li><li>超级运算（超算）军工 科研</li></ol><h2 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类</h2><h3 id="主备集群-Master-Standby"><a href="#主备集群-Master-Standby" class="headerlink" title="主备集群(Master-Standby)"></a>主备集群(Master-Standby)</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/主备集群-Master-Standby.png" alt="主备集群"></p><h3 id="主从集群-Master-slave"><a href="#主从集群-Master-slave" class="headerlink" title="主从集群(Master-slave)"></a>主从集群(Master-slave)</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/主从集群-Master-slave.png" alt="主从集群"></p><h3 id="负载均衡集群"><a href="#负载均衡集群" class="headerlink" title="负载均衡集群"></a>负载均衡集群</h3><h3 id="高性能计算集群"><a href="#高性能计算集群" class="headerlink" title="高性能计算集群"></a>高性能计算集群</h3><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p><a href="https://www.mongodb.com/" target="_blank" rel="noopener">MongoDB的主页</a></p><p><strong>MongoDB是一个高性能，开源，无模式的文档型NoSQL数据。</strong></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>MongoDB 是由C++语言编写的，是一个基于分布式文件存储的开源数据库系统。</p><p>在高负载的情况下，添加更多的节点，可以保证服务器性能。</p><p>MongoDB 旨在为WEB应用提供可扩展的高性能数据存储解决方案。</p><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p><h3 id="主要功能特性"><a href="#主要功能特性" class="headerlink" title="主要功能特性"></a>主要功能特性</h3><ol><li>文件存储格式为BSON（一种JSON的扩展）</li><li>模式自由</li><li>支持动态查询</li><li>支持完全索引</li><li>支持复制和故障恢复</li><li>使用高效的二进制数据存储，包括大型对象（如视频等）</li><li>自动处理碎片，以支持云计算层次的扩展性 </li><li>支持JAVA,RUBY，PYTHON，C++，PHP等多种语言</li><li>内部支持JavaScript</li></ol><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ol><li>查询速度快。</li><li>高并发。可以达到2万个并发</li><li>高容量。支持10TB以上的数据量</li></ol><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ol><li>网站数据</li><li>缓存</li><li>大尺寸、低价值的数据</li><li>高伸缩性的场景</li><li>用于对象及JSON数据的存储</li></ol><h3 id="使用限制"><a href="#使用限制" class="headerlink" title="使用限制"></a>使用限制</h3><ol><li>在32位系统上，不支持大于2.5G的数据</li><li>单个文件大小限制为16M</li><li>高度事务性的系统：例如银行或会计系统。传统的关系型数据库目前还是更适用于需要大量原子性复杂事务的应用程序。</li><li>传统的商业智能应用：针对特定问题的BI数据库会对产生高度优化的查询方式。对于此类应用，数据仓库可能是更合适的选择。   </li></ol><h3 id="MongoDB与关系型数据库对比"><a href="#MongoDB与关系型数据库对比" class="headerlink" title="MongoDB与关系型数据库对比"></a>MongoDB与关系型数据库对比</h3><table><thead><tr><th style="text-align:center">对比项</th><th style="text-align:center">MongoDB</th><th style="text-align:center">MySQL、Oracle</th></tr></thead><tbody><tr><td style="text-align:center">数据库</td><td style="text-align:center">数据库(dataBase)</td><td style="text-align:center">数据库(dataBase、schema)</td></tr><tr><td style="text-align:center">表</td><td style="text-align:center">集合(collection)</td><td style="text-align:center">二维表(table)</td></tr><tr><td style="text-align:center">表中的一行数据</td><td style="text-align:center">文档(document)</td><td style="text-align:center">一条记录(record)</td></tr><tr><td style="text-align:center">表字段</td><td style="text-align:center">键(key)</td><td style="text-align:center">列(column)</td></tr><tr><td style="text-align:center">主外键</td><td style="text-align:center">无</td><td style="text-align:center">PK、FK</td></tr><tr><td style="text-align:center">灵活度扩展性</td><td style="text-align:center">极高</td><td style="text-align:center">差</td></tr></tbody></table><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB与关系型数据库对比.png" alt="MongoDB与关系型数据库对比"></p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>一个mongodb中可以建立多个数据库。</p><p>MongoDB的默认数据库为”db”，该数据库存储在data目录中。</p><p>MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限，不同的数据库也放置在不同的文件中。</p><p><em>数据库也通过名字来标识。数据库名可以是满足以下条件的任意UTF-8字符串。</em></p><ul><li>不能是空字符串（””)。</li><li>不得含有’ ‘（空格)、.、$、/、\和\0 (空字符)。</li><li>应全部小写。</li><li>最多64字节。</li></ul><p><em>有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库。</em></p><ul><li>admin<br>从权限的角度来看，这是<code>root</code>数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。</li><li>local<br>这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合</li><li>config<br>当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。</li></ul><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p>文档是一组键值(key-value)对(即BSON)。MongoDB 的文档不需要设置相同的字段，并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点。</p><table><thead><tr><th style="text-align:center">RDBMS</th><th style="text-align:center">MongoDB</th></tr></thead><tbody><tr><td style="text-align:center">数据库</td><td style="text-align:center">数据库</td></tr><tr><td style="text-align:center">表格</td><td style="text-align:center">集合</td></tr><tr><td style="text-align:center">行</td><td style="text-align:center">文档</td></tr><tr><td style="text-align:center">列</td><td style="text-align:center">字段</td></tr><tr><td style="text-align:center">表联合</td><td style="text-align:center">嵌入文档</td></tr><tr><td style="text-align:center">主键</td><td style="text-align:center">主键 (MongoDB 提供了 key 为 _id )</td></tr></tbody></table><table><thead><tr><th style="text-align:center">数据库服务和客户端</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center">Mysqld/Oracle</td><td style="text-align:center">mongod</td></tr><tr><td style="text-align:center">mysql/sqlplus</td><td style="text-align:center">mongo</td></tr></tbody></table><ul><li>需要注意的是</li></ul><ol><li>文档中的键/值对是有序的。</li><li>文档中的值不仅可以是在双引号里面的字符串，还可以是其他几种数据类型（甚至可以是整个嵌入的文档)。</li><li>MongoDB区分类型和大小写。</li><li>MongoDB的文档不能有重复的键。</li><li>文档的键是字符串。除了少数例外情况，键可以使用任意UTF-8字符。</li></ol><ul><li>文档键命名规范</li></ul><ol><li>键不能含有\0 (空字符)。这个字符用来表示键的结尾。</li><li>.和$有特别的意义，只有在特定环境下才能使用。</li><li>以下划线<code>_</code>开头的键是保留的(不是严格要求的)。</li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合就是 MongoDB 文档组，类似于 RDBMS （关系数据库管理系统：Relational Database Management System)中的表格。</p><p>集合存在于数据库中，集合没有固定的结构，这意味着你在对集合可以插入不同格式和类型的数据，但通常情况下我们插入集合的数据都会有一定的关联性。</p><h3 id="合法的集合名"><a href="#合法的集合名" class="headerlink" title="合法的集合名"></a>合法的集合名</h3><ol><li>集合名不能是空字符串<code>&quot;&quot;</code>。</li><li>集合名不能含有\0字符（空字符)，这个字符表示集合名的结尾。</li><li>集合名不能以”system.”开头，这是为系统集合保留的前缀。</li><li>用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现<code>$</code>。</li></ol><h3 id="capped-collections"><a href="#capped-collections" class="headerlink" title="capped collections"></a>capped collections</h3><p>Capped collections 就是固定大小的collection。</p><p>它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 “RRD” 概念类似。</p><p>Capped collections是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能 和标准的collection不同，你必须要显式的创建一个capped collection， 指定一个collection的大小，单位是字节。collection的数据存储空间值提前分配的。</p><p>要注意的是指定的存储大小包含了数据库的头信息。</p><ol><li>在capped collection中，你能添加新的对象。</li><li>更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。</li><li>不允许进行删除。使用<code>rop()</code>删除collection所有的行。</li><li>删除之后，你必须显式的重新创建这个collection。</li><li>it机器中，capped collection最大存储为1e9( 1X109)个字节。</li></ol><h3 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h3><table><thead><tr><th style="text-align:center">集合命名空间</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">dbname.system.namespaces</td><td style="text-align:center">列出所有名字空间。</td></tr><tr><td style="text-align:center">dbname.system.indexes</td><td style="text-align:center">列出所有索引。</td></tr><tr><td style="text-align:center">dbname.system.profile</td><td style="text-align:center">包含数据库概要(profile)信息。</td></tr><tr><td style="text-align:center">dbname.system.users</td><td style="text-align:center">列出所有可访问数据库的用户。</td></tr><tr><td style="text-align:center">dbname.local.sources</td><td style="text-align:center">包含复制对端（slave）的服务器信息和状态。</td></tr></tbody></table><p>在<code>{ { system.indexes } }</code>插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。</p><p><code>{ { system.users } }</code>是可修改的。</p><p><code>{ { system.profile } }</code>是可删除的。</p><h2 id="MongoDB-数据类型"><a href="#MongoDB-数据类型" class="headerlink" title="MongoDB 数据类型"></a>MongoDB 数据类型</h2><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">String</td><td style="text-align:center">字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。</td></tr><tr><td style="text-align:center">Integer</td><td style="text-align:center">整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。</td></tr><tr><td style="text-align:center">Boolean</td><td style="text-align:center">布尔值。用于存储布尔值（真/假）。</td></tr><tr><td style="text-align:center">Double</td><td style="text-align:center">双精度浮点值。用于存储浮点值。</td></tr><tr><td style="text-align:center">Min/Max keys</td><td style="text-align:center">将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。</td></tr><tr><td style="text-align:center">Array</td><td style="text-align:center">用于将数组或列表或多个值存储为一个键。</td></tr><tr><td style="text-align:center">Timestamp</td><td style="text-align:center">时间戳。记录文档修改或添加的具体时间。</td></tr><tr><td style="text-align:center">Object</td><td style="text-align:center">用于内嵌文档。</td></tr><tr><td style="text-align:center">Null</td><td style="text-align:center">用于创建空值。</td></tr><tr><td style="text-align:center">Symbol</td><td style="text-align:center">符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。</td></tr><tr><td style="text-align:center">Date</td><td style="text-align:center">日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。</td></tr><tr><td style="text-align:center">Object ID</td><td style="text-align:center">对象 ID。用于创建文档的 ID。</td></tr><tr><td style="text-align:center">Binary Data</td><td style="text-align:center">二进制数据。用于存储二进制数据。</td></tr><tr><td style="text-align:center">Code</td><td style="text-align:center">代码类型。用于在文档中存储 JavaScript 代码。</td></tr><tr><td style="text-align:center">Regular expression</td><td style="text-align:center">正则表达式类型。用于存储正则表达式。</td></tr></tbody></table><h3 id="ObjectId"><a href="#ObjectId" class="headerlink" title="ObjectId"></a>ObjectId</h3><p>ObjectId 类似唯一主键，可以很快的去生成和排序，包含 12 bytes，含义是：</p><ol><li>前 4 个字节表示创建 unix时间戳,格林尼治时间 UTC 时间，比北京时间晚了 8 个小时</li><li>接下来的 3 个字节是机器标识码</li><li>紧接的两个字节由进程 id 组成 PID</li><li>最后三个字节是随机数</li></ol><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/ObjectId.jpeg" alt="ObjectId"></p><p>MongoDB 中存储的文档必须有一个<code>_id</code>键。这个键的值可以是任何类型的，默认是个 ObjectId 对象。</p><p>由于 ObjectId 中保存了创建的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; var newObject = ObjectId()</span><br><span class="line">&gt; newObject.getTimestamp()</span><br><span class="line"></span><br><span class="line">ISODate(&quot;2017-11-25T07:21:10Z&quot;)</span><br></pre></td></tr></table></figure><p>ObjectId 转为字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; newObject.str</span><br><span class="line"></span><br><span class="line">5a1919e63df83ce79df8b38f</span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>BSON 字符串都是 UTF-8 编码。</p><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>BSON 有一个特殊的时间戳类型用于 MongoDB 内部使用，与普通的 日期 类型不相关。 时间戳值是一个 64 位的值。其中：</p><ul><li>前32位是一个 time_t 值（与Unix新纪元相差的秒数）</li><li>后32位是在某秒中操作的一个递增的序数<br>在单个 mongod 实例中，时间戳值通常是唯一的。</li></ul><p>在复制集中， oplog 有一个 ts 字段。这个字段中的值使用BSON时间戳表示了操作时间。</p><blockquote><p>BSON 时间戳类型主要用于 MongoDB 内部使用。在大多数情况下的应用开发中，你可以使用 BSON 日期类型。</p></blockquote><h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>表示当前距离 Unix新纪元（1970年1月1日）的毫秒数。日期类型是有符号的, 负数表示 1970 年之前的日期。</p><h2 id="MongoDB的安装"><a href="#MongoDB的安装" class="headerlink" title="MongoDB的安装"></a>MongoDB的安装</h2><ol><li>从官方获得MongoDB的压缩包</li><li>将其解压到 d:\，再重命名为mongo，路径为d:\mongo</li><li>创建MongoDB的数据文件夹</li></ol><h3 id="windows-下安装MongoDB"><a href="#windows-下安装MongoDB" class="headerlink" title="windows 下安装MongoDB"></a>windows 下安装MongoDB</h3><p><em>zip版，mis版本不再介绍</em></p><p>搭建文件目录路径如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├─mongodb</span><br><span class="line">│  └─bin</span><br><span class="line">├─mongodbdata</span><br><span class="line">├─mongodetc</span><br><span class="line">└─mongodlog</span><br></pre></td></tr></table></figure><p><code>mongodb</code> 为主文件目录，其中 <code>bin</code> 为主要目录<br><code>mongodbdata</code> 为数据库目录<br><code>mongodetc</code> 为配置文件目录<br><code>mongodlog</code> 为日志目录</p><ul><li>设置数据库位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --dbpath G:\mongodb\mongodbdata</span><br></pre></td></tr></table></figure><ul><li>设置目录文件</li></ul><p>对应一个文件，而不是目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --logpath g:\mongodb\mongodlog\mongodlog</span><br></pre></td></tr></table></figure><p>另外可以书写配置文件编写bat批处理一键启动服务</p><ul><li>编写配置文件</li></ul><p><code>mongod.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">systemLog:</span><br><span class="line">    destination: file</span><br><span class="line">    path: g:\mongodb\mongodlog\mongodlog</span><br><span class="line">storage:</span><br><span class="line">    dbPath: g:\mongodb\mongodbdata</span><br></pre></td></tr></table></figure><ul><li>以配置文件安装服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod.exe --config "g:\mongodb\mongodetc\ongod.cfg" --install</span><br></pre></td></tr></table></figure><ul><li>以配置文件启动服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g:\mongodb\mongodb\bin\mongod.exe --config g:\mongodb\mongodetc\mongod.cfg</span><br></pre></td></tr></table></figure><h3 id="启动MongoDB服务端"><a href="#启动MongoDB服务端" class="headerlink" title="启动MongoDB服务端:"></a>启动MongoDB服务端:</h3><p>d:\mongo\bin\<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=d:\db --logpath=c:\mongo\logs       \mongodb.log --port=27017</span><br></pre></td></tr></table></figure></p><h3 id="MongoDB命令参数说明"><a href="#MongoDB命令参数说明" class="headerlink" title="MongoDB命令参数说明"></a>MongoDB命令参数说明</h3><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">dbpath</td><td style="text-align:center">数据文件存放路径，每个数据库会在其中创建一个子目录，用于防止同一个实例多次运行的mongod.lock  也保存在此目录中</td></tr><tr><td style="text-align:center">logpath</td><td style="text-align:center">日志文件</td></tr><tr><td style="text-align:center">logappend</td><td style="text-align:center">日志采用追加模式（默认是覆写模式）</td></tr><tr><td style="text-align:center">bind_ip</td><td style="text-align:center">对外服务的绑定ip，一般设置为空，及绑定在本机所有可用ip 上</td></tr><tr><td style="text-align:center">port</td><td style="text-align:center">对外服务端口。Web  管理端口在这个port  的基础上+1000</td></tr><tr><td style="text-align:center">fork</td><td style="text-align:center">以后台Daemon  形式运行服务</td></tr><tr><td style="text-align:center">journal</td><td style="text-align:center">开启日志功能，通过保存操作日志来降低单机故障的恢复时间</td></tr><tr><td style="text-align:center">syncdelay</td><td style="text-align:center">系统同步刷新磁盘的时间，单位为秒，默认是60 秒</td></tr><tr><td style="text-align:center">directoryperdb</td><td style="text-align:center">每个db 存放在单独的目录中，建议设置该参数</td></tr><tr><td style="text-align:center">maxConns</td><td style="text-align:center">最大连接数</td></tr><tr><td style="text-align:center">repairpath</td><td style="text-align:center">执行repair  时的临时目录。在如果没有开启journal，异常down  机后重启，必须执行repair操作</td></tr></tbody></table><h2 id="MongoDB-连接"><a href="#MongoDB-连接" class="headerlink" title="MongoDB - 连接"></a>MongoDB - 连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://[username:password@]host1[:port1][,host2[:port2],...[,hostN[:portN]]][/[database][?options]]</span><br></pre></td></tr></table></figure><ul><li>mongodb://<br>这是固定的格式，必须要指定。</li><li>username:password@<br>可选项，如果设置，在连接数据库服务器之后，驱动都会尝试登陆这个数据库</li><li>host1<br>必须的指定至少一个<code>host</code>, <code>host1</code> 是这个URI唯一要填写的。它指定了要连接服务器的地址。如果要连接复制集，请指定多个主机地址。</li><li>portX<br>可选的指定端口，如果不填，默认为<code>27017</code></li><li>/database<br>如果指定<code>username:password@</code>，连接并验证登陆指定数据库。若不指定，默认打开 test 数据库。</li><li>?options<br>是连接选项。如果不使用<code>/database</code>，则前面需要加上<code>/</code>。所有连接选项都是键值对<code>name=value</code>，键值对之间通过<code>&amp;</code>或<code>;</code>（分号）隔开</li></ul><table><thead><tr><th style="text-align:center">选项</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">replicaSet=name</td><td style="text-align:left">验证replica set的名称。 Impliesconnect=replicaSet.</td></tr><tr><td style="text-align:center">slaveOk=true\</td><td style="text-align:left">false 或 true:在connect=direct模式下，驱动会连接第一台机器，即使这台服务器不是主。在connect=replicaSet模式下，驱动会发送所有的写请求到主并且把读取操作分布在其他从服务器。false: 在 connect=direct模式下，驱动会自动找寻主服务器. 在connect=replicaSet 模式下，驱动仅仅连接主服务器，并且所有的读写命令都连接到主服务器。</td></tr><tr><td style="text-align:center">safe=true\</td><td style="text-align:left">false 或 true: 在执行更新操作之后，驱动都会发送getLastError命令来确保更新成功。(还要参考 wtimeoutMS).false: 在每次更新之后，驱动不会发送getLastError来确保更新成功。</td></tr><tr><td style="text-align:center">w=n</td><td style="text-align:left">驱动添加 { w : n } 到getLastError命令. 应用于safe=true。</td></tr><tr><td style="text-align:center">wtimeoutMS=ms</td><td style="text-align:left">驱动添加 { wtimeout : ms } 到 getlasterror 命令. 应用于 safe=true.</td></tr><tr><td style="text-align:center">fsync=true\</td><td style="text-align:left">false 或 true: 驱动添加 { fsync : true } 到 getlasterror 命令.应用于 safe=true.false: 驱动不会添加到getLastError命令中。</td></tr><tr><td style="text-align:center">journal=true\</td><td style="text-align:left">false 或 如果设置为 true, 同步到 journal (在提交到数据库前写入到实体中). 应用于 safe=true</td></tr><tr><td style="text-align:center">connectTimeoutMS=ms</td><td style="text-align:left">可以打开连接的时间。</td></tr><tr><td style="text-align:center">socketTimeoutMS=ms</td><td style="text-align:left">发送和接受sockets的时间。</td></tr></tbody></table><ul><li>使用默认端口来连接 MongoDB 的服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodb://localhost</span><br></pre></td></tr></table></figure><ul><li>通过 shell 连接 MongoDB 服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ./mongo</span><br><span class="line">MongoDB shell version: 3.0.6</span><br><span class="line">connecting to: test</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="MongoDB数据库基本命令"><a href="#MongoDB数据库基本命令" class="headerlink" title="MongoDB数据库基本命令:"></a>MongoDB数据库基本命令:</h2><ol><li>Help查看命令提示</li></ol><p><code>db.help()</code></p><ol><li>显示当前数据库的名字</li></ol><p><code>db</code></p><ol><li>切换/创建数据库</li></ol><p><code>use 数据库名</code><br>当创建一个集合的时候会自动创建当前数据库</p><ol><li>显示所有的数据库</li></ol><p><code>show dbs</code></p><ol><li>删除当前数据库</li></ol><p><code>db.dropDatabase()</code></p><ol><li>显示当前db状态</li></ol><p><code>db.stats()</code></p><ol><li>当前db版本</li></ol><p><code>db.version()</code></p><ol><li>查看当前db的链接机器地址</li></ol><p><code>db.getMongo()</code></p><h3 id="MongoDB操作集合（Collection-相关操作"><a href="#MongoDB操作集合（Collection-相关操作" class="headerlink" title="MongoDB操作集合（Collection)相关操作"></a>MongoDB操作集合（Collection)相关操作</h3><ol><li>创建集合</li></ol><p>显示创建:</p><p><code>db.createCollection(“users”);</code></p><p>隐式创建(直接向集合插入数据):</p><p><code>db.users.insert({name:”suns”,age:10})</code></p><ol><li>显示当前数据库中的所有集合</li></ol><p><code>show collections</code><br><code>show tables</code></p><ol><li>删除集合</li></ol><p><code>db.users.drop()</code></p><h3 id="MongoDB操作文档-Document-相关操作"><a href="#MongoDB操作文档-Document-相关操作" class="headerlink" title="MongoDB操作文档(Document)相关操作"></a>MongoDB操作文档(Document)相关操作</h3><ol><li>创建文档</li></ol><p>文档格式遵从<em>json</em>格式</p><p><code>db.users.insert({name:”suns”,age:10})</code><br>自动生成一个全球唯一的主键，文档主键<code>_id</code>：时间戳、机器、PID、计数器</p><ol><li>删除文档</li></ol><p><code>db.users.remove({})</code></p><p><code>db.users.remove({name:”suns”})</code></p><ol><li>修改文档</li></ol><p><code>db.users.update(query,update,upsert,multi)</code></p><p><code>query</code><br>修改的条件，若为<code>{}</code> 则全选</p><p><code>update</code><br>更新的命令</p><p><code>upsert</code><br>如果未发现符合要求的数据内容，是否进行插入操作，1或者true 进行插入，0或者false不进行插入</p><p><code>multi</code>   是否进行多行更新，1或者true 进行多行更新，0或者false不进行多行更新</p><ol><li>修改文档具体案例</li></ol><p><code>db.users.update({name:”suns”},{$set:{password:”888”}},0, 1)</code> </p><p><code>$set</code>等同于sql语句中的set</p><p><code>$inc</code>为对应key中的数据内容进行算数运算（增加）</p><p><code>db.users.update({},{$inc:{age:1},0,1})</code></p><h3 id="MongoDB查询相关操作"><a href="#MongoDB查询相关操作" class="headerlink" title="MongoDB查询相关操作"></a>MongoDB查询相关操作</h3><h4 id="基本查询操作"><a href="#基本查询操作" class="headerlink" title="基本查询操作"></a>基本查询操作</h4><p>查询集合中所有内容:<code>db.users.find();</code></p><p>查询集合中第一个内容:<code>db.users.findOne();</code></p><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ul><li><code>=</code> 条件 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `!=` 条件 `$ne`</span><br><span class="line"></span><br><span class="line">```db.users.find(&#123;name:&#123;“$ne”:”suns”&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>&gt;</code> 条件 <code>$gt</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `&lt;` 条件 `$lt`</span><br><span class="line"></span><br><span class="line">```db.users.find(&#123;age:&#123;“$lt”:10&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>&gt;=</code> 条件 <code>$gte</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `&lt;=` 条件 `$lte`</span><br><span class="line"></span><br><span class="line">```db.users.find(&#123;age:&#123;“$lte”:10&#125;&#125;)</span><br></pre></td></tr></table></figure><h4 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h4><ul><li>与运算</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;name:”suns”,age:10&#125;)</span><br></pre></td></tr></table></figure><ul><li>或运算</li></ul><p><code>$or</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;$or:[&#123;name:”suns1”&#125;,&#123;age:32&#125;]&#125;)</span><br></pre></td></tr></table></figure><ul><li>或非运算</li></ul><p><code>$nor</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;$nor:[&#123;name:”suns1”&#125;,&#123;age:32&#125;]&#125;)</span><br></pre></td></tr></table></figure><h4 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h4><ul><li><code>$in</code> </li></ul><p>类似于关系型数据库中的in操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;age:&#123;$in:[23,24,25]&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>$all</code> </li></ul><p>主要用来查询数组中的包含关系，查询条件中只要有一个不包含就不返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[1,2,3]&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[2,3,4]&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[2,5,7]&#125;</span><br><span class="line">&#123;&quot;name&quot;:&quot;suns1&quot;,&quot;post&quot;:[3,9,10]&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;post:&#123;$all:[2,3]&#125;&#125;)</span><br></pre></td></tr></table></figure><p>一行二行出现23</p><h4 id="统计、排序、分页"><a href="#统计、排序、分页" class="headerlink" title="统计、排序、分页"></a>统计、排序、分页</h4><ul><li>统计</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.users.count();//统计数据</span><br><span class="line">db.users.find().count();</span><br><span class="line">db.users.find(&#123;age:&#123;$lt:5&#125;&#125;).count();//条件统计</span><br></pre></td></tr></table></figure><ul><li>排序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().sort(&#123;age:1&#125;); //升序</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;); //降序</span><br></pre></td></tr></table></figure><ul><li>分页</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.users.find().skip(2).limit(3); #从第三条开始，三个为一页</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;).skip(2).limit(3); #在上一个基础上以年龄为降序排列</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>在上述基础进行统计</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;).skip(2).limit(3).count(0); </span><br><span class="line"><span class="meta">#</span>忽略分页效果</span><br><span class="line">db.users.find().sort(&#123;age:-1&#125;).skip(2).limit(3).count(1);</span><br><span class="line"><span class="meta">#</span>记录分页效果</span><br></pre></td></tr></table></figure><h4 id="特殊查询"><a href="#特殊查询" class="headerlink" title="特殊查询"></a>特殊查询</h4><ul><li>投影查询</li></ul><p>排除某个列，类似于<code>select 列名</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;&#125;,&#123;_id:0&#125;)</span><br></pre></td></tr></table></figure></p><p><code>$exists</code> 判断一个key是否存在 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.users.find(&#123;name:&#123;$exists:1&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="MongoDB的索引"><a href="#MongoDB的索引" class="headerlink" title="MongoDB的索引"></a>MongoDB的索引</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>索引就是用来加速查询的。数据库索引与书籍的索引类似：有了索引就不需要翻遍整本书，数据库则可以直接在索引中查找，使得查找速度能提高几个数量级。在索引中找到条目以后，就可以直接跳转到目标文档的位置。</p><p>类似字典中拼音部首。</p><h3 id="普通索引相关命令"><a href="#普通索引相关命令" class="headerlink" title="普通索引相关命令"></a>普通索引相关命令</h3><ul><li>为某个键创建索引</li></ul><p>默认为id创建索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.ensureIndex(&#123;键值:1&#125;)</span><br></pre></td></tr></table></figure><ul><li>查看关于索引的相关信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.stats()</span><br></pre></td></tr></table></figure><ul><li>查看查询使用索引的情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.find(&#123;键值:value&#125;).explain()</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.ropIndex(&#123;键值:1&#125;)</span><br></pre></td></tr></table></figure><p>删除集合，也会将集合中的索引全部删除</p><h3 id="唯一索引相关命令"><a href="#唯一索引相关命令" class="headerlink" title="唯一索引相关命令"></a>唯一索引相关命令</h3><ul><li>创建唯一索引 </li></ul><p>保证每个键的唯一性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 查看关于索引的相关信息</span><br><span class="line"></span><br><span class="line">```db.集合名称.stats()</span><br></pre></td></tr></table></figure><ul><li>查看查询使用索引的情况</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 删除索引</span><br><span class="line"></span><br><span class="line">```db.集合名称.dropIndex(&#123;键值:1&#125;)</span><br></pre></td></tr></table></figure><p>删除集合，也会将集合中的索引全部删除</p><h2 id="MongoDB的复制"><a href="#MongoDB的复制" class="headerlink" title="MongoDB的复制"></a>MongoDB的复制</h2><h3 id="MongoDB的Master-Slave主从复制（已抛弃）"><a href="#MongoDB的Master-Slave主从复制（已抛弃）" class="headerlink" title="MongoDB的Master-Slave主从复制（已抛弃）"></a>MongoDB的Master-Slave主从复制（已抛弃）</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的Master-Slave主从复制1.png" alt="MongoDB的Master-Slave主从复制1"></p><h4 id="为什么需要复制"><a href="#为什么需要复制" class="headerlink" title="为什么需要复制"></a>为什么需要复制</h4><ol><li>单节点故障（主备）</li><li>读写分离（主从）</li></ol><h4 id="MongoDB的复制架构"><a href="#MongoDB的复制架构" class="headerlink" title="MongoDB的复制架构"></a>MongoDB的复制架构</h4><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的Master-Slave主从复制2.png" alt="MongoDB的Master-Slave主从复制2"></p><h4 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li>准备3个数据文件目录</li></ol><p>mongodata1(主）mongodata2(从）mongodata3(从）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─mongodb</span><br><span class="line">│  └─bin</span><br><span class="line">├─mongodbdata</span><br><span class="line">│  ├─diagnostic.data</span><br><span class="line">│  └─journal</span><br><span class="line">├─mongodbdata1 #</span><br><span class="line">├─mongodbdata2 #</span><br><span class="line">├─mongodbdata3 #</span><br><span class="line">├─mongodetc</span><br><span class="line">└─mongodlog</span><br></pre></td></tr></table></figure><ol><li>​</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath="G:/mongodb/mongodbdata" --master --port 11111</span><br><span class="line"></span><br><span class="line">mongod --dbpath="G:/mongodb/mongodbdata2" --slave --port 22222 --source 127.0.0.1:11111</span><br><span class="line"></span><br><span class="line">mongod --dbpath="G:/mongodb/mongodbdata3"  --slave –-port 33333 --source 127.0.0.1:11111</span><br></pre></td></tr></table></figure><h3 id="MongoDB的Replication-Set副本集（已抛弃）"><a href="#MongoDB的Replication-Set副本集（已抛弃）" class="headerlink" title="MongoDB的Replication Set副本集（已抛弃）"></a>MongoDB的Replication Set副本集（已抛弃）</h3><h4 id="MongoDB主从复制的问题"><a href="#MongoDB主从复制的问题" class="headerlink" title="MongoDB主从复制的问题"></a>MongoDB主从复制的问题</h4><p>主节点宕机，从节点不能对外提供服务，只能作为数据的备份</p><h4 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h4><ol><li>准备3个数据文件目录 </li></ol><p>mongodata1(主）mongodata2(从）mongodata3(从）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─mongodb</span><br><span class="line">│  └─bin</span><br><span class="line">├─mongodbdata</span><br><span class="line">│  ├─diagnostic.data</span><br><span class="line">│  └─journal</span><br><span class="line">├─mongodbdata1 #</span><br><span class="line">├─mongodbdata2 #</span><br><span class="line">├─mongodbdata3 #</span><br><span class="line">├─mongodetc</span><br><span class="line">└─mongodlog</span><br></pre></td></tr></table></figure><ol><li>​</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod -port 11111 --dbpath="d:\mongodata1" --replSet baizhi</span><br><span class="line">mongod -port 22222 --dbpath="d:\mongodata2" --replSet baizhi</span><br><span class="line">mongod -port 33333 --dbpath="d:\mongodata3" --replSet baizhi</span><br></pre></td></tr></table></figure><ol><li>​</li></ol><p>第一个服务器启动后作主节点执行下列代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config_baizhi=&#123;"_id":"baizhi","members":[&#123;_id:0,host:"localhost:11111"&#125;,&#123;_id:1,host:"localhost:22222"&#125;, &#123;_id:2,host:"localhost:33333"&#125;]&#125;;</span><br><span class="line">rs.initiate(config_baizhi);</span><br></pre></td></tr></table></figure><blockquote><p>从节点需要执行 <code>rs.slaveOK()</code> 实现可读<br>查看节点状态 <code>rs.status()</code></p></blockquote><h2 id="MongoDB的分片"><a href="#MongoDB的分片" class="headerlink" title="MongoDB的分片"></a>MongoDB的分片</h2><h3 id="为什么需要分片"><a href="#为什么需要分片" class="headerlink" title="为什么需要分片"></a>为什么需要分片</h3><p>一千万个文档中查找一条数据</p><p>将一千万个数据分成十个节点（服务器）每个100万条</p><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的分片-为什么需要分片.png" alt="MongoDB的分片-为什么需要分片"></p><ul><li>好处</li></ul><p>提高查询效率，提高并发量</p><h3 id="片键（分片的依据）"><a href="#片键（分片的依据）" class="headerlink" title="片键（分片的依据）"></a>片键（分片的依据）</h3><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的分片-片键.png" alt="MongoDB的分片-片键"></p><h3 id="分片架构"><a href="#分片架构" class="headerlink" title="分片架构"></a>分片架构</h3><p>先从ConfigDB读取片键后去查询</p><p><img src="/2018/04/21/2018-4-21-Mongodb学习笔记/MongoDB的分片-分片架构.png" alt="MongoDB的分片-分片架构"></p><h3 id="开发步骤-2"><a href="#开发步骤-2" class="headerlink" title="开发步骤"></a>开发步骤</h3><ul><li>准备三个数据库，configdb（配置库）、shard1（数据库1）、shard2（数据库2）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath="d:/configdb" --port 11111</span><br><span class="line">mongod --dbpath="d:/shard1" –port 22222</span><br><span class="line">mongod --dbpath="d:/shard2" –port 33333</span><br></pre></td></tr></table></figure><ul><li>启动mongos服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongos --port 44444 --configdb localhost:11111</span><br></pre></td></tr></table></figure><ul><li>登录到mongos</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo localhost:44444/admin</span><br></pre></td></tr></table></figure><ul><li>指定存储数据的节点</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;addshard:"localhost:22222",allowLocal:true&#125;)db.runCommand(&#123;addshard:"localhost:33333",allowLocal:true&#125;)</span><br></pre></td></tr></table></figure><ul><li>指定分片的数据库</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;"enablesharding":"baizhi"&#125;)</span><br></pre></td></tr></table></figure><ul><li>指定分片的集合与片键</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.runCommand(&#123;"shardcollection":"baizhi.users","key":&#123;"name":1&#125;&#125;)</span><br></pre></td></tr></table></figure><ul><li>数据插入测试</li></ul><blockquote><p>mongodb支持javascript语法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i=0;i&lt;100000;i++) &#123;</span><br><span class="line">    db.users.insert(&#123;name:&quot;hibiscidai&quot;+i&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进入不同数据库节点进行统计数据查询，片键决定分区存储大小，根据实际需求。</p><h2 id="MongoDB的JavaDriver"><a href="#MongoDB的JavaDriver" class="headerlink" title="MongoDB的JavaDriver"></a>MongoDB的JavaDriver</h2><h2 id="MongoDB数据结构在java中的映射存储"><a href="#MongoDB数据结构在java中的映射存储" class="headerlink" title="MongoDB数据结构在java中的映射存储"></a>MongoDB数据结构在java中的映射存储</h2><h3 id="DBObject对象"><a href="#DBObject对象" class="headerlink" title="DBObject对象"></a>DBObject对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;name:<span class="string">"suns"</span>,pwd:<span class="string">"123"</span>&#125;</span><br><span class="line">↓</span><br><span class="line">Map.put(<span class="string">"name"</span>,<span class="string">"suns"</span>)</span><br><span class="line">↓</span><br><span class="line">DBObject</span><br><span class="line">↓</span><br><span class="line">BasicDBObject.put(<span class="string">"name"</span>,<span class="string">"suns"</span>)</span><br></pre></td></tr></table></figure><h3 id="BasicDBList对象-集合"><a href="#BasicDBList对象-集合" class="headerlink" title="BasicDBList对象(集合)"></a>BasicDBList对象(集合)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"suns"</span>,<span class="string">"date1"</span>,<span class="string">"date2"</span>]</span><br><span class="line">↓</span><br><span class="line">ArrayList</span><br><span class="line">↓</span><br><span class="line">BasicDBlist.add(<span class="string">"suns);</span></span><br></pre></td></tr></table></figure><h2 id="开发步骤-3"><a href="#开发步骤-3" class="headerlink" title="开发步骤"></a>开发步骤</h2><ul><li>导入jar包</li><li>创建连接对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MongoClient mongo = <span class="keyword">new</span> MongoClient(ip,port);</span><br></pre></td></tr></table></figure><ul><li>获取数据对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DB db = mongo.getDB(“dbname”);</span><br></pre></td></tr></table></figure><ul><li>获得Collection对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DBCollection dbCollection = db.getCollection(“collectionName”);</span><br></pre></td></tr></table></figure><ul><li>调用DBCollection对象的相关方法，完成CURD</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dbCollection.insert()→db.users.insert()</span><br><span class="line">dbCollection.find()→db.users.find()</span><br><span class="line">dbCollection.findOne()→db.users.findOne()</span><br><span class="line">dbCollection.update()→db.users.update()</span><br><span class="line">dbCollection.remove()→db.users.remove()</span><br></pre></td></tr></table></figure><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h3 id="插入一条文档（单条数据）"><a href="#插入一条文档（单条数据）" class="headerlink" title="插入一条文档（单条数据）"></a>插入一条文档（单条数据）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.users.insert(&#123;name:"suns",pwd:"123""&#125;);</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testinsert1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//连接到MOingoDB数据库</span></span><br><span class="line">        mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"127.0.0.1"</span>,<span class="number">27017</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取操作的目标数据库</span></span><br><span class="line">        DB db = mogoClient.getDB(<span class="string">"hibiscidai"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取插入的集合目标</span></span><br><span class="line">        DBcollection collection = db.getCollection(<span class="string">"users"</span>);</span><br><span class="line">        </span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line">        DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">        basicDBObject.put(<span class="string">"name"</span>,<span class="string">"hibiscidai"</span>);</span><br><span class="line">        basicDBObject.put(<span class="string">"age"</span>,<span class="string">"20"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行操作</span></span><br><span class="line">        collection.insert(basicDBObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">        mongoClient.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入一条带集合的文档（带集合的单条数据）"><a href="#插入一条带集合的文档（带集合的单条数据）" class="headerlink" title="插入一条带集合的文档（带集合的单条数据）"></a>插入一条带集合的文档（带集合的单条数据）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//db.users.insert(&#123;name:"suna",post:"1,6,8,10"&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testinsert2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//连接到MOingoDB数据库</span></span><br><span class="line">        mongoClient = <span class="keyword">new</span> MongoClient(<span class="string">"127.0.01"</span>,<span class="number">27017</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取操作的数据库</span></span><br><span class="line">        DB db = mogoClient.getDB(<span class="string">"hibiscidai"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取插入的集合目标</span></span><br><span class="line">        DBcollection collection = db.getCollection(<span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备数据</span></span><br><span class="line">        DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">        basicDBObject.put(<span class="string">"name"</span>,<span class="string">"suns"</span>)</span><br><span class="line">        BasicDBList basicDBList = <span class="keyword">new</span> BasicDBList();</span><br><span class="line">        basicDBList.add(<span class="number">1</span>);</span><br><span class="line">        basicDBList.add(<span class="number">6</span>);</span><br><span class="line">        basicDBList.add(<span class="number">8</span>);</span><br><span class="line">        basicDBList.add(<span class="number">10</span>);</span><br><span class="line">        basicDBObject.put(<span class="string">"post"</span>,basicDBList);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行操作</span></span><br><span class="line">        collection.insert(basicDBObject);</span><br><span class="line">&#125;  <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">        mongoClient.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="针对重复冗余操作代码进行封装工具类"><a href="#针对重复冗余操作代码进行封装工具类" class="headerlink" title="针对重复冗余操作代码进行封装工具类"></a>针对重复冗余操作代码进行封装工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MongoUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">// 一次连接设置</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> MongoClient mongonClient;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取集合</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DBCollection <span class="title">getCollection</span><span class="params">(String ip, Integer port, String dbName, String collectionName)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">DBCollection dBCollection = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">mongonClient = <span class="keyword">new</span> MongoClient(ip, port.intValue());</span><br><span class="line"><span class="comment">// 获取数据库</span></span><br><span class="line">DB getDb = mongonClient.getDB(dbName);</span><br><span class="line"><span class="comment">// 获取插入的目标集合</span></span><br><span class="line">dBCollection = getDb.getCollection(collectionName);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> dBCollection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mongonClient.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一次插入多个文档（多行数据插入）"><a href="#一次插入多个文档（多行数据插入）" class="headerlink" title="一次插入多个文档（多行数据插入）"></a>一次插入多个文档（多行数据插入）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testinsert3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">MongoClient mongoClient = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"hibiscidai"</span>, <span class="string">"users"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建数据</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"hibiscidai1"</span>);</span><br><span class="line">DBObject basicDBObject1 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject1.put(<span class="string">"name"</span>, <span class="string">"hibiscidai2"</span>);</span><br><span class="line">DBObject basicDBObject2 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject2.put(<span class="string">"name"</span>, <span class="string">"hibiscidai3"</span>);</span><br><span class="line"><span class="comment">// 创建list集合接收DBObject</span></span><br><span class="line">List&lt;DBObject&gt; l = <span class="keyword">new</span> ArrayList&lt;DBObject&gt;();</span><br><span class="line">l.add(basicDBObject);</span><br><span class="line">l.add(basicDBObject1);</span><br><span class="line">l.add(basicDBObject2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.insert(l);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有条件删除"><a href="#有条件删除" class="headerlink" title="有条件删除"></a>有条件删除</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.remove(&#123;name:"zkf1"&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testdelete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取对应集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject对象</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();<span class="comment">// &#123;&#125;</span></span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"zkf1"</span>);</span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.remove(basicDBObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除所有"><a href="#删除所有" class="headerlink" title="删除所有"></a>删除所有</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.remove(&#123;&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testdelte2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject对象</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();<span class="comment">// &#123;&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.remove(basicDBObject);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.update(&#123;name:"zkf1"&#125;,&#123;$set:&#123;age:78&#125;&#125;,0,1)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testupdate1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"zkf1"</span>);<span class="comment">// &#123;name:"zkf1"&#125;</span></span><br><span class="line">DBObject basicDBObject2 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject2.put(<span class="string">"age"</span>, <span class="number">78</span>);<span class="comment">// &#123;age:78&#125;</span></span><br><span class="line">DBObject basicDBObject3 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject3.put(<span class="string">"$set"</span>, basicDBObject2);<span class="comment">// &#123;$set:&#123;age:78&#125;&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">collection.update(basicDBObject, basicDBObject3, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询所有"><a href="#查询所有" class="headerlink" title="查询所有"></a>查询所有</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find();</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfind</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 执行命令</span></span><br><span class="line">DBCursor dbCursor = collection.find();</span><br><span class="line"><span class="comment">// 每一个DBOBject对象对应一个文档</span></span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有条件的查询1"><a href="#有条件的查询1" class="headerlink" title="有条件的查询1"></a>有条件的查询1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find(&#123;name:"zkf3"&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfind1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject对象</span></span><br><span class="line">BasicDBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"name"</span>, <span class="string">"zkf3"</span>);<span class="comment">// &#123;name:"zkf3"&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">DBCursor dbCursor = collection.find(basicDBObject);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有条件查询2"><a href="#有条件查询2" class="headerlink" title="有条件查询2"></a>有条件查询2</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find(&#123;age:&#123;"$gte":38&#125;&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfind2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"$gte"</span>, <span class="number">38</span>);<span class="comment">// &#123;"$gte":38&#125;</span></span><br><span class="line">DBObject basicDBObject2 = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject2.put(<span class="string">"age"</span>, basicDBObject);<span class="comment">// &#123;age:&#123;"$gte":38&#125;&#125;</span></span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">DBCursor dbCursor = collection.find(basicDBObject2);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find().skip(0).limit(3)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testfen</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 执行操作</span></span><br><span class="line">DBCursor dbCursor = collection.find().skip(<span class="number">3</span>).limit(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.find().sort(&#123;age:-1&#125;)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 创建BasicDBObject</span></span><br><span class="line">DBObject basicDBObject = <span class="keyword">new</span> BasicDBObject();</span><br><span class="line">basicDBObject.put(<span class="string">"age"</span>, <span class="number">1</span>);<span class="comment">// &#123;age:-1&#125;</span></span><br><span class="line"><span class="comment">// 执行操作命令</span></span><br><span class="line">DBCursor dbCursor = collection.find().sort(basicDBObject);</span><br><span class="line"><span class="keyword">for</span> (DBObject dbObject : dbCursor) &#123;</span><br><span class="line">System.out.println(dbObject);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// db.users.count()</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testcount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 获取目标集合</span></span><br><span class="line">DBCollection collection = MongoUtil.getCollection(<span class="string">"127.0.0.1"</span>, <span class="number">27017</span>, <span class="string">"baizhi"</span>, <span class="string">"users"</span>);</span><br><span class="line"><span class="comment">// 执行操作命令</span></span><br><span class="line"><span class="keyword">long</span> l = collection.count();</span><br><span class="line">System.out.println(l);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭连接</span></span><br><span class="line">MongoUtil.closeConnection();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Mongodb学习笔记
    
    </summary>
    
      <category term="数据库" scheme="http://hibiscidai.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Mongodb" scheme="http://hibiscidai.com/tags/Mongodb/"/>
    
      <category term="集群" scheme="http://hibiscidai.com/tags/%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-10-装饰器模式</title>
    <link href="http://hibiscidai.com/2018/04/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-10-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/04/18/设计模式-10-装饰器模式/</id>
    <published>2018-04-17T16:00:00.000Z</published>
    <updated>2018-06-20T15:21:33.521Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/18/设计模式-10-装饰器模式/设计模式10.png" alt="设计模式10"></p><p>设计模式-10-装饰器模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-10-装饰器模式"><a href="#设计模式-10-装饰器模式" class="headerlink" title="设计模式-10-装饰器模式"></a>设计模式-10-装饰器模式</h1><h1 id="装饰器模式-Decorator-Pattern"><a href="#装饰器模式-Decorator-Pattern" class="headerlink" title="装饰器模式(Decorator Pattern)"></a>装饰器模式(Decorator Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>动态地给一个对象添加一些额外的职责。<br>就增加功能来说装饰器模式相比生成子类更为灵活。</p><blockquote><p>The Intent of this pattern is to add itional responsibilities dynamically to an object.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>在不想增加很多子类的情况下扩展类。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><ul><li>Component 类充当抽象角色，不应该具体实现。 </li><li>修饰类引用和继承 Component 类，具体扩展类重写父类方法。</li></ul><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将具体功能职责划分，同时继承装饰者模式。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>多层装饰比较复杂。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>扩展一个类的功能。</li><li>动态增加功能，动态撤销。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>可代替继承。</p><blockquote><p>动态撤销，扩展一个类的功能。</p></blockquote><blockquote><p>可以将装饰器视为一个退化的，仅有一个组件的组合。</p></blockquote><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>对于蛋糕，创建蛋糕与口味后进行装饰。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/18/设计模式-10-装饰器模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern10.decorator.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheeseCake</span> <span class="keyword">extends</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Here is CheeseCake"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FruitCake</span> <span class="keyword">extends</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Here is FruitCake"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorater</span> <span class="keyword">extends</span> <span class="title">Cake</span> </span>&#123;</span><br><span class="line">Cake c;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorater</span><span class="params">(Cake c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.c = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">c.show();</span><br><span class="line">funExtend();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithFlower</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WithFlower</span><span class="params">(Cake c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"WithFlower"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WithFlat</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WithFlat</span><span class="params">(Cake c)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"WithFlat"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Cake c = <span class="keyword">new</span> CheeseCake();</span><br><span class="line">Decorater d = <span class="keyword">new</span> WithFlat(c);</span><br><span class="line">d.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Here is CheeseCake</span><br><span class="line">WithFlat</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>画刷画笔</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/18/设计模式-10-装饰器模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern10.decorator.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Painting</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VanGogh</span> <span class="keyword">extends</span> <span class="title">Painting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Here is VanGogh"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorater</span> <span class="keyword">extends</span> <span class="title">Painting</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Painting p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Decorater</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.p = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p.show();</span><br><span class="line">funExtend();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Border</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Border</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"With Border"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Masking</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Masking</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"With Masking"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMask</span> <span class="keyword">extends</span> <span class="title">Decorater</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WaterMask</span><span class="params">(Painting p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"With WaterMask"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Painting p = <span class="keyword">new</span> VanGogh();</span><br><span class="line">Decorater d = <span class="keyword">new</span> Border(p);</span><br><span class="line">d.show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Here is VanGogh</span><br><span class="line">With Border</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-10-装饰器模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
