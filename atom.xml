<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HibisciDai</title>
  
  <subtitle>Waiting/Patience/Trusting/Times All Takes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hibiscidai.com/"/>
  <updated>2018-08-21T14:12:33.748Z</updated>
  <id>http://hibiscidai.com/</id>
  
  <author>
    <name>HibisciDai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么byte类型的范围是-128~127</title>
    <link href="http://hibiscidai.com/2018/08/21/%E4%B8%BA%E4%BB%80%E4%B9%88byte%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%8C%83%E5%9B%B4%E6%98%AF-128~127/"/>
    <id>http://hibiscidai.com/2018/08/21/为什么byte类型的范围是-128~127/</id>
    <published>2018-08-21T13:58:28.107Z</published>
    <updated>2018-08-21T14:12:33.748Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为什么byte类型的范围是-128~127，补码，原码，反码。</p><a id="more"></a><p>[TOC]</p><h1 id="为什么byte类型的范围是-128-127"><a href="#为什么byte类型的范围是-128-127" class="headerlink" title="为什么byte类型的范围是-128~127"></a>为什么byte类型的范围是-128~127</h1><p><code>原码</code><br>实际二进制的数值  正数：<code>0 0000001</code> 负数 <code>1 0000001</code> </p><p><code>反码</code><br>正数的反码依然是其原码，负数的反码是负数原码除符号位以外的按位取反。</p><p><code>补码</code><br>实际上计算机真实存储的二进制 </p><h2 id="正数"><a href="#正数" class="headerlink" title="正数"></a>正数</h2><p>在计算机中用原码表示</p><p>反码 = 原码<br>补码 = 原码</p><h2 id="负数"><a href="#负数" class="headerlink" title="负数"></a>负数</h2><p>在计算机中用原码表示</p><p>反码 = 负数原码除符号位以外的按位取反</p><p>例  原码 <code>1 0000001</code> 反码 <code>1 1111110</code></p><p>补码 = 负数的反码加1</p><p>例  原码 <code>1 0000001</code>   反码 <code>1 1111110</code>   补码 <code>1 1111111</code></p><h3 id="负数的补码第二种运算方式"><a href="#负数的补码第二种运算方式" class="headerlink" title="负数的补码第二种运算方式"></a>负数的补码第二种运算方式</h3><ul><li>-1 取-1绝对值的原码 <code>0 0000001</code></li><li>将负数绝对值得原码 每位按位取反（包括符号位）+1 得出负数补码 <code>1 1111110</code> +1 = <code>1 1111111</code></li></ul><blockquote><p>注：当我们通过负数原码去结算负数补码时，取反时符号位不参与取反<br>    当我们通过负数绝对值的原码计算补码时，取反时符号位参与取反</p></blockquote><p>验证：计算存储的是补码 在计算机的底层只有加法，没有减法</p><p><code>一切的加减运算 实际上都是补码的相加运算</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0000001</span><br><span class="line">1 1111111</span><br><span class="line">0 0000000</span><br></pre></td></tr></table></figure><p>8位</p><p>最大正值：<code>0 1111111</code> 127<br>补码：<code>0 1111111</code></p><p>最小正值：<code>0 0000001</code> 1<br>补码<code>0 0000001</code></p><p>0：<code>0 0000000 0</code> 所谓的正0 是实际上的0<br>规定 补码<code>0 0000000</code><br><code>1 0000000</code> -128  </p><p>最大负值：<code>1 0000001</code> -1 补码<code>1 1111111</code><br>最小负值：<code>1 1111111</code> -127 补码<code>1 0000001</code></p><p>负数补码范围：<code>10000001</code>~<code>11111111</code><br>正数的补码范围：<code>00000001</code>~<code>0111111</code><br><code>00000000</code> 0的补码<br><code>10000000</code> 推算：<code>10000000</code> -1<br><code>01111111</code>    全位数取反 <code>10000000</code> 128</p>]]></content>
    
    <summary type="html">
    
      为什么byte类型的范围是-128~127，补码，原码，反码。
    
    </summary>
    
      <category term="计算机基础" scheme="http://hibiscidai.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://hibiscidai.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>书单语录</title>
    <link href="http://hibiscidai.com/2018/08/06/%E4%B9%A6%E5%8D%95%E8%AF%AD%E5%BD%95/"/>
    <id>http://hibiscidai.com/2018/08/06/书单语录/</id>
    <published>2018-08-05T16:00:00.000Z</published>
    <updated>2018-08-21T14:05:28.738Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/08/06/书单语录/书单语录.jpg" alt="书单语录"></p><p>书单语录</p><p>《悟空传》、《西游日记》、《一个叫欧维的男人选择去死》、《我是你的男人》、《岛上书店》、《无声告白》</p><a id="more"></a><p>[TOC]</p><h1 id="书单语录"><a href="#书单语录" class="headerlink" title="书单语录"></a>书单语录</h1><h2 id="《悟空传》"><a href="#《悟空传》" class="headerlink" title="《悟空传》"></a>《悟空传》</h2><blockquote><p>我看晚霞的时候不做任何事!</p></blockquote><blockquote><p>贪怒杀伐都是罪，爱恨痴缠必有相欠。活着，即是罪孽;有情，就会相欠。</p></blockquote><blockquote><p>原来一生一世那么短暂，原来当你发现所爱的，就应该不顾一切地去追去。因为生命随时都会终止，命运是大海，当你能够畅游时，你就要纵情游向你的所爱，因为你不知道狂流什么时候会到来，卷走一切希望与梦想。</p></blockquote><blockquote><p>也许每个人出生时都以为这天地是为他一个人而存在的，当他发现自己错的时候，他便开始长大了。</p></blockquote><blockquote><p>这个天地，我来过，我奋斗过，我深爱过，我不在乎结局。</p></blockquote><blockquote><p>生我何用?不能欢笑。灭我何用?不减狂骄。</p></blockquote><blockquote><p>我有一个梦，我想我飞起时，那天也让开路;我入海时，水也分成两边;重仙诸神，见我也称兄弟;无忧无虑，天下再无无可拘我之物，再无可管我之人，再无我到不了之处，再无我做不成之事，再无……</p></blockquote><blockquote><p>这紧箍是将人的心思束缚，将欲望的痛苦化为身体的痛苦，你若如诸神佛到达无我之境，自然就不会受紧箍之苦。</p></blockquote><blockquote><p>我要如何做，才能达无我之境。</p></blockquote><blockquote><p>忘记你自己，放下你的所爱及所恨。</p></blockquote><blockquote><p>我可以忘了我自己。可是，我忘不了东海水，忘不了花果山，忘不了西天路，忘不了路上的人。</p></blockquote><blockquote><p>然而，在神的字典里，所谓”解脱”，不过就是死亡;所谓”正果”，不过就是幻灭;所谓”成佛”，不过就是放弃所有的爱与理想，变成一座没有灵魂的塑像。</p></blockquote><blockquote><p>忘记你自己，放下你的所爱及所恨。</p></blockquote><blockquote><p>这个世界上本来是没有路的，因为有人要到他想去的地方，所以他们需要一条路，其实路通到哪儿也没关系。</p></blockquote><blockquote><p>为什么恋家的人反而要流浪呢。</p></blockquote><blockquote><p>因为……这世上没有什么能永远不失去，可有些人不相信这些，所以他们失去的，他们要不停地找回来，找一辈子。</p></blockquote><blockquote><p>能记得你的人已经不在了，我也已经不在了，没有人再爱着你也没有人再恨着你，一切不过是虚无，我也只是虚无。</p></blockquote><blockquote><p>从此世上再没有人想起我，从此世上再没有我了。</p></blockquote><blockquote><p>纵然你可以留得住你自己，你却留不住你身边的东西，看着身边所有的东西都改变了，只剩下自己，那种无法承受的沉重是时间，没有人能承受那种重量。</p></blockquote><blockquote><p>也许诸神以为山是永远不会崩塌的。<br>但杨戬知道没有什么是永远的。<br>无论是华山，还是五行山。<br>沧海桑田，不过是一瞬间。<br>不过书五百年。<br>杨戬在等着那一天。</p></blockquote><h2 id="《西游日记》"><a href="#《西游日记》" class="headerlink" title="《西游日记》"></a>《西游日记》</h2><blockquote><p>如果你不能再拥有，唯一能做的，就是不再忘记。</p></blockquote><blockquote><p>世界这么大，我们注定无处可逃。<br>未来会怎样，究竟有谁会知道。<br>幸福是否只是一种传说，永远都找不到。</p></blockquote><blockquote><p>别去灵山了，那里既无风，亦无尘，更无心动。不如随我在这天地间吹拂游走，做个自由的人。</p></blockquote><blockquote><p>这里没有自由的人，只有不会愤怒的猴子、不懂爱情的猪，还有分不清东南西北的和尚。</p></blockquote><blockquote><p>因为我不像你，永远都不知道自己要去哪。</p></blockquote><blockquote><p>我这残躯，这一生，都用来为天下人寻路。而你们这长生不老之躯，千秋万代，都只为守护一座泥胎。天下谁敢说”值得”二字?我敢。</p></blockquote><blockquote><p>我唯有继续前行，去寻找那极乐的净土。然而那净土不在人间。我不知这是勇气，还是逃避。</p></blockquote><blockquote><p>只真忘了，还是不想记起?</p></blockquote><blockquote><p>西游，就是抛弃一切，走向终点的过程。<br>而我们四个，也终将忘记那一切。因为我们一路苦苦追求的，就是忘却。</p></blockquote><blockquote><p>不能告诉他那些淋漓的血，绝望的牺牲，那一片废墟和无尽的荒凉，全来自当年的热爱与理想。<br>我们都回不去了。<br>而前路早已注定，路的尽头，也是一片空旷和无尽的荒凉。</p></blockquote><blockquote><p>所谓法力无边，不过是利用人心的弱点罢了。越是要无拘无束的，便越是要用万钧重压，越是年少无知的，便越是要让他痛苦害怕。这便是神仙的教化之道，直到天下全都是呼喊”我听话了”的人为止。</p></blockquote><blockquote><p>因为一亿亿人中，也许只有一万人敢走这条路，也许只有一百人活着到了终点，也许只有十个人还能活着再走回来，也许只有一个人侥幸能成功带回点什么。<br>所以这根本不是什么成功的路，只是冒险者的路而已。人们只看到了一个人的成功，却没有看见其他九千九百九十九人的失败。<br>如果你想要的是成功，那么还是安心做点小生意，活着努力上班尊敬领导，比行十万里路去找一样不知道是否存在的东西靠谱得多。<br>我走这条路，不是为成功，因为成功的概率太小了。<br>只是如果我不西行，又有谁去西行呢?</p></blockquote><blockquote><p>一个人想拥有的最大权力，无过于”说什么就是什么”。<br>有了这种权力，他就如同神一般。<br>但可怕的是，世人却往往喜欢别人来代替他们思考，来直接告诉他们答案是什么，应该做什么，不应该做什么。<br>如果人只需要听别人说什么就做什么，这是多么省心和幸福对我事！<br>就像认为在佛祖脚下一拜，就能解决生命中所有苦难一样。<br>你不自救，没人能救你。佛也不行。</p></blockquote><blockquote><p>一位少女对青年说，若是你能在窗外守候一百天，我就与你交往。那青年守了九十九天，却在最后一天夜里离去了。<br>我是心诚，却不一定要为你。<br>你问我信佛吗?这很难向你解释。我心中自有我信仰的那个佛，却不是所以为的那个，更不是每天关起庙门就打开功德箱数钞票两眼放光的那个。<br>人人都说信佛，但其实大家连信佛是什么都搞不清楚。<br>在大多数人的理解里，佛就是一个收了人钱就要替人办事的”教父”。<br>但佛往往收了你的钱也不替你办事。这是为什么呢?因为你的钱根本就没有到佛那儿，在和尚那一级就分光了，连住持都只能分到一成半。<br>那佛凭什么还要替你办事呢?<br>或者，那佛又凭什么就不替你办事呢?<br>普度众生，是否只是一个谎言?</p></blockquote><blockquote><p>她说:”你要找的，和我要找的一样，都不过是幸福而已。”</p></blockquote><blockquote><p>我为什么要一路西行?为了那个虚无缥缈的理想，要放弃眼前的幸福?<br>是否我真的在害怕着什么?<br>你究竟为什么要离开?<br>为什么呢?<br>是因为要追求一个彼岸?<br>还是仅仅害怕一个答案?<br>我有勇气去走一条不归的路，却没有勇气去许一个白头到老的承诺。<br>所以我注定是不配得到爱的人吧。<br>我想我会一直孤单，就这样孤单一辈子。</p></blockquote><blockquote><p>以后你会遇到许多事、许多人。有些是你的朋友，后来却变成仇敌。有些是你的敌人，以后却不得不对他们低首。你会不甘心，但这世上有些事你永远做不到，有些敌人你永远打不败，无论你有多强。这个道理，你要明白。</p></blockquote><blockquote><p>天地何用?不能席被。风月何用?不能饮食。<br>纤尘何用?万物其中。变化何用?道法自成。<br>面壁何用?不见滔滔。棒喝何用?一头大包。<br>生我何用?不能欢笑。灭我何用，不减狂骄。</p></blockquote><blockquote><p>我不知道为什么要因为失去而忧伤，为什么为了时光短暂而愁虑。我要去找到那力量，让所有的生命都超越界限，让所有的花同时在大地上开放。让想飞的就能自由飞翔，让所有人和他们喜欢的永远在一起。</p></blockquote><blockquote><p>他为了不失去，失去了所有。</p></blockquote><blockquote><p>如果生命中的最后一刻能重新找回失落的一切，那么一切都值得。</p></blockquote><blockquote><p>我不能成佛。我要回去。因为我的故土不在这里。我是那样热爱那里，虽然那里的一切也许并不如这里美好。但我会回去，我会告诉他们这世界的样子，我要让那里的人拥有热情的向往与宽大的胸襟，我要看着他们生生不息，创造那梦想中的国度，那里有最黑暗、最悲凉、最苦难，也会有最灿烂、最伟大、最辉煌。我不后悔我生在那里，也不后悔我死在那里。</p></blockquote><blockquote><p>我终于要回家了。<br>回望来路，一片茫茫。那些曾经的面孔，都已不在。<br>但我听见他们在呼喊:<br>“我在这里。”<br>“我在这里。”<br>“我在这里。”<br>他们在世界的每一处呼喊，在天空中，在海洋里，在我曾经和不曾踏足的道路上。他们呼喊，他们存在过，我记下他们的名字，然后将这些名字高高扬起，让他们随风而舞。<br>一个人要走过多少路，才能成为男子汉。<br>一只白鸽要飞过多少个海洋，她才会躺于沙滩上。<br>一座山要矗立多少年，它才会被冲刷到大海。<br>一群人要生存多少年，他们才会获得自由。<br>答案都飘在风中。</p></blockquote><blockquote><p>我明白了，原来只要有神存在，世上就不可能有极乐。因为他们把一切都贪婪地据为己有，因为他们用控制所有人的命运来威胁所有人……人们向他们膜拜，他们却将人视为奴隶与蝼蚁。<br>我要改变这个世界。</p></blockquote><blockquote><p>我不知道后世会怎样记述我们的故事，我想我终将倒在这条长路的某一个地方，因为从来都没有终点。<br>没有西天，没有极乐，只有永远无尽的长路，走着一代代不肯绝望的人。</p></blockquote><h2 id="《一个叫欧维的男人选择去死》"><a href="#《一个叫欧维的男人选择去死》" class="headerlink" title="《一个叫欧维的男人选择去死》"></a>《一个叫欧维的男人选择去死》</h2><blockquote><p>因为如今人人三十一岁，穿过分紧身的裤子，喝不惯正常咖啡，而且没人愿意承担责任。到处都是大把大把留着小胡子的人整天换工作、换女人、换车子。到处都是，眼镜都不带眨的。</p></blockquote><blockquote><p>然后他只是双手插兜站在那看着她，最后他小心地把手搭在那块大石头上，温柔地从这端轻抚到另一端，仿佛轻抚着她的肌肤。</p></blockquote><blockquote><p>“我想你。”他低声说。</p></blockquote><blockquote><p>六个月前，她去世了，但欧维还是每天两次走遍所有房间，摸摸暖气片，看她有没有悄悄把他们打开。</p></blockquote><blockquote><p>人们总说欧维眼里的世界非黑即白，而她是色彩，他的全部色彩。</p></blockquote><blockquote><p>失去某人以后总是会有一些奇怪的细节惹人怀念。都是极小的事情。她的笑容。她睡眠时翻身的样子。为她粉刷房间。</p></blockquote><blockquote><p>一个人的品质是由他的行为决定的，而不是他说的话。</p></blockquote><blockquote><p>每一条道路最终都会带领你到注定的归宿。</p></blockquote><blockquote><p>他觉得做人不能朝三暮四反复无常，就好像忠诚一文不值。如今换东西那叫一个快，怎么把东西造得坚固一点的知识反而显得多此一举。质量—早就没人在乎了。</p></blockquote><blockquote><p>这是一个还没过期就已经过时的世界。整个国家都在为没人能正经做事起立鼓掌，毫无保留地为平庸欢呼喝彩。</p></blockquote><blockquote><p>他发现自己很喜欢房子。可能主要是因为房子是可以理喻的。可以计算并在纸上画出来。不好好做防水就会漏，不好好做结构就会塌。房子是公平的，你付出多少，它就给你多少。很不幸的是，这些话很难用在人类身上。</p></blockquote><blockquote><p>生活不应该是现在这个样子，这就是他现在所有的感受。努力工作，自食其力，节衣缩食，买了第一辆萨博;接受教育，通过考试，应聘面试，拿到体面的工作，感恩，从不生病，按时缴税;洁身自好;洁身自好;邂逅一个女人 结婚;努力工作，升职;买一辆新型号的萨博;去银行，贷一笔还款期限为五年的款，买座太太觉得适合养育下一代的排屋;分期还款;节衣缩食;买新萨博;去饭店里播放外国音乐的地方度假，喝太太认为别具异国风味的红酒;然后回家继续工作，承担责任，自食其力，洁身自好。</p></blockquote><blockquote><p>她总是喜欢看他打领带，那眼神就好像他是世界上最帅的男人。他不知道如今她该怎么看他，他这个无业游民穿一身肮脏的西服死后与她相会时，会不会给她丢脸?他被电脑淘汰而无法保住一份稳定诚实的工作，她会不会因此觉得他是个傻瓜?她还会不会像过去那样看待他，视他为值得信赖的男人，一个可以承担责任、必要时还能修个热水器的男人?他成了这样一个没用的老头之后，她还会不会像过去一样喜欢他?</p></blockquote><blockquote><p>“只需要一缕阳光就能驱赶所有的阴霾。”一次，她问她为什么总是那么兴高采烈的时候，她说。</p></blockquote><blockquote><p>每个人的生命中总有那么一刻决定他们将成为什么样的人:是不是愿意让别人骑在头上。你不了解那个故事，就不了解那个人。</p></blockquote><blockquote><p>“明天晚上八点整，我在这等你。我要你穿上西装带我去饭馆。”一个周五的晚上，她下车后直截了当地说。</p></blockquote><blockquote><p>要是有人问起，他会说，在她之前，他没有生活。之后也没有。</p></blockquote><blockquote><p>有人说最优秀的人是从错误中重生的，他们后来通常比那些没有犯过错误的人更优秀。</p></blockquote><blockquote><p>之后，每当有朋友问她为什么会爱上他的时候，他都会回答，大多数人逃离火场，但欧维这样的男人会冲向火场。</p></blockquote><blockquote><p>“我想你。”他喃喃地说，眼眶中飞快地一丝光芒。</p></blockquote><blockquote><p>她哭了。一种久远的、难以慰藉的?哭钻刺着、撕扯着他们的内心，久久不息。时间、悲怆和愤懑交织着，凝聚成一片更漫长的黑暗。但如果让黑暗赢了这场战争，她也就不是索雅了。”不管忙着生存还是死亡，欧维。我们都必须继续走下去。”</p></blockquote><blockquote><p>每个人都必须知道他在为什么奋斗，他们这么说。</p></blockquote><blockquote><p>许多人会觉得和欣赏孤独的人生活在一起很困难。这会弄得那些自己无法忍受孤独的人很不舒服。但索雅不怎么抱怨。”你是什么样我照单全收。”她总是这么说，说到做到。</p></blockquote><blockquote><p>“但凡事都有个期限。”她经常会这么说。</p></blockquote><blockquote><p>索雅曾经说过，要理解欧维和鲁尼这样的男人，首先要理解他们是被困在错误时代中对我男人。他们这样的男人，对于生活只要求几样非常简单的事情，她说。头上一片屋顶，安静的街道，值得他们忠心耿耿的汽车品牌和女人。一份可以有所作为的工作，一套房子，里边的东西定期有个故障，好让他们修修补补。</p></blockquote><blockquote><p>“每个人都想有尊严地生活。对不同的人来说，尊严是不同的。”索雅曾说。对欧维和鲁尼这样的男人来说，尊严只是成年以后可以自力更生，把不需要依靠别人视为自己的权利。掌控中存在一种自豪感，明辨是非的自豪感，知道该走哪条路，知道该不该在哪儿拧上螺丝。欧维和鲁尼这样的人还留在靠行动而不是靠嘴说的年代，索雅总是那么说。</p></blockquote><blockquote><p>我们相信总能腾出时间来与他人一起做想做的事，说想说的话。然后突然有一天，发生了意外，我们就只好站在那儿，脑海总盘旋着一个词:如果。</p></blockquote><blockquote><p>认错很难，特别是错了很久以后。</p></blockquote><blockquote><p>官僚主义的妙处，在于首先违反官僚制度的总是你们这些官僚自己。</p></blockquote><blockquote><p>爱上一个人就像是搬进一座房子，一开始你会爱上新的一切，陶醉于拥有它的每一个清晨，就好像害怕会有人突然冲进房门指出这是个错误，你根本不该住得那么好。但经年累月房子的外墙开始陈旧，木板七翘八裂，你会因为它本该完美的不完美渐渐不再那么爱它。然后你渐渐谙熟所有的破绽和瑕疵。天冷的时候，如何避免钥匙卡在锁孔里;哪块地板踩上去的时候容易弯曲;怎么打开一扇橱门又恰好可以不让它嘎吱作响。这些都是会赋予你归属感的小秘密。有时也会忍不住想想，要是房子的地基本来就打歪了的话，还能有什么办法补救。</p></blockquote><blockquote><p>我尊重您不接受我当面道谢的意愿，但我想把您介绍给那些将永远感激您的勇气和无私行为的人。像您这样的人已经所剩无几了。</p></blockquote><blockquote><p>死亡是一桩奇怪的事情。人们终其一生都在假装它并不存在，尽管这是生命的最大动机之一。我们其中一些人有足够时间认识死亡，他们得以活得更努力、更执着、更壮烈。有些人却要等到它真正逼近时才意识到它的反义词有多美好。另一些人深受其困扰，在它宣布到来之前就早早地坐进等候室。我们害怕它，但我们更害怕它发生在身边的人身上。对死亡醉的的恐惧，在于它与我们擦肩而过，留下我们独自一人。</p></blockquote><blockquote><p>但当他不得不亲手埋葬世上唯一理解他的人时，还是会心碎欲裂。没有什么时间可以抚平这样的创伤。</p></blockquote><blockquote><p>时间是一桩奇怪的事情。大多数人只为了未来生活。几天之后，几周之后，或者几年。每个人一生中最恼人的那一刻可能就是突然意识到自己已经到了回忆比展望更多的年龄。当来日无多的时候，必须有别的动力让人活下去。或许是回忆。午后的阳光中牵着某人的手，鲜花绽放的花坛，周日的咖啡馆。或许是孙子孙女。人们为了别人的未来继续生活。索雅离开欧维的时候，他并没有一起死去。他只是不再活着。</p></blockquote><blockquote><p>悲伤是一桩奇怪的事情。</p></blockquote><h2 id="《我是你的男人》"><a href="#《我是你的男人》" class="headerlink" title="《我是你的男人》"></a>《我是你的男人》</h2><blockquote><p>圣徒般的悲悯和天才式的犹豫</p></blockquote><blockquote><p>他第一次意识到人生无常，原本单纯完整的内心，也第一次出现裂痕，不安或孤独，随即无声地钻入。</p></blockquote><blockquote><p>举止切勿轻浮。应有自己的特色，且要坚定不移地遵循这一特色。安静乃行动之本。声音要压低、压低、再压低，直接接近耳语。懂得稍事停顿。欲速则不达。</p></blockquote><blockquote><p>我爱黑夜，会时不时地沿着圣凯瑟琳大街走上几英里。走在大街上，我会憧憬起自己二十来岁时的情景，“穿着雨衣，戴着一顶帽檐压得很低的旧帽子，依稀只露出一双炯炯有神的眼睛。我的内心怀揣着一段不公的经历，我的脸庞高贵得看不出复仇的痕迹。我行走在夜间潮湿的林荫道上，被无数的观众同情……有两三个美丽的女人爱我，却永远都得不到我。”</p></blockquote><blockquote><p>他的强烈情感和过人能力是隐藏在表象之下的。</p></blockquote><blockquote><p>充分依赖女人的奉献、支持和滋养，而一旦她们的爱过了火，就及时抽身离开。</p></blockquote><blockquote><p>天赋是一种罕见的能力，拥有它的人能看到事物的本质，而不致受到愚弄。</p></blockquote><blockquote><p>盛怒和悲恸</p></blockquote><blockquote><p>当一个作家“迫切地想说些什么”时，其作品的主题就已经“无关紧要”了</p></blockquote><blockquote><p>随着年龄的增长，其他男孩都会受到来自父亲的雄性力量的影响，可我永远不会。</p></blockquote><blockquote><p>无论女人的爱多么能缓解孤独、祛除黑暗，他仍旧感到惴惴不安——“正如将军们在长期的和平状态下会感到不安一样”</p></blockquote><blockquote><p>对于一个热爱漂泊的男人来说，爱是承担不起的负累。</p></blockquote><blockquote><p>是为了灵魂的安康。</p></blockquote><blockquote><p>他从小就像当作家。对一个敏感而抑郁的人来说，作家可是最危险的几个行当之一。作家和诗人需要挖掘自己最深、最暗的里面。“不是我，而是诗人们发现了无意识。”弗洛伊德说。作家及诗人创作时，应纵容思绪嘈杂混乱，乃至纵身跃入混乱的深渊，艺期待能带着些美妙而有序的东西浮上来。一个忠于内心和文字的作家需要将自己“长期单独囚禁”，事实上，一个如莱昂纳德般认真、严谨、自律、抑郁的人，选择做一名作家，无异于将自己长期单独囚禁在由黑色大狗把门的土耳其监狱里。</p></blockquote><blockquote><p>你能做的只有等待。他不会东拉西扯地闲聊以打破沉默。他只说只做有价值有意义的事。他不会跟着别人的节奏走，比如他没有为了宣传自己而追着记着跑;他的魅力如磁石般强大，人们被他和他的想法吸引着，全部都围着他转。</p></blockquote><blockquote><p>艺术家与缪斯之间的关系向来是单边的:摄影师们“盗窃”着拍摄对象的灵魂;小说家们不知羞地以亲友为原型塑造着人物。</p></blockquote><blockquote><p>《苏珊》</p></blockquote><blockquote><p>我的生命中总有这样的人，可以让我汲取巨大的养分和安慰，可以让我去描绘。</p></blockquote><blockquote><p>忘了在哪里读到过，灵感不是我们创造出来的，而是自发前来的，几分之一秒过后，我们占有了稍纵即逝的它们。从某种意义上说，没有人拥有原创的想法。</p></blockquote><blockquote><p>你知道吗?30或35岁左右，是诗人自杀的高发期。</p></blockquote><blockquote><p>这段时间我终于明白了，这个世界是不会屈从于我的意志的。</p></blockquote><blockquote><p>每当我走进一间客房，关上房门，尚未开灯时，面对着这个舒服的、匿名的、怀有微妙敌意的环境，心中会 地升起一股奇妙的感觉—你在草地上找到了个好地方，接下来的三个小时甚至更久会有猎狗从你身旁狂奔而过—你将喝点酒，抽根烟，缓缓地剃去胡须。</p></blockquote><blockquote><p>一个悲伤的男人，用青春期的孤独和自怜换取着金钱。</p></blockquote><blockquote><p>在这样一个年头，无论是药物还是传统的信仰，都已无力再慰藉无数个迷惘的、寻找着答案的年轻灵魂。</p></blockquote><blockquote><p>他的歌至诚至真，且很私密，他并不愿意在大庭广众之下，强装真挚地演绎给陌生人听。</p></blockquote><blockquote><p>我希望自己的歌曲能通过专辑的形式传递给人们，而不是登上舞台表演它们。</p></blockquote><blockquote><p>你想从自己的生活状态中抽离出来，想遁入孤独中静静地思考，思考一切，包括你自己，她，它，他们。和你们一样，诗人也会这么想。但和你们不一样的是，诗人会将所思所想呈现在纸上。而和其他诗人不一样的是，莱昂纳德.科恩将诗歌化成了歌唱。</p></blockquote><blockquote><p>许多人都会陷入抑郁症，尤其是天生的创作者，事实上，越是有精神追求的人，越是有可能得抑郁症。对他们来说，最大的挑战，也许就是摆脱对往事及琐事的胡思乱想，赶紧投入工作。</p></blockquote><blockquote><p>要是你自以为自己很重要，你就写不出好诗了。</p></blockquote><blockquote><p>莱昂纳德德双眼迷离却明亮，人看上去萎靡不振却充满力量，像是一个走钢丝的人，随时都会摔下来，却又可能忽然展翅翱翔。</p></blockquote><blockquote><p>他是个谦逊的人，有颗哲学家的灵魂，热衷探索生命的意义。</p></blockquote><blockquote><p>肺痨患者般的虚弱神态，孤独而敏感的舞台形象。莱昂纳德制造出了弥散着脆弱和悔意的奇迹气氛。他的歌曲没有幽默，没有愉快，然而，一股阴郁的暖流扑面而来。</p></blockquote><blockquote><p>如果我是空的，我就能接纳东西;由于那些东西来自外部世界，我就不是孤身一人。我无法忍受这种孤独感。</p></blockquote><blockquote><p>他的歌词老练世故，他的旋律整齐有序，他的演绎风格平淡朴素，他的制作趣味低调含蓄。</p></blockquote><blockquote><p>某天我爱上了他，某晚我离开了他。</p></blockquote><blockquote><p>独自一人的感觉很好，独自一人的感觉很糟。</p></blockquote><blockquote><p>我多需要的只是一张桌子，一张椅子和一张床。</p></blockquote><blockquote><p>艺术家最好的作品在推出之初都是不受好评，得不到大家承认的。我会因此而挣扎—对于任何一个把大部分的自尊都放到作品里的人来说，它始终是一个问题。</p></blockquote><blockquote><p>你们支持哪一方，我真的并不关心。某个时刻，我们必须跨越分歧，明白我们是更高层次的动物。我不是在打消你们与当局斗争的积极性。双方都有出于好意的人。有人为自由而战，有人为安全而战。我将唱一首歌，歌颂将一代人紧紧系在一起的坚定信仰。</p></blockquote><blockquote><p>把音乐事业经营好需要强大且坚定的意志，但想把人生经营好，就是给我全世界的意志都无济于事，因为我太混蛋了……随着年龄的增长，我对推出作品兴趣渐增，因为我可以通过他们来完善我的性格，号令我的世界。我会陷入现实的泥沼，但我能在作品中回溯过去。</p></blockquote><blockquote><p>如果流行音乐世界设有“情感表达奖”，莱昂纳德.科恩将是无可争议的赢家。他庄严地宣泄出了所有的疑虑、恐惧、渴望、回忆和遗憾。</p></blockquote><blockquote><p>爱情往往会被持久的友谊取代—莱昂纳德和诸多昔日的恋人保持着好友关系，只有极少数会对他心怀怨恨。一段爱情长跑结束后的直接结果，则是抑郁症的侵袭和佳作的诞生。</p></blockquote><blockquote><p>他的尊严和骄傲也让他迈不开那一步，把消除自己痛苦的生杀大权拱手交给别人。安非他命管用的，如果他不长期过量服用的话。但他已年过五旬，这么猛的兴奋剂他已受用不起。酒精也管用，做爱也是—莱昂纳德俨然已成为自我医疗的专家。不过相对而言最管用的还是修行。长时间的冥想和研习虽未治好他的抑郁，但至少让他看清了病因。他认识到，他的抑郁症与他的“自我孤立”和“遁世情节”有关。在远离人群的地方，他通过不同的拓展心灵的方式对付着隔离感和孤独感。但在有餐馆和卫生间的现实世界，如何摆脱他们，实是最难的部分。</p></blockquote><blockquote><p>相信艺术，别相信艺术家。</p></blockquote><blockquote><p>女人的思维模式以承诺为中心。</p></blockquote><blockquote><p>他对你说话时话语里灼热的真诚。他不仅悲悯弱者，甚至对敌人也满怀同情和谅解，这极为难得。</p></blockquote><blockquote><p>丽贝卡说:“莱昂纳德独自远航，永远躺在仙人掌铺成的床上，但不知怎的可以观察到无穷的世界，‘每颗渴望爱的心都会加入，即便将如难民般流离异土……忘却你那完美的礼物/万物皆有裂痕/那是光照进来的地方。’他以如此独特的方式描述慈悲为怀。我听一个勒戒所里的朋友说，他们把这句歌词写进了康复手册。他教给我太多太多。他的个性谦逊又猛烈，话语里常带着这样的潜台词，‘让我们说实话吧，别再自欺欺人了。’”他们交往之初，丽贝卡爱抱怨自己不幸的童年，唠叨儿时的伤痛。莱昂纳德是她最好的倾听者，他会耐心地听她说完，然后俏皮地说:“我明白了，确实很可怕，丽贝卡，原来你是贫民窟里长大的黑人小孩。”丽贝卡说着说着笑了起来，“他是个宽宏大量的人，从未指责过别人，从来没有;他有着顽强的性格，让他能从容地直面痛苦。尽管在前些年，他曾通过性、毒品等方式来逃避现实，不过在更早的青年时代，和同时代的大多数人不一样的是，他能勇敢地直面痛苦，而不是试图逃避。”</p></blockquote><blockquote><p>不够完美又何妨<br>万物皆有裂痕<br>那是光进来的地方</p></blockquote><blockquote><p>《未来》光，能照亮你的前路，驱散你的忧愁。它让你能拥抱灾难和悲喜。我们只需认识到万物皆有裂痕。在我看来，其他所有的幻想都注定是无法复原的黑暗。</p></blockquote><blockquote><p>一个年过六旬、刚刚推出了自己音乐生涯最卖座唱片的乐坛偶像，一个饱经沧桑、练达从容对我情圣，一个习惯了被人伺候的名人，选择了另一种生活:自己动手砍柴、敲钉子、修厕所，完成摊派给他干的活。主管全寺劳作事务的希玄说:”我完全不知道莱昂纳德是名人。”</p></blockquote><blockquote><p>婚礼是世上最艰难的修行，在秃山上接连打坐数月都无法与之并论。他是每时每刻的自我反省。换句话说，配偶就是一面镜子，你无时不刻不在审视自我。谁能受得了?</p></blockquote><blockquote><p>莱昂纳德一生都在寻找着答案—它是什么，它在何方，抑或仅仅是该如何逃离?他有过那么多的爱人，却都不愿对她们做出承诺;他曾无数次地去杏山处坐禅，但总是下不了决心留在那儿;他做了那么多年的音乐，到头来音乐似乎成了他最不愿做的事。我们恋爱时，他的不少事情都到了紧要关头，而我们都让对方的某些想法变得明朗了。我们分手后，他终于把自己托付给了他曾迟迟不愿托付的佛门，这在某种程度上‘坏了’我的名声:‘天哪，你把你的男人都逼得出家了，你对他干了些什么’</p></blockquote><blockquote><p>周而复始的修行目的在于，让你可以满怀信心地前往一个曾让你极度缺乏安全感的地方，让你意识到到你可以在那里安家落户，可以在极端的环境中茁壮成长、找到宁静。</p></blockquote><blockquote><p>一旦你能克服对听命于他人的本能的抗拒，你就能放松地融入每一天的修行，享受一种简单的生活。你只需要考虑睡眠、劳作、下一餐饭，曾贯穿你音乐生涯的即兴创作冲动开始渐渐消退。</p></blockquote><blockquote><p>人们普遍认为，艺术家或作家需要混沌、痛苦和兴之所至才能创作好作品。</p></blockquote><blockquote><p>上帝从混沌和荒芜中创造了宇宙的秩序，所以混沌和荒芜可被认为是所有创造力的DNA。</p></blockquote><blockquote><p>但井井有条的生活方式，连同对忘却自我和克服自我意识的渴望，解放了莱昂纳德的创造力。说起来有些矛盾，毕竟自我意识又是创作者产生创作冲动的源头。但通过修行来去除诸如焦虑、期望等内部干扰，与置身于简单、有序的环境中以去除外部干扰一样重要。修行之余的宝贵时间里，莱昂纳德忙于写作、画画、用合成器创作某种优雅细腻、凄美伤感，被他形容为”很像1950年代法国老电影里的音乐”。</p></blockquote><blockquote><p>没有人可以像莱昂纳德一样把”裸”字唱的如此赤裸裸。</p></blockquote><blockquote><p>自闲。平凡的静默/正常的静默/两个想法之间的静默</p></blockquote><blockquote><p>既不在场，又如此在场。</p></blockquote><blockquote><p>当一个人的自我意识逐渐减少，能意识到自己没有自由意志，既没法掌控自己的事，也没法左右别人怎么待你;能既不为自己的成就感到自豪，也不为祸事的降临感到忿恨，他就得道了。</p></blockquote><blockquote><p>莱昂纳德以他复杂的悲伤、广博的爱……改变了我们所有人的生活，他进入了你的大脑、你的心、你的肺。你记得他，你感受他，你呼吸他。他是我们进入狂喜状态的接头，进入另一个世界的入口。</p></blockquote><blockquote><p>路<br>太漫长<br>天<br>太无垠<br>漂泊的<br>心<br>终究<br>无家可归</p></blockquote><blockquote><p>他的嗓音听起来更柔和也更粗粝，甚至有一点点撕裂，这不是问题，万物皆有裂痕，那是光进来的地方。</p></blockquote><blockquote><p>义无反顾地试图打破文字和歌曲之间，歌曲和真相之间，真相和自己之间以及内心和痛楚之间的所有界限。</p></blockquote><h2 id="《岛上书店》"><a href="#《岛上书店》" class="headerlink" title="《岛上书店》"></a>《岛上书店》</h2><blockquote><p>没有谁是一座孤岛，每本书都是一个世界。</p></blockquote><blockquote><p>生活中每一桩糟糕事，几乎都是时机不当的结果，每件好事，都是时机恰到好处的结果。</p></blockquote><blockquote><p>可工作并不像温暖的身体。</p></blockquote><blockquote><p>你不应该为任何一个女人改变自己的生活。</p></blockquote><blockquote><p>没有人会漫无目的地旅行，那些迷路者是希望迷路。</p></blockquote><blockquote><p>好的婚姻，至少有一部分是阴谋。</p></blockquote><blockquote><p>因为从心底害怕自己不值得被爱，我们独来独往，然而就是因为独来独往，才让我们以为自己不值得被爱。有一天，你不知道是什么时候，你会驱车上路。有一天，你不知道是什么时候，你会遇到ta。你会被爱，因为你今生第一次真正不再孤单。</p></blockquote><blockquote><p>她最喜欢的书，是个伪造的谎言，可就是这本书让他遇见了自己的爱情。</p></blockquote><blockquote><p>如果什么东西是好的，且普遍被认为如此，这并不是个讨厌它的好理由。</p></blockquote><blockquote><p>一个人无法自成孤岛，要么至少，一个人无法自成最理想的孤岛。</p></blockquote><blockquote><p>我们读书而后知道自己并不孤单。我们读书，因为我们孤单；我们读书，然后就不孤单，我们并不孤单。</p></blockquote><blockquote><p>没有一部全集里的每个故事都是完美的。有些成功了，有些差点。幸运的话，会有一部出色之作。到最后，不管怎样，人们会记住那些出色之作，而对出色之作，他们也不会记得很久。</p></blockquote><blockquote><p>我们不是我们所收集的、得到的、所读的东西，只要我们还活着，我们就是爱，我们所爱的事物，我们所爱的人。所有这些，我认为真的会存活下来。</p></blockquote><blockquote><p>我们不全是长篇小说，也不全是短篇小说<br>最后的最后，我们成为一部人生作品集。</p></blockquote><blockquote><p>这本书提醒了我们，爱与被爱的能力、付出与接受的意愿，能拯救陷于孤独绝境中的我们。</p></blockquote><h2 id="《无声告白》"><a href="#《无声告白》" class="headerlink" title="《无声告白》"></a>《无声告白》</h2><blockquote><p>我们终此一生，就是要摆脱他人的期待，找到真正的自己。</p></blockquote><blockquote><p>这部小说写的是成为“异类”的那种负担与压力，这种负担与压力，通常会摧毁一个人，而不是塑造一个人。</p></blockquote><blockquote><p>从前，她根本不会意识到幸福是多么的脆弱，不知道只要你的不小心，就能轻而易举地推倒幸福，让它粉身碎骨。</p></blockquote><blockquote><p>继承父母的梦想是多么艰难，如此被爱是多么令人窒息。</p></blockquote>]]></content>
    
    <summary type="html">
    
      书单语录
    
    </summary>
    
      <category term="日志" scheme="http://hibiscidai.com/categories/%E6%97%A5%E5%BF%97/"/>
    
    
      <category term="日志" scheme="http://hibiscidai.com/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>text-RSS</title>
    <link href="http://hibiscidai.com/2018/07/06/text-RSS/"/>
    <id>http://hibiscidai.com/2018/07/06/text-RSS/</id>
    <published>2018-07-05T16:00:00.000Z</published>
    <updated>2018-07-06T08:51:27.487Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/06/text-RSS/博客RSS订阅.png" alt="博客RSS订阅"></p><p>博客RSS订阅，使用插件 <code>hexo-generator-feed</code></p><a id="more"></a><h1 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h1><h2 id="本地仓库支持"><a href="#本地仓库支持" class="headerlink" title="本地仓库支持"></a>本地仓库支持</h2><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure><h3 id="添加根目录配置"><a href="#添加根目录配置" class="headerlink" title="添加根目录配置"></a>添加根目录配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: http://hexo.io/plugins/</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">RSS订阅</span></span><br><span class="line">plugin:</span><br><span class="line">- hexo-generator-feed</span><br><span class="line"><span class="meta">#</span><span class="bash">Feed Atom</span></span><br><span class="line">feed:</span><br><span class="line">type: atom</span><br><span class="line">path: atom.xml</span><br><span class="line">limit: 20</span><br></pre></td></tr></table></figure><h3 id="更新主题配置"><a href="#更新主题配置" class="headerlink" title="更新主题配置"></a>更新主题配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure><h2 id="订阅RSS"><a href="#订阅RSS" class="headerlink" title="订阅RSS"></a>订阅RSS</h2><h3 id="Chrome-RSS-插件"><a href="#Chrome-RSS-插件" class="headerlink" title="Chrome RSS 插件"></a>Chrome RSS 插件</h3><p>Feeder</p><blockquote><p>只有当该网页有Google检测得到的RSS源时，网址栏上才会出现按钮</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/u011303443/article/details/52333695" target="_blank" rel="noopener">hexo博客安装RSS插件</a></p><p><a href="https://blog.csdn.net/u014491743/article/details/51284102" target="_blank" rel="noopener">一分钟教你用Chrome的RSS来订阅博客</a></p><p><a href="https://sspai.com/post/44420" target="_blank" rel="noopener">2018 年主流 RSS 服务选哪家？Feedly、Inoreader 和 NewsBlur 全面横评</a></p>]]></content>
    
    <summary type="html">
    
      text-RSS
    
    </summary>
    
      <category term="前端" scheme="http://hibiscidai.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="测试" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="hexo" scheme="http://hibiscidai.com/tags/hexo/"/>
    
      <category term="博客搭建过程" scheme="http://hibiscidai.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SwiftPlaygrounds初识及九宫格最优策略</title>
    <link href="http://hibiscidai.com/2018/07/04/2018-07-04-Playgrounds%E6%8E%A5%E8%A7%A6%E5%8F%8A%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%9C%80%E4%BC%98%E7%AD%96%E7%95%A5/"/>
    <id>http://hibiscidai.com/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/</id>
    <published>2018-07-03T16:00:00.000Z</published>
    <updated>2018-07-04T04:45:40.608Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/SwiftPlaygrounds初识及九宫格最优策略.png" alt="SwiftPlaygrounds初识及九宫格最优策略"></p><p>SwiftPlaygrounds初识及九宫格最优策略</p><p>官方介绍：<a href="https://www.apple.com/swift/playgrounds/" target="_blank" rel="noopener">Swift Playgrounds</a></p><a id="more"></a><p>[TOC]</p><h1 id="SwiftPlaygrounds初识及九宫格最优策略"><a href="#SwiftPlaygrounds初识及九宫格最优策略" class="headerlink" title="SwiftPlaygrounds初识及九宫格最优策略"></a>SwiftPlaygrounds初识及九宫格最优策略</h1><h1 id="SwiftPlaygrounds初识"><a href="#SwiftPlaygrounds初识" class="headerlink" title="SwiftPlaygrounds初识"></a>SwiftPlaygrounds初识</h1><p><code>Playgrounds</code> 是App Store 内一款开放性的编程学习类应用程序。</p><p>包含一整套Apple设计的课程，友好的界面操控。</p><p>简单说下我的见解</p><ul><li>卡通风格，增加学习兴趣。</li><li>对于编程语言基础语法，例如，循环、函数、遍历、数组等类比引导式学习方式易于接受，适合0基础。</li><li>输入方式改变，易于操作。在IPAD上不需要键盘可以进行简单编程。通过触控操作及快捷代码提示进行编程。效率甚至比键盘还要高。</li></ul><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo1.jpg" alt="demo1"></p><h1 id="九宫格最优策略"><a href="#九宫格最优策略" class="headerlink" title="九宫格最优策略"></a>九宫格最优策略</h1><p>对于一个九宫格在中心位置如何使用循环方法走过周围格子并回到原点</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>不使用循环：</p><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo4.jpg" alt="demo4"></p><p>使用循环：</p><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo3.jpg" alt="demo3"></p><h2 id="策略分析"><a href="#策略分析" class="headerlink" title="策略分析"></a>策略分析</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">func <span class="title">checkTile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> isOnCloseSwitch &#123;</span><br><span class="line">        toggleSwwitch()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> isOnGem &#123;</span><br><span class="line">        collectGem()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in <span class="number">1</span> .. <span class="number">4</span> &#123;</span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">    turnLeft()</span><br><span class="line">    </span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">    turnLeft()</span><br><span class="line">    </span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">    turnLeft()</span><br><span class="line">    </span><br><span class="line">    moveForward()</span><br><span class="line">    checkTile()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只考虑移动和转向分别为一个时间复杂度</p><table><thead><tr><th></th><th>移动时间</th><th>转向时间</th></tr></thead><tbody><tr><td>使用循环</td><td>16</td><td>12</td></tr><tr><td>不使用循环</td><td>10</td><td>6</td></tr></tbody></table><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h2><p>快速演示：</p><p><img src="/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo2.gif" alt="demo2"></p><p>单步骤视频演示：</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"/2018/07/04/2018-07-04-Playgrounds接触及九宫格最优策略/demo2.mp4"},"danmaku":{"id":"someid","api":"https://api.prprpr.me/dplayer/","addition":["/some.json"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);player.on("loadstart",function(){console.log("loadstart")})})()</script> ]]></content>
    
    <summary type="html">
    
      SwiftPlaygrounds初识及九宫格最优策略
    
    </summary>
    
      <category term="课外扩展" scheme="http://hibiscidai.com/categories/%E8%AF%BE%E5%A4%96%E6%89%A9%E5%B1%95/"/>
    
    
      <category term="算法" scheme="http://hibiscidai.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="AppleDeveloper" scheme="http://hibiscidai.com/tags/AppleDeveloper/"/>
    
      <category term="SwiftPlaygrounds" scheme="http://hibiscidai.com/tags/SwiftPlaygrounds/"/>
    
  </entry>
  
  <entry>
    <title>text-media</title>
    <link href="http://hibiscidai.com/2018/07/04/text-media/"/>
    <id>http://hibiscidai.com/2018/07/04/text-media/</id>
    <published>2018-07-03T16:00:00.000Z</published>
    <updated>2018-07-04T04:57:14.287Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/04/text-media/博客音频视频问题.png" alt="博客音频视频问题"></p><p>博客框架音频视频管理难题，使用插件 <code>MoePlayer/hexo-tag-dplayer</code> 及 <code>MoePlayer/hexo-tag-aplayer</code></p><a id="more"></a><p><a href="https://github.com/MoePlayer/hexo-tag-dplayer" target="_blank" rel="noopener">MoePlayer/hexo-tag-dplayer</a></p><p><a href="https://github.com/MoePlayer/hexo-tag-aplayer" target="_blank" rel="noopener">MoePlayer/hexo-tag-aplayer</a></p><h2 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h2><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-dplayer --save</span><br><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer &quot;Caffeine&quot; &quot;Jeff Williams&quot; &quot;http://7xq131.com1.z0.glb.clouddn.com/Preparation.mp3&quot; &quot;autoplay&quot; %&#125;</span><br></pre></td></tr></table></figure><p>如下：</p>        <div id="aplayer-xERQkEiE" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-xERQkEiE"),            narrow: false,            autoplay: true,            showlrc: false,            music: {              title: "Caffeine",              author: "Jeff Williams",              url: "http://7xq131.com1.z0.glb.clouddn.com/Preparation.mp3",              pic: "",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><h2 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h2><p>点击分享网易云音乐，生成链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://music.163.com/song/xxx?userid=xxx</span><br></pre></td></tr></table></figure><p>可以获取歌曲号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe</span><br><span class="line">frameborder=&quot;no&quot;</span><br><span class="line">border=&quot;0&quot;</span><br><span class="line">marginwidth=&quot;0&quot;</span><br><span class="line">marginheight=&quot;0&quot;</span><br><span class="line">width=330</span><br><span class="line">height=86</span><br><span class="line">src=&quot;//music.163.com/outchain/player?type=2&amp;id=xxx&amp;auto=1&amp;height=66&quot;</span><br><span class="line">&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p>更改id</p><p>如下：</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=590883&auto=1&height=66"></iframe><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;% dplayer &quot;url=http://player.youku.com/player.php/sid/XMjc0MzExOTM2/v.swf&quot;</span><br><span class="line">&quot;api=http://dplayer.daoapp.io&quot;</span><br><span class="line">&quot;pic=http://vthumb.ykimg.com/05420408526754C26A0A487F140EE9DE&quot;</span><br><span class="line">&quot;id=9E2E3368B56CDBB4&quot;</span><br><span class="line">&quot;loop=yes&quot;</span><br><span class="line">&quot;theme=#FADFA3&quot;</span><br><span class="line">&quot;autoplay=false&quot;</span><br><span class="line">&quot;token=tokendemo&quot; </span><br><span class="line">%&#125;</span><br><span class="line"></span><br><span class="line">&#123;% dplayer</span><br><span class="line">&quot;url=some.mp4&quot;</span><br><span class="line">&quot;id=someid&quot;</span><br><span class="line">&quot;api=博客音频视频问题.png&quot;</span><br><span class="line">&quot;addition=/some.json&quot;</span><br><span class="line">&apos;code=player.on(&quot;loadstart&quot;,function()&#123;console.log(&quot;loadstart&quot;)&#125;)&apos;</span><br><span class="line">&quot;autoplay&quot; %&#125;</span><br></pre></td></tr></table></figure><p>如下：<br><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","loop":true,"video":{"url":"/2018/07/04/text-media/demo2.mp4","pic":"博客音频视频问题.png"},"danmaku":{"id":"9E2E3368B56CDBB4","api":"http://dplayer.daoapp.io","token":"tokendemo"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script></p><h2 id="优酷"><a href="#优酷" class="headerlink" title="优酷"></a>优酷</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;embed src=&apos;http://player.youku.com/player.php/sid/XMjc0MzExOTM2/v.swf&apos; </span><br><span class="line">allowFullScreen=&apos;true&apos;</span><br><span class="line">quality=&apos;high&apos;</span><br><span class="line">width=&apos;480&apos;</span><br><span class="line">height=&apos;400&apos;</span><br><span class="line">align=&apos;middle&apos;</span><br><span class="line">allowScriptAccess=&apos;always&apos;</span><br><span class="line">type=&apos;application/x-shockwave-flash&apos;&gt;</span><br><span class="line">&lt;/embed&gt;</span><br></pre></td></tr></table></figure><p>如下：</p><embed src="http://player.youku.com/player.php/sid/XMjc0MzExOTM2/v.swf" allowfullscreen="true" quality="high" width="480" height="400" align="middle" allowscriptaccess="always" type="application/x-shockwave-flash"><br>]]></content>
    
    <summary type="html">
    
      测试hexo插入picture的标签
    
    </summary>
    
      <category term="前端" scheme="http://hibiscidai.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="测试" scheme="http://hibiscidai.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="hexo" scheme="http://hibiscidai.com/tags/hexo/"/>
    
      <category term="博客搭建过程" scheme="http://hibiscidai.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>设计模式小结</title>
    <link href="http://hibiscidai.com/2018/07/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%B0%8F%E7%BB%93/"/>
    <id>http://hibiscidai.com/2018/07/03/设计模式小结/</id>
    <published>2018-07-02T16:00:00.000Z</published>
    <updated>2018-07-03T06:30:32.233Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/07/03/设计模式小结/设计模式小结.png" alt="设计模式小结"></p><p>设计模式小结</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式小结"><a href="#设计模式小结" class="headerlink" title="设计模式小结"></a>设计模式小结</h1><h2 id="设计模式之间关系"><a href="#设计模式之间关系" class="headerlink" title="设计模式之间关系"></a>设计模式之间关系</h2><p><img src="/2018/07/03/设计模式小结/设计模式之间关系-1.png" alt="设计模式之间关系-1"></p><p><img src="/2018/07/03/设计模式小结/设计模式之间关系-2.jpg" alt="设计模式之间关系-2"></p><h2 id="类之间主要关系图"><a href="#类之间主要关系图" class="headerlink" title="类之间主要关系图"></a>类之间主要关系图</h2><p><img src="/2018/07/03/设计模式小结/主要类关系.png" alt="主要类关系"></p><h2 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h2><ul><li>单一职责原则（Single Responsibility Principle）<br>一个类只有一个职责。</li><li>开闭原则（Open Close Principle）<br>对扩展开放对更改封闭。</li><li>里氏代换原则（Liskov Substitution Principle）<br>子类替换掉父类,后程序正常运行且结果跟预测相同才能允许继。</li><li>依赖倒转原则（Dependence Inversion Principle）<br>针对接口编程，不针对实现编；高层不依赖底层，依赖抽象。</li><li>接口隔离原则（Interface Segregation Principle）<br>客户端不应该依赖它不需要的方法，类间的依赖关系应建立在最小的接口上。</li><li>合成/聚合复用原则（Composite Reuse Principle）<br>构造函数中出现其他类/类使用调用其他类。</li><li>迪米特原则（Demeter Principle）<br>不要和陌生人说话，最少知识原则。</li></ul><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><blockquote><p>创建对象的同时隐藏创建逻辑的方式，不使用新的运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p></blockquote><ul><li>单例模式（Singleton Pattern）<br>一个类仅有一个实例，并提供一个访问它的全局访问点。</li><li>工厂模式（Factory Pattern）<br>定义一个用于创建对象的接口，让子类决定实例化哪个类，一个类的创建延迟到其子类，这个类叫工厂。</li><li>抽象工厂模式（Abstract Factory Pattern）<br>提供一个创建一系列相关或者相关依赖对象的接口，而不需指定他们具体的类。</li><li>建造者模式（Builder Pattern）<br>将一个复杂对象的创建与表示分离，使得同样的创建过程可用不同的表示。</li><li>原型模式（Prototype Pattern）<br>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</li></ul><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><blockquote><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p></blockquote><ul><li>适配器模式（Adapter Pattern）<br>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li>桥接模式（Bridge Pattern）<br>把抽象化与实现化解耦，提供两者之间的桥接结构，使二者可以独立变化。</li><li>组合模式（Composite Pattern）<br>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</li><li>装饰器模式（Decorator Pattern）<br>动态地给一个对象添加一些额外的职责。就增加功能来说装饰器模式相比生成子类更为灵活。</li><li>外观模式（Facade Pattern）<br>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li><li>享元模式（Flyweight Pattern）<br>运用共享技术有效地支持大量细粒度的对象。</li><li>代理模式（Proxy Pattern）<br>为其他独享提供一种代理以控制对这个对象的访问。</li></ul><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><blockquote><p>特别关注对象之间的通信</p></blockquote><ul><li>职责链模式（Chain of Responsibility Pattern）<br>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理它位置。</li><li>命令模式（Command Pattern）<br>将一个请求封装为一个对象，从而使你可用不用的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</li><li>解释器模式（Interpreter Pattern）<br>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</li><li>中介者模式（Mediator Pattern）<br>用一个对象来封装一系列的对象交互，中介者使各对象直间不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</li><li>备忘录模式（Memento Pattern）<br>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</li><li>观察者模式（Observer Pattern）<br>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。</li><li>状态模式（State Pattern）<br>允许对象在内部状态发生改变时改变它的行为，对象看起来好像是修改了它的子类。</li><li>策略模式（Strategy Pattern）<br>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</li><li>模板模式（Template Pattern）<br>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li>迭代器模式（Iterator Pattern）<br>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</li><li>空对象模式（Null Object Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><h2 id="J2EE模式"><a href="#J2EE模式" class="headerlink" title="J2EE模式"></a>J2EE模式</h2><ul><li>MVC 模式（MVC Pattern）</li><li>业务代表模式（Business Delegate Pattern）</li><li>组合实体模式（Composite Entity Pattern）</li><li>数据访问对象模式（Data Access Object Pattern）</li><li>前端控制器模式（Front Controller Pattern）</li><li>拦截过滤器模式（Intercepting Filter Pattern）</li><li>服务定位器模式（Service Locator Pattern）</li><li>传输对象模式（Transfer Object Pattern）</li></ul>]]></content>
    
    <summary type="html">
    
      设计模式小结
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-23-迭代器模式</title>
    <link href="http://hibiscidai.com/2018/06/13/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-23-%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    <id>http://hibiscidai.com/2018/06/13/设计模式-23-迭代器/</id>
    <published>2018-06-12T16:00:00.000Z</published>
    <updated>2018-07-02T15:34:32.139Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/06/13/设计模式-23-迭代器/设计模式23.png" alt="设计模式23"></p><p>设计模式-23-迭代器模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-23-迭代器模式"><a href="#设计模式-23-迭代器模式" class="headerlink" title="设计模式-23-迭代器模式"></a>设计模式-23-迭代器模式</h1><h1 id="迭代器模式-Iterator-Pattern"><a href="#迭代器模式-Iterator-Pattern" class="headerlink" title="迭代器模式(Iterator Pattern)"></a>迭代器模式(Iterator Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>不同的方式来遍历整个整合对象。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>遍历一个聚合对象。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>定义接口：hasNext, next。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>把在元素之间游走的责任交给迭代器，而不是聚合对象。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>JAVA 中的 iterator。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>它支持以不同的方式遍历一个聚合对象。</li><li>迭代器简化了聚合类。</li><li>在同一个聚合上可以有多个遍历。</li><li>在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>需要为聚合对象提供多种遍历方式。</li><li>为遍历不同的聚合结构提供一个统一的接口。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>模拟数组迭代</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/06/13/设计模式-23-迭代器/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern23.iterator.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameRepository</span> <span class="keyword">implements</span> <span class="title">Container</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> String names[] = &#123; <span class="string">"Robert"</span>, <span class="string">"John"</span>, <span class="string">"Jalie"</span>, <span class="string">"Lora"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator <span class="title">getIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NameIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">NameIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index &lt; names.length) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.hasNext()) &#123;</span><br><span class="line"><span class="keyword">return</span> names[index++];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">NameRepository nr = <span class="keyword">new</span> NameRepository();</span><br><span class="line"><span class="keyword">for</span> (Iterator it = nr.getIterator(); it.hasNext();) &#123;</span><br><span class="line">String name = (String) it.next();</span><br><span class="line">System.out.println(<span class="string">"name : "</span> + name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name : Robert</span><br><span class="line">name : John</span><br><span class="line">name : Jalie</span><br><span class="line">name : Lora</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-23-迭代器模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-22-模板方法</title>
    <link href="http://hibiscidai.com/2018/06/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-22-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95/"/>
    <id>http://hibiscidai.com/2018/06/11/设计模式-22-模板方法/</id>
    <published>2018-06-10T16:00:00.000Z</published>
    <updated>2018-07-02T15:17:53.865Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/06/11/设计模式-22-模板方法/设计模式22.png" alt="设计模式22"></p><p>设计模式-22-模板方法</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-22-模板方法"><a href="#设计模式-22-模板方法" class="headerlink" title="设计模式-22-模板方法"></a>设计模式-22-模板方法</h1><h1 id="模板方法-Template-Method"><a href="#模板方法-Template-Method" class="headerlink" title="模板方法(Template Method)"></a>模板方法(Template Method)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>一些方法通用，却在每一个子类都重新写了这一方法。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>有一些通用的方法。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在抽象类实现，其他步骤在子类实现。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将这些通用算法抽象出来。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异。</li><li>西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架。</li><li>spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>封装不变部分，扩展可变部分。</li><li>提取公共代码，便于维护。</li><li>行为由父类控制，子类实现。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>有多个子类共有的方法，且逻辑相同。</li><li>重要的、复杂的方法，可以考虑作为模板方法。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>一般模板方法都加上 final 关键词。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>旅行有选择走路的方式和路上吃什么干粮有很多选择。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="http://www.runoob.com/wp-content/uploads/2014/08/template_pattern_uml_diagram.jpg" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern22.template.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化游戏</span></span><br><span class="line">initialize();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始游戏</span></span><br><span class="line">startPlay();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束游戏</span></span><br><span class="line">endPlay();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cricket</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cricket Game Finished!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cricket Game Initialized! Start playing."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Cricket Game Started. Enjoy the game!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Football Game Finished!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Football Game Initialized! Start playing."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Football Game Started. Enjoy the game!"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Game game = <span class="keyword">new</span> Cricket();</span><br><span class="line">game.play();</span><br><span class="line">System.out.println();</span><br><span class="line">game = <span class="keyword">new</span> Football();</span><br><span class="line">game.play();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Cricket Game Initialized! Start playing.</span><br><span class="line">Cricket Game Started. Enjoy the game!</span><br><span class="line">Cricket Game Finished!</span><br><span class="line"></span><br><span class="line">Football Game Initialized! Start playing.</span><br><span class="line">Football Game Started. Enjoy the game!</span><br><span class="line">Football Game Finished!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-22-模板方法
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-21-策略模式</title>
    <link href="http://hibiscidai.com/2018/06/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-21-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/06/06/设计模式-21-策略模式/</id>
    <published>2018-06-05T16:00:00.000Z</published>
    <updated>2018-07-02T15:05:52.674Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/06/06/设计模式-21-策略模式/设计模式21.png" alt="设计模式21"></p><p>设计模式-21-策略模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-21-策略模式"><a href="#设计模式-21-策略模式" class="headerlink" title="设计模式-21-策略模式"></a>设计模式-21-策略模式</h1><h1 id="策略模式-Strategy-Pattern"><a href="#策略模式-Strategy-Pattern" class="headerlink" title="策略模式(Strategy Pattern)"></a>策略模式(Strategy Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。</p><blockquote><p>define a finallu or a lgorithed,encapsulate each owe,and make them interchangeable,strategy lets the algorithm vary independently from cilents that use it.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>实现同一个接口。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将这些算法封装成一个一个的类，任意地替换。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>诸葛亮的锦囊妙计，每一个锦囊就是一个策略。</li><li>旅行的出游方式，选择骑自行车、坐汽车，每一种旅行方式都是一个策略。</li><li>JAVA AWT 中的 LayoutManager。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>算法可以自由切换。</li><li>避免使用多重条件判断。</li><li>扩展性良好。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>策略类会增多。</li><li>所有策略类都需要对外暴露。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。</li><li>一个系统需要动态地在几种算法中选择一种。</li><li>如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>旅行有选择走路的方式和路上吃什么干粮有很多选择。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/06/06/设计模式-21-策略模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern21.strategy.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Train</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一张火车票"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃的火车餐"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirPlan</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一张飞机票"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吃的飞机餐"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bicycle</span> <span class="keyword">implements</span> <span class="title">ITravelStrategy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buyTicket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一辆单车"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">otherOper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"自备食餐"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Travel</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ITravelStrategy st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSt</span><span class="params">(ITravelStrategy st)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.st = st;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span> </span>&#123;</span><br><span class="line">st.buyTicket();</span><br><span class="line">st.otherOper();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Travel t = <span class="keyword">new</span> Travel();</span><br><span class="line">t.setSt(<span class="keyword">new</span> AirPlan());</span><br><span class="line">t.go();</span><br><span class="line">t.setSt(<span class="keyword">new</span> Train());</span><br><span class="line">t.go();</span><br><span class="line">t.setSt(<span class="keyword">new</span> Bicycle());</span><br><span class="line">t.go();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">一张飞机票</span><br><span class="line">吃的飞机餐</span><br><span class="line">一张火车票</span><br><span class="line">吃的火车餐</span><br><span class="line">一辆单车</span><br><span class="line">自备食餐</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-21-策略模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-20-状态模式</title>
    <link href="http://hibiscidai.com/2018/05/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-20-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/30/设计模式-20-状态模式/</id>
    <published>2018-05-29T16:00:00.000Z</published>
    <updated>2018-07-02T14:42:19.719Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/30/设计模式-20-状态模式/设计模式20.png" alt="设计模式20"></p><p>设计模式-20-状态模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-20-状态模式"><a href="#设计模式-20-状态模式" class="headerlink" title="设计模式-20-状态模式"></a>设计模式-20-状态模式</h1><h1 id="状态模式-State-Pattern"><a href="#状态模式-State-Pattern" class="headerlink" title="状态模式(State Pattern)"></a>状态模式(State Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>允许对象在内部状态发生改变时改变它的行为，对象看起来好像是修改了它的子类。</p><blockquote><p>allow an object to alter its behavior when its internal state changes</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>代码中包含大量与对象状态有关的条件语句。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 if…else 等条件选择语句。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将各种具体的状态类抽象出来。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>打篮球的时候运动员可以有正常状态、不正常状态和超常状态。</li><li>曾侯乙编钟中，’钟是抽象接口’,’钟A’等是具体状态，’曾侯乙编钟’是具体环境（Context）。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>封装了转换规则。 </li><li>枚举可能的状态，在枚举状态之前需要确定状态种类。 </li><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 </li><li>状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>行为随状态改变而改变的场景。 </li><li>条件、分支语句的代替者。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/30/设计模式-20-状态模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern20.state.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SlowDown</span> <span class="keyword">extends</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"减速"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeedUp</span> <span class="keyword">extends</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"加速"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EvenSpeed</span> <span class="keyword">extends</span> <span class="title">RunState</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"匀速"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoMaticDrive</span> </span>&#123;</span><br><span class="line">SlowDown sd = <span class="keyword">new</span> SlowDown();</span><br><span class="line">EvenSpeed es = <span class="keyword">new</span> EvenSpeed();</span><br><span class="line">SpeedUp su = <span class="keyword">new</span> SpeedUp();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roodBlackTrue</span><span class="params">(RunState rs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rs.getClass() == SlowDown.class) &#123;</span><br><span class="line">sd.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == EvenSpeed.class) &#123;</span><br><span class="line">es.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == SpeedUp.class) &#123;</span><br><span class="line">su.handle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roodBlackFalse</span><span class="params">(RunState rs)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (rs.getClass() == SlowDown.class) &#123;</span><br><span class="line">sd.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == EvenSpeed.class) &#123;</span><br><span class="line">es.handle();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (rs.getClass() == SpeedUp.class) &#123;</span><br><span class="line">su.handle();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AutoMaticDrive ad = <span class="keyword">new</span> AutoMaticDrive();</span><br><span class="line">ad.roodBlackTrue(<span class="keyword">new</span> SpeedUp());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加速</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-20-状态模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-19-观察者模式</title>
    <link href="http://hibiscidai.com/2018/05/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-19-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/28/设计模式-19-观察者模式/</id>
    <published>2018-05-27T16:00:00.000Z</published>
    <updated>2018-07-02T14:20:18.004Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/28/设计模式-19-观察者模式/设计模式19.png" alt="设计模式19"></p><p>设计模式-19-观察者模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-19-观察者模式"><a href="#设计模式-19-观察者模式" class="headerlink" title="设计模式-19-观察者模式"></a>设计模式-19-观察者模式</h1><h1 id="观察者模式-Observer-Pattern"><a href="#观察者模式-Observer-Pattern" class="headerlink" title="观察者模式(Observer Pattern)"></a>观察者模式(Observer Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖它的对象都得到通知并被自动更新。</p><blockquote><p>define one-to-many dependency between objects so that when one objects changes state,all its dependents are notified and updated automatically.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在抽象类里有一个 ArrayList 存放观察者们。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>使用面向对象技术，可以将这种依赖关系弱化。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>拍卖的时候，拍卖师观察最高标价，然后通知给其他竞价者竞价。</li><li>西游记里面悟空请求菩萨降服红孩儿，菩萨洒了一地水招来一个老乌龟，这个乌龟就是观察者，他观察菩萨洒水这个动作。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>观察者和被观察者是抽象耦合的。 </li><li>建立一套触发机制。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li><li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。</li><li>一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。</li><li>一个对象必须通知其他对象，而并不知道这些对象是谁。<br>需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>JAVA 中已经有了对观察者模式的支持类。</li><li>避免循环引用。</li><li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>教室里老师一来，学生会表现不同反应。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/28/设计模式-19-观察者模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern19.observer.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroodCast</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Chat&gt; chats = <span class="keyword">new</span> ArrayList&lt;Chat&gt;();</span><br><span class="line">String listenState;</span><br><span class="line"></span><br><span class="line">BroodCast() &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"flower"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"stone"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"grosss"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(Chat c)</span> </span>&#123;</span><br><span class="line">chats.add(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListenState</span><span class="params">(String listenState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listenState = listenState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BroadCast : "</span> + listenState);</span><br><span class="line"><span class="keyword">for</span> (Chat c : chats) &#123;</span><br><span class="line">c.update();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Chat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="string">"good good study, day day up!"</span>;</span><br><span class="line">System.out.println(name + <span class="string">" : "</span> + state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">BroodCast b = <span class="keyword">new</span> BroodCast();</span><br><span class="line">b.setListenState(<span class="string">"the teacher is coming"</span>);</span><br><span class="line">b.notifyed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BroadCast : the teacher is coming</span><br><span class="line">flower : good good study, day day up!</span><br><span class="line">stone : good good study, day day up!</span><br><span class="line">grosss : good good study, day day up!</span><br></pre></td></tr></table></figure><h2 id="案例1-优化"><a href="#案例1-优化" class="headerlink" title="案例1-优化"></a>案例1-优化</h2><p>针对上述例子进行优化，添加高层接口。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/28/设计模式-19-观察者模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern19.observer.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INotifier</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(INoStudier ns)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(INoStudier ns)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">INoStudier</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BroodCast</span> <span class="keyword">implements</span> <span class="title">INotifier</span> </span>&#123;</span><br><span class="line">ArrayList&lt;INoStudier&gt; nss = <span class="keyword">new</span> ArrayList&lt;INoStudier&gt;();</span><br><span class="line">String listenState;</span><br><span class="line"></span><br><span class="line">BroodCast() &#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"flower"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"stone"</span>));</span><br><span class="line">add(<span class="keyword">new</span> Chat(<span class="string">"grosss"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setListenState</span><span class="params">(String listenState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.listenState = listenState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"BroadCast : "</span> + listenState);</span><br><span class="line"><span class="keyword">for</span> (INoStudier c : nss) &#123;</span><br><span class="line">c.update();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(INoStudier ns)</span> </span>&#123;</span><br><span class="line">nss.add(ns);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(INoStudier ns)</span> </span>&#123;</span><br><span class="line">nss.remove(ns);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chat</span> <span class="keyword">implements</span> <span class="title">INoStudier</span> </span>&#123;</span><br><span class="line">String name;</span><br><span class="line">String state;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Chat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">state = <span class="string">"good good study, day day up!"</span>;</span><br><span class="line">System.out.println(name + <span class="string">" : "</span> + state);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-19-观察者模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-18-备忘录模式</title>
    <link href="http://hibiscidai.com/2018/05/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-18-%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/23/设计模式-18-备忘录模式/</id>
    <published>2018-05-22T16:00:00.000Z</published>
    <updated>2018-06-30T03:07:05.038Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/23/设计模式-18-备忘录模式/设计模式18.png" alt="设计模式18"></p><p>设计模式-18-备忘录模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-18-备忘录模式"><a href="#设计模式-18-备忘录模式" class="headerlink" title="设计模式-18-备忘录模式"></a>设计模式-18-备忘录模式</h1><h1 id="备忘录模式-Memento-Pattern"><a href="#备忘录模式-Memento-Pattern" class="headerlink" title="备忘录模式(Memento Pattern)"></a>备忘录模式(Memento Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。</p><blockquote><p>without violating encapsulation,capture an object’s internal state so that the object can be returned to this state later,promote under to full object status.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，类似”后悔药”。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>客户不与备忘录类耦合，与备忘录管理类耦合。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>通过一个备忘录类专门存储对象状态。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>后悔药。</li><li>打游戏时的存档。</li><li>Windows 里的 ctri + z。</li><li>IE 中的后退。 </li><li>数据库的事务管理。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 </li><li>实现了信息的封装，使得用户不需要关心状态的保存细节。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>需要保存/恢复数据的相关状态场景。</li><li>提供一个可回滚的操作。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>为了符合迪米特原则，还要增加一个管理备忘录的类。</li><li>为了节约内存，可使用原型模式+备忘录模式。</li></ul><p>创建备份点，需要时候恢复。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>回到过去：<br>有个男孩，有一天遇到一个女孩，状态特别好，相处中，吵架，冷战……想回到那天与女孩相遇的状态。</p><p>第一次优化：Main方法调用<br>第二次优化：新建备忘录类<br>第三次优化：新建另一个类来管理备忘录</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/23/设计模式-18-备忘录模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern18.memento.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> </span>&#123;</span><br><span class="line">String myState;</span><br><span class="line"></span><br><span class="line"><span class="function">Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Memento(myState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line">myState = memento.myState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CareTaker</span> </span>&#123;</span><br><span class="line">Memento memento;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CareTaker</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.memento = memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Memento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> memento;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.memento = memento;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">String myState;</span><br><span class="line"></span><br><span class="line">Memento(String myState) &#123;</span><br><span class="line"><span class="keyword">this</span>.myState = myState;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Boy boy = <span class="keyword">new</span> Boy(); <span class="comment">// first boy</span></span><br><span class="line">boy.myState = <span class="string">"super!!"</span>;</span><br><span class="line">CareTaker c = <span class="keyword">new</span> CareTaker(boy.createMemento());<span class="comment">// make memories</span></span><br><span class="line">boy.myState = <span class="string">"terrible!!"</span>;</span><br><span class="line">boy.restoreMemento(c.getMemento());</span><br><span class="line">System.out.println(boy.myState);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">super!!</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-18-备忘录模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-17-中介者模式</title>
    <link href="http://hibiscidai.com/2018/05/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-17-%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/21/设计模式-17-中介者模式/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2018-06-30T02:45:08.223Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/21/设计模式-17-中介者模式/设计模式17.png" alt="设计模式17"></p><p>设计模式-17-中介者模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-17-中介者模式"><a href="#设计模式-17-中介者模式" class="headerlink" title="设计模式-17-中介者模式"></a>设计模式-17-中介者模式</h1><h1 id="中介者模式-Mediator-Pattern"><a href="#中介者模式-Mediator-Pattern" class="headerlink" title="中介者模式(Mediator Pattern)"></a>中介者模式(Mediator Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>用一个对象来封装一系列的对象交互，中介者使各对象直间不需要显式的相互引用，从而使其耦合松散，而且可以独立地改变他们之间的交互。</p><blockquote><p>define on  object that encapsulates how a set of objects interact,mediator promotes loose coaping from each other,and it lets you vary their interaction independently.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>多个类相互耦合，形成了网状结构。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>对象 Colleague 之间的通信封装到一个类中单独处理。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>将上述网状结构分离为星型结构。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。</li><li>机场调度系统。</li><li>MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低了类的复杂度，将一对多转化成了一对一。</li><li>各个类之间的解耦。 </li><li>符合迪米特原则。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>中介者会庞大，变得复杂难以维护。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 </li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>不应当在职责混乱的时候使用。</p><h2 id="相关模式"><a href="#相关模式" class="headerlink" title="相关模式"></a>相关模式</h2><ul><li>外观模式(Facade)<br>它对一个对象子系统进行抽象，从而提供一个更为方便的接口。协议单向，由Facade对这个子系统类提出请求，反之不行，但该模式提供各类对象不支持或不能支持的写作行为，协议为多向的。</li><li>中介者模式(Mediator)<br>抽象已有类的一些功能，对同事之间的任意通讯进行抽象，通常晋中不属于任何单个对象的功能，知道中介者并与它通信而不是直接与其他同类对象通信。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>Sea : flood -&gt; Sky : fallMoon , LifeForm : transform; 海洋海啸-天空满月-生物灭绝<br>LifeForm : dieOut -&gt; Sea : driedUp , Sky : gray; 生物灭绝-海洋干枯-天空变灰<br>Sky : sunny -&gt; Sea : evaporate , LifeForm : grow; 天空晴-海洋蒸发-生物生长</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/21/设计模式-17-中介者模式/案例1.png" alt="案例1"></p><p>原类图：</p><p><img src="/2018/05/21/设计模式-17-中介者模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern17.mediator.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">(String type)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Concreate</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">excute</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">Sky sky = <span class="keyword">new</span> Sky();</span><br><span class="line">Sea sea = <span class="keyword">new</span> Sea();</span><br><span class="line">LifeForm lf = <span class="keyword">new</span> LifeForm();</span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"f"</span>: <span class="comment">// 接收到 Sea:flood()</span></span><br><span class="line">sky.fullMood();</span><br><span class="line">lf.transForm();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"s"</span>: <span class="comment">// 接收到Sky:sunny()</span></span><br><span class="line">sea.eraporate();</span><br><span class="line">lf.grow();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"d"</span>: <span class="comment">// 接收到LifeForm:dieOut()</span></span><br><span class="line">sky.gray();</span><br><span class="line">sea.diredup();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line">Mediator m = <span class="keyword">new</span> Concreate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sky</span> <span class="keyword">extends</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sunny</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"晴朗"</span>);</span><br><span class="line">m.excute(<span class="string">"s"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fullMood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"满月"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gray</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"灰暗"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sea</span> <span class="keyword">extends</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"涨潮"</span>);</span><br><span class="line">m.excute(<span class="string">"f"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">diredup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"干枯"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eraporate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"蒸发"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeForm</span> <span class="keyword">extends</span> <span class="title">Nature</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transForm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"生物变形"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">grow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"生物生长"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dieOut</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"生物灭绝"</span>);</span><br><span class="line">m.excute(<span class="string">"d"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Sky s = <span class="keyword">new</span> Sky();</span><br><span class="line">s.sunny();</span><br><span class="line">Sea h = <span class="keyword">new</span> Sea();</span><br><span class="line">h.flood();</span><br><span class="line">LifeForm l = <span class="keyword">new</span> LifeForm();</span><br><span class="line">l.dieOut();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">晴朗</span><br><span class="line">蒸发</span><br><span class="line">生物生长</span><br><span class="line">涨潮</span><br><span class="line">满月</span><br><span class="line">生物变形</span><br><span class="line">生物灭绝</span><br><span class="line">灰暗</span><br><span class="line">干枯</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-17-中介者模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-16-解释器模式</title>
    <link href="http://hibiscidai.com/2018/05/16/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-16-%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/16/设计模式-16-解释器模式/</id>
    <published>2018-05-15T16:00:00.000Z</published>
    <updated>2018-06-27T15:09:09.375Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/16/设计模式-16-解释器模式/设计模式16.png" alt="设计模式16"></p><p>设计模式-16-解释器模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-16-解释器模式"><a href="#设计模式-16-解释器模式" class="headerlink" title="设计模式-16-解释器模式"></a>设计模式-16-解释器模式</h1><h1 id="解释器模式-Interprter-Pattern"><a href="#解释器模式-Interprter-Pattern" class="headerlink" title="解释器模式(Interprter Pattern)"></a>解释器模式(Interprter Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p><blockquote><p>given a language,define a representation for its grammer along with an interpreter that uses the representation to interpet sentences in the language.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>对于一些固定文法构建一个解释句子的解释器。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>构件环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>构件语法树，定义终结符与非终结符。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>编译器、运算表达式计算。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>可扩展性比较好，灵活。</li><li>增加了新的解释表达式的方式。</li><li>易于实现简单文法。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>可利用场景比较少。</li><li>对于复杂的文法比较难维护。</li><li>解释器模式会引起类膨胀。 </li><li>解释器模式采用递归调用方法。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。</li><li>一些重复出现的问题可以用一种简单的语言来进行表达。</li><li>一个简单语法需要解释的场景。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>乐章有乐调和谱子，计算机存储用数字对应音符</p><p>in music notation.<br>we define 01 for L0,02 for MID,03 for HI.<br>“do re mo fa sol la xi” used to represent 1 2 3 4 5 6 7<br>use the representation to interpret this sentence：“0 1 3 1 2 3 1 2 3 5 3”</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/16/设计模式-16-解释器模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern16.interprter.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NotationInterpreter</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Interpreter</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">String myNumNotation;</span><br><span class="line">String myScale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberNotation</span> <span class="keyword">extends</span> <span class="title">NotationInterpreter</span> </span>&#123;</span><br><span class="line">Hashtable&lt;String, String&gt; nns = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">NumberNotation() &#123;</span><br><span class="line">nns.put(<span class="string">"1"</span>, <span class="string">"do"</span>);</span><br><span class="line">nns.put(<span class="string">"2"</span>, <span class="string">"re"</span>);</span><br><span class="line">nns.put(<span class="string">"3"</span>, <span class="string">"mi"</span>);</span><br><span class="line">nns.put(<span class="string">"4"</span>, <span class="string">"fa"</span>);</span><br><span class="line">nns.put(<span class="string">"5"</span>, <span class="string">"sol"</span>);</span><br><span class="line">nns.put(<span class="string">"6"</span>, <span class="string">"la"</span>);</span><br><span class="line">nns.put(<span class="string">"7"</span>, <span class="string">"xi"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interpreter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">String s = context.myNumNotation;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">String subs = s.substring(i, i + <span class="number">1</span>);</span><br><span class="line">String r = nns.get(subs).toString();</span><br><span class="line">System.out.println(r);</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Scale</span> <span class="keyword">extends</span> <span class="title">NotationInterpreter</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Interpreter</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">String scale = context.myScale;</span><br><span class="line"><span class="keyword">switch</span> (scale) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"01"</span>:</span><br><span class="line">System.out.println(<span class="string">"L0"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"02"</span>:</span><br><span class="line">System.out.println(<span class="string">"MID"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"03"</span>:</span><br><span class="line">System.out.println(<span class="string">"HI"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Context c = <span class="keyword">new</span> Context();</span><br><span class="line">c.myNumNotation = <span class="string">"312312353"</span>;</span><br><span class="line">c.myScale = <span class="string">"01"</span>;</span><br><span class="line"></span><br><span class="line">Scale s = <span class="keyword">new</span> Scale();</span><br><span class="line">s.Interpreter(c);</span><br><span class="line"></span><br><span class="line">NumberNotation nn = <span class="keyword">new</span> NumberNotation();</span><br><span class="line">nn.Interpreter(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">L0</span><br><span class="line">mi</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">re</span><br><span class="line"></span><br><span class="line">mi</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">re</span><br><span class="line"></span><br><span class="line">mi</span><br><span class="line"></span><br><span class="line">sol</span><br><span class="line"></span><br><span class="line">mi</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>【菜鸟教程】我们将创建一个接口 Expression 和实现了 Expression 接口的实体类。定义作为上下文中主要解释器的 TerminalExpression 类。其他的类 OrExpression、AndExpression 用于创建组合式表达式。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="http://www.runoob.com/wp-content/uploads/2014/08/interpreter_pattern_uml_diagram.jpg" alt="案例2"></p>]]></content>
    
    <summary type="html">
    
      设计模式-16-解释器模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-15-命令模式</title>
    <link href="http://hibiscidai.com/2018/05/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-15-%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/14/设计模式-15-命令模式/</id>
    <published>2018-05-13T16:00:00.000Z</published>
    <updated>2018-06-27T14:08:47.145Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/14/设计模式-15-命令模式/设计模式15.png" alt="设计模式15"></p><p>设计模式-15-命令模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-15-命令模式"><a href="#设计模式-15-命令模式" class="headerlink" title="设计模式-15-命令模式"></a>设计模式-15-命令模式</h1><h1 id="命令模式-Command-Pattern"><a href="#命令模式-Command-Pattern" class="headerlink" title="命令模式(Command Pattern)"></a>命令模式(Command Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>将一个请求封装为一个对象，从而使你可用不用的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p><blockquote><p>Encopsulate a request in object<br>allow the parameter ization of chents with different requests<br>allow saring the requests in a queue</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>行为请求者与行为实现者通常是一种紧耦合的关系，如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>将一组行为抽象为对象、松耦合。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>定义三个角色：</p><ul><li>received 真正的命令执行对象 </li><li>Command </li><li>invoker 使用命令对象的入口</li></ul><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>通过调用者调用接受者执行命令<br>顺序：调用者→接受者→命令。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低了系统耦合度。</li><li>新的命令可以很容易添加到系统中去。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>使用命令模式可能会导致某些系统有过多的具体命令类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>认为是命令的地方都可以使用命令模式，比如：</p><ul><li>GUI 中每一个按钮都是一条命令。</li><li>模拟 CMD。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>去餐厅点餐</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/14/设计模式-15-命令模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern15.command.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeatCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"吱吱吱-肉"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CakeCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeFood</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"香喷喷-蛋糕"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Waiter</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Command&gt; cmds = <span class="keyword">new</span> ArrayList&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.add(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.remove(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Command c : cmds) &#123;</span><br><span class="line">c.makeFood();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Waiter w = <span class="keyword">new</span> Waiter();</span><br><span class="line"></span><br><span class="line">Command m1 = <span class="keyword">new</span> MeatCommand();</span><br><span class="line">Command m2 = <span class="keyword">new</span> MeatCommand();</span><br><span class="line">Command m3 = <span class="keyword">new</span> MeatCommand();</span><br><span class="line">Command c1 = <span class="keyword">new</span> CakeCommand();</span><br><span class="line"></span><br><span class="line">w.addCommand(m1);</span><br><span class="line">w.addCommand(m2);</span><br><span class="line">w.addCommand(m3);</span><br><span class="line">w.addCommand(c1);</span><br><span class="line"></span><br><span class="line">w.delete(m3);</span><br><span class="line"></span><br><span class="line">w.notifyed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">吱吱吱-肉</span><br><span class="line">吱吱吱-肉</span><br><span class="line">香喷喷-蛋糕</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>数据库有 insert 、 delete、update、select命令<br>完成程序，希望可以实现批量操作和撤销功能</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/14/设计模式-15-命令模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern15.command.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"插入"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeleteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"删除"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"更新"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"查询"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBCommands</span> </span>&#123;</span><br><span class="line">ArrayList&lt;Command&gt; cmds = <span class="keyword">new</span> ArrayList&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.add(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Command c)</span> </span>&#123;</span><br><span class="line">cmds.remove(c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Command c : cmds) &#123;</span><br><span class="line">c.execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DBCommands cmds = <span class="keyword">new</span> DBCommands();</span><br><span class="line"></span><br><span class="line">InsertCommand ic = <span class="keyword">new</span> InsertCommand();</span><br><span class="line">DeleteCommand dc = <span class="keyword">new</span> DeleteCommand();</span><br><span class="line">UpdateCommand uc = <span class="keyword">new</span> UpdateCommand();</span><br><span class="line">SelectCommand sc = <span class="keyword">new</span> SelectCommand();</span><br><span class="line"></span><br><span class="line">cmds.addCommand(ic);</span><br><span class="line">cmds.addCommand(dc);</span><br><span class="line">cmds.addCommand(uc);</span><br><span class="line">cmds.addCommand(sc);</span><br><span class="line"></span><br><span class="line">cmds.notifyed();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">插入</span><br><span class="line">删除</span><br><span class="line">更新</span><br><span class="line">查询</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-15-命令模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-14-职责链模式</title>
    <link href="http://hibiscidai.com/2018/05/09/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-14-%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/05/09/设计模式-14-职责链模式/</id>
    <published>2018-05-08T16:00:00.000Z</published>
    <updated>2018-07-03T06:12:13.728Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/09/设计模式-14-职责链模式/设计模式14.png" alt="设计模式14"></p><p>设计模式-14-职责链模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-14-职责链模式"><a href="#设计模式-14-职责链模式" class="headerlink" title="设计模式-14-职责链模式"></a>设计模式-14-职责链模式</h1><h1 id="职责链模式-Chain-of-Responsibility-Pattern"><a href="#职责链模式-Chain-of-Responsibility-Pattern" class="headerlink" title="职责链模式(Chain of Responsibility Pattern)"></a>职责链模式(Chain of Responsibility Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，知道有一个对象处理它位置。</p><blockquote><p>the object become parts of a chain and the request is sent from one object to another across the chain until one of the object will handle it.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>在处理消息的时候以过滤很多道。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>拦截的类都实现统一接口。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>红楼梦中的”击鼓传花”。 </li><li>JS 中的事件冒泡。</li><li>JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低耦合度。它将请求的发送者和接收者解耦。</li><li>简化了对象。使得对象不需要知道链的结构。</li><li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 </li><li>增加新的请求处理类很方便。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>不能保证请求一定被接收。 </li><li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。</li><li>可能不容易观察运行时的特征，有碍于除错。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。</li><li>在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 </li><li>可动态指定一组对象处理请求。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>针对新来的职务，要把责任链断开才可以修改代码，所以将调用谁在处理这个职责转移到他们的父类上随意调用子类（开闭原则）。<br>传递（单一职责原则）：第一联系人、确定上下级关系。</p><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>小男孩修电脑，大人修车，超人修星星</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/09/设计模式-14-职责链模式/案例1.png" alt="案例1"></p><p>修改后类图：</p><p><img src="/2018/05/09/设计模式-14-职责链模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern14.chainofresponsibility.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boy</span> <span class="keyword">extends</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"i can handle it - Boy"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Adult a = <span class="keyword">new</span> Adult();</span><br><span class="line">a.handle(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Adult</span> <span class="keyword">extends</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"i can handle it - Adult"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">SuperMan s = <span class="keyword">new</span> SuperMan();</span><br><span class="line">s.handle(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> <span class="keyword">extends</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">3</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"i can handle it - SuperMan"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Boy b = <span class="keyword">new</span> Boy();</span><br><span class="line">b.handle(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i can handle it - Adult</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>针对上述案例进行改进，增加订单。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/05/09/设计模式-14-职责链模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern14.chainofresponsibility.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRepairMan</span> </span>&#123;</span><br><span class="line"><span class="keyword">protected</span> AbstractRepairMan ar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuper</span><span class="params">(AbstractRepairMan ar)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.ar = ar;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Boy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Adult</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//SuperMan</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepairOrder</span> </span>&#123;</span><br><span class="line">Boy b = <span class="keyword">new</span> Boy();</span><br><span class="line"></span><br><span class="line">RepairOrder() &#123;</span><br><span class="line">Adult a = <span class="keyword">new</span> Adult();</span><br><span class="line">b.setSuper(a);</span><br><span class="line">a.setSuper(<span class="keyword">new</span> SuperMan());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractRepairMan <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">RepairOrder ro = <span class="keyword">new</span> RepairOrder();</span><br><span class="line">ro.getFirst().handle(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i can handle it - Adult</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-14-职责链模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Spring学习笔记</title>
    <link href="http://hibiscidai.com/2018/05/08/2018-5-8-Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://hibiscidai.com/2018/05/08/2018-5-8-Spring学习笔记/</id>
    <published>2018-05-07T16:00:00.000Z</published>
    <updated>2018-07-04T03:04:51.454Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/Spring学习笔记封面.jpg" alt="Spring学习笔记封面"></p><p>Spring，轻量级JavaEE解决方案，是众多优秀设计模式的整合，学习笔记</p><a id="more"></a><p>[TOC]</p><h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><h2 id="什么是Spring"><a href="#什么是Spring" class="headerlink" title="什么是Spring"></a>什么是Spring</h2><p>轻量级JavaEE解决方案，是众多优秀设计模式的整合</p><h2 id="设计模式（公式）"><a href="#设计模式（公式）" class="headerlink" title="设计模式（公式）"></a>设计模式（公式）</h2><p>解决一些特定问题的经典代码</p><h3 id="Spring框架中主要的设计模式"><a href="#Spring框架中主要的设计模式" class="headerlink" title="Spring框架中主要的设计模式"></a>Spring框架中主要的设计模式</h3><p>工厂<br>代理<br>模板</p><h2 id="工厂模式简介"><a href="#工厂模式简介" class="headerlink" title="工厂模式简介"></a>工厂模式简介</h2><ul><li>作用：生产对象</li><li>耦合：代码之间具有强关联性</li><li>好处：解耦合</li><li>工厂设计思路：建立一个工厂类，有工厂类负责对象的创建</li></ul><h1 id="Spring开发步骤（通过工厂设计模式创建对象）"><a href="#Spring开发步骤（通过工厂设计模式创建对象）" class="headerlink" title="Spring开发步骤（通过工厂设计模式创建对象）"></a>Spring开发步骤（通过工厂设计模式创建对象）</h1><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><p>引入jar包</p><h2 id="引入Spring配置文件"><a href="#引入Spring配置文件" class="headerlink" title="引入Spring配置文件"></a>引入Spring配置文件</h2><p>放置位置随意，命名随意，默认 <code>ApplicationContext.xml</code> </p><h2 id="核心API"><a href="#核心API" class="headerlink" title="核心API"></a>核心API</h2><p>ApplicationContext(工厂)</p><blockquote><p>重量级资源，内存多，功能强，一个应用只创建一个，线程安全</p></blockquote><h3 id="接口的实现类"><a href="#接口的实现类" class="headerlink" title="接口的实现类"></a>接口的实现类</h3><ul><li><p>ClassPathXmlApplicationContext（非Web环境）</p></li><li><p>WebXmlApplicationContext（Web环境）</p></li></ul><h1 id="Srping工厂的开发步骤"><a href="#Srping工厂的开发步骤" class="headerlink" title="Srping工厂的开发步骤"></a>Srping工厂的开发步骤</h1><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"fancylab.hibiscidai.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通过Spring的工厂类创建对象"><a href="#通过Spring的工厂类创建对象" class="headerlink" title="通过Spring的工厂类创建对象"></a>通过Spring的工厂类创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//通过Spring工厂创建UserServiceImpl对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSpring</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建工厂</span></span><br><span class="line">    ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"/applicationContext.xml"</span>);</span><br><span class="line">    <span class="comment">//利用工厂创建对象</span></span><br><span class="line">    UserService us = (UserService)ac.getBean(<span class="string">"userService"</span>);</span><br><span class="line">    </span><br><span class="line">    us.register();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Spring工厂创建对象的原理"><a href="#Spring工厂创建对象的原理" class="headerlink" title="Spring工厂创建对象的原理"></a>Spring工厂创建对象的原理</h1><ol><li>读取配置文件</li><li>获得全限定名</li><li>通过反射获取对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">"全限定名"</span>);</span><br><span class="line">clazz.newInstance();<span class="comment">//创建对象</span></span><br></pre></td></tr></table></figure><h1 id="注入（Injection）"><a href="#注入（Injection）" class="headerlink" title="注入（Injection）"></a>注入（Injection）</h1><p>通过Spring的配置文件为对象的成员变量赋值</p><h2 id="Set注入"><a href="#Set注入" class="headerlink" title="Set注入"></a>Set注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>通过Spring工厂创建对象</li><li>调用兑现给的set方法通过配置文件映射进行设值</li></ol><blockquote><p>配置文件中 <code>&lt; property name=&quot;id&quot; &gt;</code> 属性要和类的成员变量名对应，并一定要在类中书写setter和getter方法</p></blockquote><h3 id="JDK类型成员变量"><a href="#JDK类型成员变量" class="headerlink" title="JDK类型成员变量"></a>JDK类型成员变量</h3><p>现有 <code>User</code> 类<br>类结构如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] tels;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; l = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; s = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> Map&lt;Integer, String&gt; m = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line"><span class="keyword">private</span> Properties p = <span class="keyword">new</span> Properties(); <span class="comment">// 特殊的Map 键值都是String类型</span></span><br><span class="line"><span class="comment">//setter与getter方法</span></span><br><span class="line"><span class="comment">//toString方法</span></span><br><span class="line"><span class="comment">//无参有参构造方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/User类结构.jpg" alt="User类结构"></p><h4 id="8种基本类型及String类型"><a href="#8种基本类型及String类型" class="headerlink" title="8种基本类型及String类型"></a>8种基本类型及String类型</h4><p>在配置文件中声明如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.User"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>20<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>小黑<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="数组类型的成员变量"><a href="#数组类型的成员变量" class="headerlink" title="数组类型的成员变量"></a>数组类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"tels"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="List类型的成员变量"><a href="#List类型的成员变量" class="headerlink" title="List类型的成员变量"></a>List类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"l"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaohei<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaohua<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaobai<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiaowb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Set类型的成员变量"><a href="#Set类型的成员变量" class="headerlink" title="Set类型的成员变量"></a>Set类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Set成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"s"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>xiao3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Map类型的成员变量"><a href="#Map类型的成员变量" class="headerlink" title="Map类型的成员变量"></a>Map类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"m"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf2<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>zkf3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Properties类型的成员变量"><a href="#Properties类型的成员变量" class="headerlink" title="Properties类型的成员变量"></a>Properties类型的成员变量</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Propertis类型的成员变量赋值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"p"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>value1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span>value2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自建（自定义）类型注入成员变量"><a href="#自建（自定义）类型注入成员变量" class="headerlink" title="自建（自定义）类型注入成员变量"></a>自建（自定义）类型注入成员变量</h4><p>对于三层架构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dao</span><br><span class="line">daoImpl</span><br><span class="line">service</span><br><span class="line">serviceImpl</span><br></pre></td></tr></table></figure><p><code>service</code> 层引用 <code>dao</code> 层作为成员变量</p><h5 id="书写创建对象的类"><a href="#书写创建对象的类" class="headerlink" title="书写创建对象的类"></a>书写创建对象的类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao userDao;</span><br><span class="line"><span class="comment">//setter和getter方法</span></span><br><span class="line"><span class="comment">//实现接口方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在Spring配置中配置对应的-lt-bean-gt-标签"><a href="#在Spring配置中配置对应的-lt-bean-gt-标签" class="headerlink" title="在Spring配置中配置对应的 &lt; bean &gt; 标签"></a>在Spring配置中配置对应的 &lt; bean &gt; 标签</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置UserDAOIMpl的Bean标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.dao.UserDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置该类的信息 UserServiceImpl --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 成员变量定义引入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ref</span> <span class="attr">local</span>=<span class="string">"userDao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在目标实体类中定义成员变量，并且在配置文件中进行引入</p></blockquote><h5 id="自动注入"><a href="#自动注入" class="headerlink" title="自动注入"></a>自动注入</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动注入，在spring配置文件中查询该成员变量指向的实际类型（通过类型） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span> <span class="attr">autowire</span>=<span class="string">"byType"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过成员变量的名字，匹配spring配置文件中的bean标签的id值 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.service.impl.UserServiceImpl"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="构造方法注入（了解）"><a href="#构造方法注入（了解）" class="headerlink" title="构造方法注入（了解）"></a>构造方法注入（了解）</h2><p>spring通过构造方法完成对于成员变量的赋值</p><p>前提：提供有参构造</p><h3 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h3><p>以类 <code>Account</code> 为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//set和get方法</span></span><br><span class="line"><span class="comment">//构造方法</span></span><br><span class="line"><span class="comment">//toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="提供有参构造"><a href="#提供有参构造" class="headerlink" title="提供有参构造"></a>提供有参构造</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(Integer id, Integer age)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="spring的配置文件配置"><a href="#spring的配置文件配置" class="headerlink" title="spring的配置文件配置"></a>spring的配置文件配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.Account"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量进行构造方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span>  <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>有参构造中的成员变量的个数与顺序和构造注入时保持一致</p></blockquote><h3 id="构造方法可以重载"><a href="#构造方法可以重载" class="headerlink" title="构造方法可以重载"></a>构造方法可以重载</h3><ul><li><p>如果构造方法中，参数的个数不同时，通过  <code>&lt; contructor-arg &gt;</code> 标签的数量进行区分</p></li><li><p>如果构造方法的个数相同时，通过 <code>&lt; Contructor-arg type=&quot;&quot; &gt;</code>  通过参数类型区分</p></li></ul><h1 id="IOC与DI概念"><a href="#IOC与DI概念" class="headerlink" title="IOC与DI概念"></a>IOC与DI概念</h1><h2 id="IOC-Inversion-of-Control-反转控制"><a href="#IOC-Inversion-of-Control-反转控制" class="headerlink" title="IOC (Inversion  of Control) 反转控制"></a>IOC (Inversion  of Control) 反转控制</h2><ul><li><p>控制<br>对于成员变量的控制权</p></li><li><p>反转<br>把对于成员变量赋值的控制权从代码中转移到配置文件中完成</p></li></ul><p>例如 <code>UserServiceImpl</code></p><ul><li>使用前声明方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud = <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用后声明方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> UserDao ud;</span><br><span class="line"><span class="comment">//set和get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在配置文件中进行set注入，把成员变量的赋值控制权从代码中转移到配置文件中</p><h2 id="DI-dependency-injection-依赖注入"><a href="#DI-dependency-injection-依赖注入" class="headerlink" title="DI (dependency  injection) 依赖注入"></a>DI (dependency  injection) 依赖注入</h2><p>当一个类型需要使用另一个类型时，就意味着他依赖另一个类型，那么就可以把另一个类型作为成员变量通过Spring的配置文件进行赋值。</p><p>解耦合</p><p>上<code>构造方法注入</code>例中已说明</p><h1 id="FactoryBean（接口）"><a href="#FactoryBean（接口）" class="headerlink" title="FactoryBean（接口）"></a>FactoryBean（接口）</h1><p>有些简单对象可以通过 <code>new</code> 的方式直接创建<br>复杂对象不能通过new对象创建，例如 <code>SqlSessionFactory</code></p><p>作用：在Spring的工厂中创建复杂对象</p><h2 id="开发步骤-1"><a href="#开发步骤-1" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="该复杂类实现-FactoryBean-接口"><a href="#该复杂类实现-FactoryBean-接口" class="headerlink" title="该复杂类实现 FactoryBean 接口"></a>该复杂类实现 FactoryBean 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionFactory</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line"><span class="comment">// 作用：用于书写创建复杂对象的代码，并把创建的复杂对象作为方法的返回值返回</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 创建连接对象</span></span><br><span class="line"><span class="comment">// 加载驱动</span></span><br><span class="line">Class.forName(<span class="string">"oracle.jdbc.OracleDriver"</span>);</span><br><span class="line"><span class="comment">// 获取连接</span></span><br><span class="line">Connection connection = DriverManager.getConnection(<span class="string">"jdbc:oracle:thin:@localhost:1521:xe"</span>, <span class="string">"hr"</span>, <span class="string">"hr"</span>);</span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回创建的复杂对象的类对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Class <span class="title">getObjectType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Connection.class;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制复杂对象的创建次数，根据对象的特点进行返回</span></span><br><span class="line"><span class="comment">// true:Spring工厂只会创建一次该复杂对象</span></span><br><span class="line"><span class="comment">// false:每一次调用Spring工厂 Spring都会创建新的复杂对象</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring配置文件中配置"><a href="#Spring配置文件中配置" class="headerlink" title="Spring配置文件中配置"></a>Spring配置文件中配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置创建复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.factory.ConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建工厂</span></span><br><span class="line">ApplicationContext ac = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line"><span class="comment">// 创建Connection对象 注意：直接返回 所要创建的复杂对象</span></span><br><span class="line">Connection conn = (Connection) ac.getBean(<span class="string">"conn"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>通过bean标签的id值，直接创建对象时，拿到的是复杂对象<br>如果想要拿到原始对象，则需要在Spring创建对象时加上 <code>&amp;</code> 号</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConnectionFactory cf = (ConnectionFactory) ac.getBean(<span class="string">"&amp;conn"</span>);</span><br><span class="line">System.out.println(cf);</span><br></pre></td></tr></table></figure><h3 id="控制简单对象的创建次数"><a href="#控制简单对象的创建次数" class="headerlink" title="控制简单对象的创建次数"></a>控制简单对象的创建次数</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">""</span> <span class="attr">scope</span>=<span class="string">"singleton|prototype"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><code>singleton</code> 默认，简单对象只会被创建一次。<br><code>prototype</code> 简单对象每次使用时都会创建新的对象。</p><h1 id="Spring工厂的高级特性"><a href="#Spring工厂的高级特性" class="headerlink" title="Spring工厂的高级特性"></a>Spring工厂的高级特性</h1><h2 id="工厂创建对象的生命周期"><a href="#工厂创建对象的生命周期" class="headerlink" title="工厂创建对象的生命周期"></a>工厂创建对象的生命周期</h2><p>工厂被创建，对象被创建<br>工厂被关闭，对象被销毁</p><h2 id="生命周期方法"><a href="#生命周期方法" class="headerlink" title="生命周期方法"></a>生命周期方法</h2><h3 id="init-method"><a href="#init-method" class="headerlink" title="init-method"></a>init-method</h3><p>对象中任意定义一个初始化方法·。Spring会在这个对象创建之后，自动调用初始化方法的功能。</p><h3 id="destroy-method"><a href="#destroy-method" class="headerlink" title="destroy-method"></a>destroy-method</h3><p>对象中任意定义一个销毁方法。Spring会在这个对销毁之前调用销毁方法。</p><p>在<code>Account</code>类中声明方法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"account"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.entity.Account"</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"destory"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为成员变量进行构造方法注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>18<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置信息参数化"><a href="#配置信息参数化" class="headerlink" title="配置信息参数化"></a>配置信息参数化</h2><p>作用：把Spring配置文件中，需要修改的jdbc相关参数，提取到一个小的专一化的配置文件中</p><p>好处：利于后续的维护</p><h3 id="开发步骤-2"><a href="#开发步骤-2" class="headerlink" title="开发步骤"></a>开发步骤</h3><h4 id="准备小配置文件"><a href="#准备小配置文件" class="headerlink" title="准备小配置文件"></a>准备小配置文件</h4><p>创建文件 <code>jdbc.properties</code> 文件要以 <code>.properties</code> 结尾</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driverclassname=oracle.jdbc.OracleDriver</span><br><span class="line">url=jdbc:oracle:thin:@localhost:1521:xe</span><br><span class="line">name=hr</span><br><span class="line">password=hr</span><br></pre></td></tr></table></figure><h4 id="与spring配置文件整合"><a href="#与spring配置文件整合" class="headerlink" title="与spring配置文件整合"></a>与spring配置文件整合</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                            "</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用Context标签 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过Context标签读取对应的配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"/jdbc.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>其中，引入context标签<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xmlns:context="http://www.springframework.org/schema/context"</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://www.springframework.org/schema/context</span><br><span class="line">http://www.springframework.org/schema/context/spring-context-3.2.xsd</span><br></pre></td></tr></table></figure><h4 id="通过占位符替换Spring配置文件中的内容"><a href="#通过占位符替换Spring配置文件中的内容" class="headerlink" title="通过占位符替换Spring配置文件中的内容"></a>通过占位符替换Spring配置文件中的内容</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置创建复杂对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"conn"</span> <span class="attr">class</span>=<span class="string">"org.fancylab.hibiscidai.factory.ConnectionFactory"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Set注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverclassname"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;driverclassname&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;url&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>$&#123;password&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="AOP-Aspect-Oriented-Program-面向切面编程"><a href="#AOP-Aspect-Oriented-Program-面向切面编程" class="headerlink" title="AOP(Aspect Oriented Program) | 面向切面编程"></a>AOP(Aspect Oriented Program) | 面向切面编程</h1><h2 id="静态代理设计模式（Proxy）"><a href="#静态代理设计模式（Proxy）" class="headerlink" title="静态代理设计模式（Proxy）"></a>静态代理设计模式（Proxy）</h2><p><img src="/2018/05/08/2018-5-8-Spring学习笔记/静态代理设计模式.png" alt="静态代理设计模式"></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>原始对象（目标对象）</li></ul><p>只做核心功能</p><ul><li>原始方法</li></ul><p>原始对象中的方法，只做核心功能</p><ul><li>额外功能</li></ul><p>事务  日志  性能</p><ul><li>代理对象</li></ul><p>原始对象+额外功能+与原始对象实现相同的接口</p><ul><li>好处</li></ul><p>利于维护</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>学习源码<a href="https://github.com/HibisciDai/TestSpring" target="_blank" rel="noopener">HibisciDai/TestSpring</a></p>]]></content>
    
    <summary type="html">
    
      Spring学习笔记
    
    </summary>
    
      <category term="后台" scheme="http://hibiscidai.com/categories/%E5%90%8E%E5%8F%B0/"/>
    
    
      <category term="Spring" scheme="http://hibiscidai.com/tags/Spring/"/>
    
      <category term="学习笔记" scheme="http://hibiscidai.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-13-代理模式</title>
    <link href="http://hibiscidai.com/2018/04/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-13-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/04/28/设计模式-13-代理模式/</id>
    <published>2018-04-27T16:00:00.000Z</published>
    <updated>2018-06-25T09:01:57.180Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/28/设计模式-13-代理模式/设计模式13.png" alt="设计模式13"></p><p>设计模式-13-代理模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-13-代理模式"><a href="#设计模式-13-代理模式" class="headerlink" title="设计模式-13-代理模式"></a>设计模式-13-代理模式</h1><h1 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式(Proxy Pattern)"></a>代理模式(Proxy Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>为其他独享提供一种代理以控制对这个对象的访问。</p><blockquote><p>The Intent of the pattern is to provide a surrogate or placeholder foran object to control access to.</p></blockquote><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><p>想在访问一个类时做一些控制。<br>例如权限。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>实现与被代理类组合。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>增加中间层</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>Windows 里面的快捷方式。 </li><li>猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类。 </li><li>买火车票不一定在火车站买，也可以去代售点。</li><li>一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制。</li><li>spring aop。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>职责清晰。</li><li>高扩展性。 </li><li>智能化。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。 </li><li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>按职责来划分，通常有以下使用场景： </p><ul><li>远程代理。 </li><li>虚拟代理。</li><li>Copy-on-Write 代理。</li><li>保护（Protect or Access）代理。</li><li>Cache代理。</li><li>防火墙（Firewall）代理。</li><li>同步化（Synchronization）代理。</li><li>智能引用（Smart Reference）代理。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。</li><li>和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li><li>和外观模式的区别：外观模式是封装了子类的全部，代理模式是针对于一个对象来说。</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>对于word文档，图片不滚动就加载不出来</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/28/设计模式-13-代理模式/案例1.png" alt="案例1"></p><p>修改后类图：</p><p><img src="/2018/04/28/设计模式-13-代理模式/案例1-1.png" alt="案例1-1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Text t = <span class="keyword">new</span> Text();</span><br><span class="line">t.show();</span><br><span class="line">ProxyPic p = <span class="keyword">new</span> ProxyPic();</span><br><span class="line">p.show()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pic.focus()) &#123;</span><br><span class="line">        Pic p = <span class="keyword">new</span> Pic();</span><br><span class="line">        p.show();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//a place holder for pic</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>我们将创建一个 Image 接口和实现了 Image 接口的实体类。ProxyImage 是一个代理类，减少 RealImage 对象加载的内存占用。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/28/设计模式-13-代理模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern13.proxy.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">loadFromDisk(fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Displaying "</span> + fileName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Loading "</span> + fileName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> RealImage realImage;</span><br><span class="line"><span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (realImage == <span class="keyword">null</span>) &#123;</span><br><span class="line">realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">&#125;</span><br><span class="line">realImage.display();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Image image = <span class="keyword">new</span> ProxyImage(<span class="string">"test_10mb.jpg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">image.display();</span><br><span class="line">System.out.println(<span class="string">""</span>);</span><br><span class="line"><span class="comment">// 图像将无法从磁盘加载</span></span><br><span class="line">image.display();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Loading test_10mb.jpg</span><br><span class="line">Displaying test_10mb.jpg</span><br><span class="line"></span><br><span class="line">Displaying test_10mb.jpg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-13-代理模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-12-享元模式</title>
    <link href="http://hibiscidai.com/2018/04/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-12-%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/04/25/设计模式-12-享元模式/</id>
    <published>2018-04-24T16:00:00.000Z</published>
    <updated>2018-06-22T15:07:07.680Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/25/设计模式-12-享元模式/设计模式12.png" alt="设计模式12"></p><p>设计模式-12-享元模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-12-享元模式"><a href="#设计模式-12-享元模式" class="headerlink" title="设计模式-12-享元模式"></a>设计模式-12-享元模式</h1><h1 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式(Flyweight Pattern)"></a>享元模式(Flyweight Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>运用共享技术有效地支持大量细粒度的对象。</p><blockquote><p>The Intent of this pattern is to use sharing to a large number of objects that have part of their internal state in common whaere the other part of state can vary.</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构方式。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>系统中有大量对象。 </li><li>这些对象消耗大量内存。</li><li>这些对象的状态大部分可以外部化。</li><li>这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。</li><li>系统不依赖于这些对象身份，这些对象是不可分辨的。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>用 HashMap 存储这些对象。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 </li><li>数据库的数据池。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>大大减少对象的创建，降低系统的内存，使效率提高。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>系统有大量相似对象。</li><li>需要缓冲池的场景。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>注意划分外部状态和内部状态，否则可能会引起线程安全问题。</li><li>这些类必须有一个工厂对象加以控制。</li><li>常和compostie（组合）模式结合</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>构建一个森林，里边有大量的河流、草、树木及其他大粒度对象。</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/25/设计模式-12-享元模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern12.flyweight.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">River</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一条"</span> + size + <span class="string">"米长的河"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gress</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一课"</span> + size + <span class="string">"米高的草"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span> <span class="keyword">extends</span> <span class="title">Forest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"一课"</span> + size + <span class="string">"米高的树"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line">Hashtable&lt;String, Forest&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Forest&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">poolAdd(<span class="string">"river"</span>, <span class="keyword">new</span> River());</span><br><span class="line">poolAdd(<span class="string">"tree"</span>, <span class="keyword">new</span> Tree());</span><br><span class="line">poolAdd(<span class="string">"gress"</span>, <span class="keyword">new</span> Gress());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poolAdd</span><span class="params">(String key, Forest forest)</span> </span>&#123;</span><br><span class="line">pool.put(key, forest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Forest <span class="title">getFlyWeight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!pool.contains(key)) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有这个对象，请先添加！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (Forest) pool.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>军队士兵的例子</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/25/设计模式-12-享元模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern12.flyweight.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">String color;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Color</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Color</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> color;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> height;</span><br><span class="line">Color skinColor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solider</span> <span class="keyword">extends</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"士兵，高："</span> + height + <span class="string">",肤色"</span> + skinColor.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ninja</span> <span class="keyword">extends</span> <span class="title">Enemy</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"忍者，高："</span> + height + <span class="string">",肤色"</span> + skinColor.toString());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyWeightFactory</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Hashtable&lt;String, Enemy&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Enemy&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">pool.put(<span class="string">"solider"</span>, <span class="keyword">new</span> Solider());</span><br><span class="line">pool.put(<span class="string">"ninja"</span>, <span class="keyword">new</span> Ninja());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FlyWeightFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">poolAdd(<span class="string">"solider"</span>, <span class="keyword">new</span> Solider());</span><br><span class="line">poolAdd(<span class="string">"ninja"</span>, <span class="keyword">new</span> Ninja());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poolAdd</span><span class="params">(String key, Enemy e)</span> </span>&#123;</span><br><span class="line">pool.put(key, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Enemy <span class="title">getFlyWeight</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!pool.contains(key)) &#123;</span><br><span class="line">System.out.println(<span class="string">"没有这个对象，请先添加！"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (Enemy) pool.get(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><p>详见 菜鸟教程</p><p><img src="/2018/04/25/设计模式-12-享元模式/案例3.jpg" alt="案例3"></p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>享元类应为接口而不是抽象类，否则无法获取。前两个案例有问题。</p><p>Hashtable 声明方式应该注意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hashtable&lt;String, Forest&gt; pool = <span class="keyword">new</span> Hashtable&lt;String, Forest&gt;();<span class="comment">//正确</span></span><br><span class="line">Hashtable pool = <span class="keyword">new</span> Hashtable();<span class="comment">//不报错，不规范</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      设计模式-12-享元模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-11-外观模式</title>
    <link href="http://hibiscidai.com/2018/04/23/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-11-%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://hibiscidai.com/2018/04/23/设计模式-11-外观模式/</id>
    <published>2018-04-22T16:00:00.000Z</published>
    <updated>2018-06-21T14:33:06.540Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="/2018/04/23/设计模式-11-外观模式/设计模式11.png" alt="设计模式11"></p><p>设计模式-11-外观模式</p><p>个人github地址：<a href="https://github.com/HibisciDai" target="_blank" rel="noopener">HibisciDai</a></p><p>设计模式系列项目源码：<a href="https://github.com/HibisciDai/DesignPattern-LearningNotes-HibisciDai" target="_blank" rel="noopener">HibisciDai/DesignPattern-LearningNotes-HibisciDai</a></p><p>processon在线UML类图：<a href="https://www.processon.com/i/5b0a404be4b0b0a47abf79c6" target="_blank" rel="noopener">processon</a></p><a id="more"></a><p>[TOC]</p><h1 id="设计模式-11-外观模式"><a href="#设计模式-11-外观模式" class="headerlink" title="设计模式-11-外观模式"></a>设计模式-11-外观模式</h1><h1 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式(Facade Pattern)"></a>外观模式(Facade Pattern)</h1><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式，向现有系统提供添加了一个接口，来隐藏系统的复杂性。<br>这种模式涉及了一个单一的类，提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><h2 id="主要解决"><a href="#主要解决" class="headerlink" title="主要解决"></a>主要解决</h2><p>降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。</p><h2 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h2><ul><li>客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。</li><li>定义系统的入口。</li></ul><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><p>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>客户端不与系统耦合，外观类与系统耦合。</p><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><ul><li>去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便。</li><li>JAVA 的三层开发模式。</li><li>电脑的例子更形象：<br>电脑整机是CUP、内存、硬盘的外观。有了外观以后，启动电脑和关闭电脑都简化了。<br>启动电脑（按一下电源键）：启动CPU、启动内存、启动硬盘<br>关闭电脑（按一下电源键）：关闭硬盘、关闭内存、关闭CPU</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>减少系统相互依赖。</li><li>提高灵活性。</li><li>提高了安全性。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>为复杂的模块或子系统提供外界访问的模块。</li><li>子系统相对独立。</li><li>预防低水平人员带来的风险。</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>抽象工厂模式，可代替其模式隐藏细节。</li><li>单例模式中，Facade对象常为Singleton模式</li></ul><h2 id="案例1"><a href="#案例1" class="headerlink" title="案例1"></a>案例1</h2><p>模拟一个取钱过程</p><h3 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/23/设计模式-11-外观模式/案例1.png" alt="案例1"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><code>pattern11.facade.demo1</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NingLi</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fetchAndCarry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"搬"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoBai</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">install</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"安装"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Doraemon</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">account</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"结算"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SuperMan</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">protect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"保护"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Other</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">other</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"其他"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Facade</span> </span>&#123;</span><br><span class="line">NingLi nl = <span class="keyword">new</span> NingLi();</span><br><span class="line">XiaoBai xb = <span class="keyword">new</span> XiaoBai();</span><br><span class="line">Doraemon dn = <span class="keyword">new</span> Doraemon();</span><br><span class="line">SuperMan sm = <span class="keyword">new</span> SuperMan();</span><br><span class="line">Other o = <span class="keyword">new</span> Other();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawMoney</span><span class="params">()</span> </span>&#123;</span><br><span class="line">nl.fetchAndCarry();</span><br><span class="line">sm.protect();</span><br><span class="line">dn.account();</span><br><span class="line">o.other();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">installSoftWare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">xb.install();</span><br><span class="line">dn.account();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出"><a href="#测试输出" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Facade f = <span class="keyword">new</span> Facade();</span><br><span class="line">f.DrawMoney();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">搬</span><br><span class="line">保护</span><br><span class="line">结算</span><br><span class="line">其他</span><br></pre></td></tr></table></figure><h2 id="案例2"><a href="#案例2" class="headerlink" title="案例2"></a>案例2</h2><p>投影仪放电影有很多操作，现在需要提供一个方便看电影的类。</p><h3 id="类图-1"><a href="#类图-1" class="headerlink" title="类图"></a>类图</h3><p><img src="/2018/04/23/设计模式-11-外观模式/案例2.png" alt="案例2"></p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p><code>pattern11.facade.demo2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Projector</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Projector-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Projector-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-放入"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-拿出"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"CD-播放"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DVD</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"DVD-播放"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Light</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">on</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Light-开"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">off</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Light-关"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Projector p;</span><br><span class="line"><span class="keyword">private</span> CD c;</span><br><span class="line"><span class="keyword">private</span> DVD d;</span><br><span class="line"><span class="keyword">private</span> Light l;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Movie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p = <span class="keyword">new</span> Projector();</span><br><span class="line">c = <span class="keyword">new</span> CD();</span><br><span class="line">d = <span class="keyword">new</span> DVD();</span><br><span class="line">l = <span class="keyword">new</span> Light();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">p.up();</span><br><span class="line">l.off();</span><br><span class="line">d.on();</span><br><span class="line">c.on();</span><br><span class="line">c.play();</span><br><span class="line">d.play();</span><br><span class="line">d.off();</span><br><span class="line">c.off();</span><br><span class="line">l.on();</span><br><span class="line">p.down();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试输出-1"><a href="#测试输出-1" class="headerlink" title="测试输出"></a>测试输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Movie m = <span class="keyword">new</span> Movie();</span><br><span class="line">m.watch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Projector-开</span><br><span class="line">Light-关</span><br><span class="line">DVD-开</span><br><span class="line">CD-放入</span><br><span class="line">CD-播放</span><br><span class="line">DVD-播放</span><br><span class="line">DVD-关</span><br><span class="line">CD-拿出</span><br><span class="line">Light-开</span><br><span class="line">Projector-关</span><br></pre></td></tr></table></figure><h2 id="案例3"><a href="#案例3" class="headerlink" title="案例3"></a>案例3</h2><p>详见 菜鸟教程</p><p><img src="/2018/04/23/设计模式-11-外观模式/案例3.jpg" alt="案例3"></p>]]></content>
    
    <summary type="html">
    
      设计模式-11-外观模式
    
    </summary>
    
      <category term="设计模式" scheme="http://hibiscidai.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="http://hibiscidai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
